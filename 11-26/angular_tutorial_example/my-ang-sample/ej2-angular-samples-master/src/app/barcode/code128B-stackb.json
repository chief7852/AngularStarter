{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation,ViewChild } from '@angular/core';\nimport { DropDownList, ChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { BarcodeGeneratorComponent } from '@syncfusion/ej2-angular-barcode-generator';\nimport { TextBoxComponent } from '@syncfusion/ej2-angular-inputs';\nimport { ChangeEventArgs as NumericChangeEventArgs, FormValidator, FormValidatorModel } from '@syncfusion/ej2-inputs';\nimport { ValidateEvent } from '@syncfusion/ej2-barcode-generator';\nimport { CheckBoxChangeEventArgs } from '@syncfusion/ej2-grids';\nimport {  ColorPickerEventArgs } from '@syncfusion/ej2-inputs';\nimport { TextPosition, Alignment } from '@syncfusion/ej2-barcode-generator/src/barcode/enum/enum';\nimport { TextBox, NumericTextBox, ChangedEventArgs } from '@syncfusion/ej2-inputs';\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  @ViewChild('barcode')\n   public barcode: BarcodeGeneratorComponent;\n   @ViewChild('displayText')\n   public displayText:TextBoxComponent\n   public canShowError: boolean = false;\n  public customfn(): any {\n    let customFn: (args: { [key: string]: string }) => boolean = (args: { [key: string]: string }) => {\n      if (this.canShowError) {\n          return false;\n      }\n      return true;\n  };\n  return customFn\n  }\n\n  public options(): any {\n    let custom = this.customfn()\n    let options: FormValidatorModel = {\n      rules: {\n        'password': { minLength: [custom, 'Invalid input'] }\n      },\n      keyup(): void {\n        if (this.canShowError) {\n          this.canShowError = false;\n        }\n      },\n      focusout(args: any): void {\n        this.displayText.value = this.barcode.value = (document.getElementById('barcodeValue') as HTMLInputElement).value;\n        this.barcode.dataBind();\n      },\n\n\n    };\n    return options\n  }\n  public invalidInput(args: ValidateEvent): void {\n    let error: HTMLElement = document.getElementById('errorblog');\n\n    this.canShowError = true;\n    let options = this.options()\n    let formobject =  new FormValidator('#form-element', options);\n    //this.formObject.validate();\n    formobject.validate();\n  }\n  \n\n   public textPositionValue: { [key: string]: Object }[] = [\n    { type: 'Bottom', text: 'Bottom' },\n    { type: 'Top', text: 'Top' },\n  ];\n\n  public textAlignmentValues: { [key: string]: Object }[] = [\n    { type: 'Left', text: 'Left' },\n        { type: 'Right', text: 'Right' },\n        { type: 'Center', text: 'Center' },\n  ];\n   public barcodevalueOnChange(args){\n    this.barcode.value = args.value.toString();\n    this.displayText.value = args.value.toString();\n  }\n\n  public onWidthChange(args: NumericChangeEventArgs){\n    this.barcode.width = args.value.toString();\n  }\n  public onheightChange(args: NumericChangeEventArgs){\n    this.barcode.height = args.value.toString();\n  }\n\n  public textVisibilityChange(args: CheckBoxChangeEventArgs){\n    this.barcode.displayText.visibility = args.checked;\n  }\n\n  public svgModeChange(args: CheckBoxChangeEventArgs){\n    this.barcode.mode = args.checked ? 'SVG' : 'Canvas';\n  }\n\n  public bgColorChange(args: ColorPickerEventArgs){\n    this.barcode.backgroundColor = args.currentValue.hex;\n  }\n  public foreColorChange(args: ColorPickerEventArgs){\n    this.barcode.foreColor = args.currentValue.hex;\n  }\n  \n\n  public marginLeftChange(args: NumericChangeEventArgs){\n    this.barcode.margin.left = args.value;\n  }\n  public MarginRighthChange(args: NumericChangeEventArgs){\n    this.barcode.margin.right = args.value;\n  }\n  public marginTopChange(args: NumericChangeEventArgs){\n    this.barcode.margin.top = args.value;\n  }\n  public MarginBottomtChange(args: NumericChangeEventArgs){\n    this.barcode.margin.bottom = args.value;\n  }\n\n\n  public TextmarginTophChange(args: NumericChangeEventArgs){\n    this.barcode.displayText.margin.top = args.value;\n  }\n  public TextMarginBottomhChange(args: NumericChangeEventArgs){\n    this.barcode.displayText.margin.bottom = args.value;\n  }\n\n  public textPositionOnChange(args: ChangeEventArgs){\n    this.barcode.displayText.position = (args.value) as TextPosition;\n  }\n  \n  public textAlignmentOnChange(args: ChangeEventArgs){\n    this.barcode.displayText.alignment = (args.value) as Alignment;\n  }\n  \n\n  public displayTextOnChange(args: ChangedEventArgs){\n    this.barcode.displayText.text = args.value.toString();\n  }\n  \n  \n}","app/app.module.ts":"import { BarcodeGeneratorAllModule,QRCodeGeneratorAllModule,DataMatrixGeneratorAllModule} from '@syncfusion/ej2-angular-barcode-generator';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ BarcodeGeneratorAllModule, ButtonModule,QRCodeGeneratorAllModule,DataMatrixGeneratorAllModule,       ColorPickerModule, CheckBoxModule, ToolbarModule, DropDownButtonModule, UploaderModule, DropDownListAllModule, ListViewAllModule,        TextBoxModule, RadioButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<style>\n    .top {\n        margin-top: 10px;\n    }\n\n    .centercontrol {\n        margin: auto;\n        width: 50%;\n        height: 50%;\n    }\n\n    .center {\n            margin-left: 14px;\n            margin-right: 17px;\n            margin-top: 14px;\n            min-width: 280px;\n            width: auto;\n            border: 2px solid lightgray;\n            min-height: 40%;\n            padding-top: 35px;\n        }\n\n    .allowedText {\n        margin-left: 14px;\n        margin-right: 17px;\n        margin-top: 14px;\n        width: auto;\n        height: auto;\n    }\n\n    .row {\n        margin-right: 0px;\n        margin-left: 0px;\n        margin-top: 8px;\n    }\n</style>\n\n\n    <div class=\"col-lg-8\" style=\"width: 64%\">\n        <div class=\"content-wrapper\">\n            <div class='center'>\n                    <div class='centercontrol' style=\"width:200px;height:200px\">\n                    <ejs-barcodegenerator style=\"display: block;\" #barcode id=\"barcode\" width=\"200px\" height=\"150px\"\n                        mode=\"SVG\" (invalid)=\"invalidInput($event)\" type=\"Code128B\" value=\"SYNCFUSION\">\n                    </ejs-barcodegenerator>\n                </div>\n            </div>\n            <div class='allowedText'>\n                <span style=\"font-weight: 600;\"> Allowed Input characters :</span> support 0-9 A-Z a-z and special\n                character\n            </div>\n        </div>\n    </div>\n    <div class=\"col-lg-4 property-section\" style=\"padding-right: 0px;\npadding-left: 18px;\">\n        <div class=\"property-panel-header\">\n            Appearance\n        </div>\n        <div id=\"propertypanel\" class=\"e-remove-selection\">\n\n            <div class=\"property-section-content\">\n\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-2 top\" style=\"padding-left: 0px;\">\n                        Value\n                    </div>\n                    <div class=\"col-xs-10\" style=\"padding-left: 0px\">\n                        <form id=\"form-element\" class=\"form-horizontal\">\n\n                            <div id='barcodevaluediv' name=\"password\">\n                                <ejs-textbox #barcodevalue id=\"barcodevalue\" value='SYNCFUSION'\n                                    (change)=\"barcodevalueOnChange($event)\"></ejs-textbox>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div>\n                        <div class=\"col-xs-2 top\" style=\"padding-left: 0px;padding-right: 20px;\">\n                            Width\n                        </div>\n                        <div class=\"col-xs-3\" style=\"width: 33%;padding-left: 0px\">\n                            <ejs-numerictextbox id=\"width\" format=\"###.##\" value=\"200\" min=\"150\" max=\"250\" step=\"2\"\n                                (change)='onWidthChange($event)'></ejs-numerictextbox>\n                        </div>\n                    </div>\n                    <div>\n                        <div class=\"col-xs-2 top\">\n                            Height\n                        </div>\n                        <div class=\"col-xs-3\" style=\"width: 33%;padding-left: 0px;\">\n                            <ejs-numerictextbox id=\"height\" format=\"###.##\" value=\"150\" min=\"100\" max=\"200\" step=\"2\"\n                                (change)='onheightChange($event)'></ejs-numerictextbox>\n\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\" style=\"margin-top: 20px;\">\n                    <div class=\"col-xs-6\" style=\"padding-left: 0px;\">\n                        <div class=\"col-xs-1\" style=\"padding-left: 0px;\">\n                            <ejs-checkbox #barcode id=\" textVisibility \" [checked]=\"true\"\n                                (change)=\"textVisibilityChange($event) \"></ejs-checkbox>\n                        </div>\n                        <div class=\"col-xs-10\">Text Visibility</div>\n                    </div>\n                    <div class=\"col-xs-4\" style=\"padding-left: 0;margin-left: 13px;\">\n                        <div class=\"col-xs-1\" style=\"padding-left: 0px;\">\n                            <ejs-checkbox #barcode id=\" svgMode \" [checked]=\"true\" (change)=\"svgModeChange($event) \">\n                            </ejs-checkbox>\n\n                        </div>\n                        <div class=\"col-xs-10\" style=\"width: 100px;\">SVG Mode</div>\n\n\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div style=\"margin-top: 15px\">\n                        <div class=\"col-xs-2\" style=\"margin-top: 5px;padding-left: 0px;\">BG Color</div>\n                        <div class=\"col-xs-4\" style=\"padding-left: 0px;\">\n                            <input ejs-colorpicker id='bgColor' type='color' value='#ffffff'\n                                (change)=\"bgColorChange($event) \">\n                        </div>\n                        <div class=\"col-xs-2\" style=\"width: 18%;\n                            padding-left: 12px;\n                            margin-top: 5px;\">Fore Color</div>\n                        <div class=\"col-xs-3\" style=\"padding-left: 2px;\">\n                            <input ejs-colorpicker id='foreColor' type='color' value='#000000'\n                                (change)=\"foreColorChange($event) \">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"property-panel-header\">\n                    Margin\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-2 top\" style=\"padding-left: 0px;\"> Left</div>\n                    <div class=\"col-xs-3\" style=\"width: 33%;padding-left: 0px;\">\n                        <ejs-numerictextbox id=\"marginLeft\" format=\"###.##\" value=\"10\" min=\"-10\" max=\"30\" step=\"1\"\n                            (change)='marginLeftChange($event)'></ejs-numerictextbox>\n                    </div>\n                    <div class=\"col-xs-2 top\">Right</div>\n                    <div class=\"col-xs-3\" style=\"width: 33%;padding-left: 0px;\">\n                        <ejs-numerictextbox id=\"MarginRight\" format=\"###.##\" value=\"10\" min=\"-10\" max=\"30\" step=\"1\"\n                            (change)='MarginRighthChange($event)'></ejs-numerictextbox>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-2 top\" style=\"padding-left: 0px;\">Top</div>\n                    <div class=\"col-xs-3\" style=\"width: 33%;padding-left: 0px;\">\n                        <div style=\"padding-bottom: 8px\">\n                            <ejs-numerictextbox id=\"marginTop\" format=\"###.##\" value=\"10\" min=\"-10\" max=\"30\" step=\"1\"\n                                (change)='marginTopChange($event)'></ejs-numerictextbox>\n                        </div>\n                    </div>\n                    <div class=\"col-xs-2 top\">Bottom</div>\n                    <div class=\"col-xs-3\" style=\"width: 33%;padding-left: 0px;\">\n                        <ejs-numerictextbox id=\"MarginBottom\" format=\"###.##\" value=\"10\" min=\"-10\" max=\"30\" step=\"1\"\n                            (change)='MarginBottomtChange($event)'></ejs-numerictextbox>\n                    </div>\n                </div>\n                <div class=\"property-panel-header\">\n                    Text Properties\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-2 top\" style=\"padding-left: 0px;\">Top</div>\n                    <div class=\"col-xs-3\" style=\"width: 33%;padding-left: 0px;\">\n                        <ejs-numerictextbox id=\"TextmarginTop\" format=\"###.##\" value=\"0\" min=\"-10\" max=\"20\" step=\"1\"\n                            (change)='TextmarginTophChange($event)'></ejs-numerictextbox>\n                    </div>\n                    <div class=\"col-xs-2 top\">Bottom</div>\n                    <div class=\"col-xs-3\" style=\"width: 33%;padding-left: 0px;\">\n                        <ejs-numerictextbox id=\"TextMarginBottom\" format=\"###.##\" value=\"0\" min=\"-10\" max=\"20\" step=\"1\"\n                            (change)='TextMarginBottomhChange($event)'></ejs-numerictextbox>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-2 top\" style=\"padding-left: 0px;\">\n                        Position\n                    </div>\n                    <div class=\"col-xs-10\" style=\"padding-left:0px\">\n                        <ejs-dropdownlist #textPosition id=\"textPosition\" [dataSource]=\"textPositionValue\"\n                             value=\"Bottom\" (change)=\"textPositionOnChange($event)\"></ejs-dropdownlist>\n\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-2 top\" style=\"padding-left: 0px;\">\n                        Alignment\n                    </div>\n                    <div class=\"col-xs-10\" style=\"padding-left:0px\">\n                        <ejs-dropdownlist #textAlignment id=\"textAlignment\" [dataSource]=\"textAlignmentValues\"\n                             value=\"Center\" (change)=\"textAlignmentOnChange($event)\">\n                        </ejs-dropdownlist>\n                    </div>\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"col-xs-3 top\" style=\"width: 17%;padding-left: 0px;\">\n                        Display Text\n                    </div>\n                    <div class=\"col-xs-10\" style=\"width: 81%;padding-left:0px;padding-right: 0;\">\n                        <ejs-textbox #displayText id=\"displayText\" value='SYNCFUSION'\n                            (change)=\"displayTextOnChange($event)\"></ejs-textbox>\n                    </div>\n                </div>\n            </div>\n        </div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}"}