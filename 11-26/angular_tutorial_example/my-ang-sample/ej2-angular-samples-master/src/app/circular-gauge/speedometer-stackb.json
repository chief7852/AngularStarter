{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * IE11 requires the following for NgClass support on SVG elements\n */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","annotation.service.ts":"/**\n * Annotation source\n */\n\nimport { CircularGauge, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nimport { Annotations } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n\nexport class AnnotationDataSerive {\n    GetSubGauge1(): any {\n        let gauge1: CircularGauge = new CircularGauge({\n            load: (args: ILoadedEventArgs) => {\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i,  'Contrast');\n            },\n            background: 'transparent',\n             axes: [{\n                ranges: [{ start: 0, end: 3, startWidth: 4, endWidth: 4, color: 'rgb(128,128,128)' },\n                { start: 3, end: 12, startWidth: 4, endWidth: 4, color: 'rgb(192,192,192)' }],\n                annotations: [{ angle: 270, radius: '40%', content: null },\n                { angle: 180, radius: '40%', content: null },\n                { angle: 90, radius: '40%', content: null },\n                { angle: 360, radius: '35%', zIndex: '1', content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>' }],\n                labelStyle: { hiddenLabel: 'First', font: {  size: '0px' }, autoAngle: false },\n                majorTicks: { width: 1, height: 5, interval: 1 },\n                minorTicks: { height: 3, width: 0.5, interval: 0.2 }, minimum: 0, maximum: 12,\n                pointers: [{\n                    radius: '70%', pointerWidth: 2,\n                    cap: {\n                         radius: 2, border: { width: 0.2,  }\n                    }, needleTail: {  length: '10%' }, animation: { enable: false, duration: 500 }\n                }], startAngle: 0, endAngle: 0, lineStyle: { width: 0 }\n            }]\n        });\n        let gauge2: CircularGauge = new CircularGauge({\n            load: (args: ILoadedEventArgs) => {\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i,  'Contrast');\n            },\n            background: 'transparent',\n            axes: [\n                {\n                    startAngle: 0, endAngle: 0,\n                    lineStyle: { width: 0 },\n                    ranges: [\n                        {\n                            start: 0, end: 3,\n                            startWidth: 4, endWidth: 4,\n                            color: 'rgb(128,128,128)'\n                        }, {\n                            start: 3, end: 12,\n                            startWidth: 4, endWidth: 4,\n                            color: 'rgb(192,192,192)'\n                        }\n                    ],\n                    annotations: [{\n                        angle: 270,\n                        radius: '40%',\n                        content: null\n                    }, {\n                        angle: 180,\n                        radius: '40%',\n                        content: null\n                    }, {\n                        angle: 90,\n                        radius: '50%',\n                        content: null\n                    }, {\n                        angle: 360,\n                        radius: '35%',zIndex: '1',\n                        content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'\n                    }],\n                    labelStyle: {\n                        hiddenLabel: 'First',\n                        font: {\n                            color: '#8c8c8c',\n                            size: '0px'\n                        },\n                        autoAngle: false\n                    }, majorTicks: {\n                        width: 1,\n                        height: 5,\n                        interval: 1\n                    }, minorTicks: {\n                        height: 3,\n                        width: 0.5,\n                        interval: 0.2\n                    },\n                    minimum: 0,\n                    maximum: 12,\n                    pointers: [{\n                        radius: '70%',\n                        pointerWidth: 2,\n                        cap: {\n                            radius: 2,\n                            border: {\n                                width: 0.2,\n                            }\n                        },\n                        needleTail: {\n                            length: '10%'\n                        }, animation: {\n                            enable: false,\n                            duration: 500\n                        }\n                    }]\n                }\n            ]\n        });\n        return { 'gauge1': gauge1, 'gauge2': gauge2 };\n    }\n}","app.component.ts":"/**\n * Speedometer \n */\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { CircularGaugeComponent, ILoadedEventArgs, GaugeTheme, IAxisLabelRenderEventArgs, CircularGauge } from '@syncfusion/ej2-angular-circulargauge';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nimport { EmitType, isNullOrUndefined } from '@syncfusion/ej2-base';\n// custom code start\n//tslint:disable\n// custom code end\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n\n    @ViewChild('circulargauge')\n    public circulargauge: CircularGaugeComponent;\n    public title: string = 'Speedometer';\n    public titleStyle: Object = { size: '18px' };\n        \n    public axisLabelRender(args:IAxisLabelRenderEventArgs):void {           \n                if (document.getElementsByClassName(\"e-checkbox-wrapper\")[0].getAttribute(\"aria-checked\") === \"true\") {\n                    args.axis.majorTicks.interval = 10\n                        var text;\n                        switch (parseInt(args.text)) {\n                            case 10:\n                                text = 'Ideal';\n                                break;\n                            case 30:\n                                text = 'Safe';\n                                break;\n                            case 50:\n                                text = 'Good';\n                                break;\n                            case 70:\n                                text = 'Ok';\n                                break;\n                            case 90:\n                                text = 'Risk';\n                                break;\n                            case 110:\n                                text = 'Danger';\n                                break;\n                            default:\n                                text = '';\n                                break;\n                        }\n                        args.text = text;\n                    \n                        args.axis.pointers[0].animation.enable = false;\n                } else {\n                    args.axis.majorTicks.interval = 20;\n                    args.axis.minimum = 0;\n                    args.axis.maximum = 120;\n                    args.axis.pointers[0].animation.enable = false;\n                }\n    }\n    public lineStyle: Object = {\n        width: 0\n    };\n    //Initializing LabelStyle\n    public labelStyle: Object = {\n        useRangeColor: false, position: 'Outside', autoAngle: true,\n        font: { size: '13px', fontFamily: 'Roboto' }\n    };\n    // custom code start\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i,  'Contrast');\n    }\n    // custom code end\n    public majorTicks: Object = {\n        width: 0\n    };\n    public minorTicks: Object = {\n        width: 0\n    };\n    public pointers: Object[] =[{\n        animation: { enable: true, duration: 900 },\n        value: 40,\n        radius: '80%',\n        color: '#757575',\n        pointerWidth: 7,\n        cap: {\n            radius: 8,\n            color: '#757575',\n            border: { width: 0 }\n        },\n        needleTail: {\n            color: '#757575',\n            length: '15%'\n        },\n    }];\n    public annotaions: Object = [{\n        content: \"<div id='templateWrap'>\"\n        + \"<div style='width:90px;text-align:center;float: right;color: #424242;font-size: 20px;font-family:Roboto'>${pointers[0].value} km/h</div></div></div>\",\n        angle: 0, zIndex: '1',\n        radius: '30%'\n    }\n];\npublic ranges: Object[] = [\n    {\n        start: 0,\n        end: 20,\n        startWidth: 5, endWidth: 10,\n        radius: '102%',\n        color: '#82b944',\n    },\n    {\n        start: 20,\n        end: 40,\n        startWidth: 10, endWidth: 15,\n        radius: '102%',\n        color: '#a1cb43',\n    }, {\n        start: 40,\n        end: 60,\n        startWidth: 15, endWidth: 20,\n        radius: '102%',\n        color: '#ddec12',\n    },\n    {\n        start: 60,\n        end: 80,\n        startWidth: 20, endWidth: 25,\n        radius: '102%',\n        color: '#ffbc00',\n    },\n    {\n        start: 80,\n        end: 100,\n        startWidth: 25, endWidth: 30,\n        radius: '102%',\n        color: '#ff6000',\n    },\n    {\n        start: 100,\n        end: 120,\n        startWidth: 30, endWidth: 35,\n        radius: '102%',\n        color: 'red',\n    }\n]\nngAfterViewInit(): void {\nlet gauge5Interval1: any = setInterval(\n    (): void => {\n        let newVal: number = this.circulargauge.axes[0].pointers[0].value + (Math.floor(Math.random() * (10 - (-10))) - 10);\n        if (newVal <= 0) {\n            newVal = 5;\n        }\n        if (document.getElementById('container')) {\n            this.circulargauge.axes[0].pointers[0].animation.enable = true;\n            this.circulargauge.setPointerValue(0, 0, newVal);\n            if (!isNullOrUndefined(document.getElementById('pointerannotation'))) {\n                document.getElementById('pointerannotation').innerHTML = newVal.toString() + ' km/h';\n            }\n        } else {\n            clearInterval(gauge5Interval1);\n        }\n    },\n    1000\n);\n\nlet combineRange: EmitType<CheckBoxChangeEvents>;\nlet rangeSet: CheckBox = new CheckBox(\n    {\n        change: combineRange, checked: false\n    },\n    '#combineRange');\nlet showText: EmitType<CheckBoxChangeEvents>;\nlet interval: CheckBox = new CheckBox(\n        {\n            change: showText, checked: false\n        },\n        '#showText');\nlet range: EmitType<CheckBoxChangeEvents>;\nlet showCheckBox: CheckBox = new CheckBox(\n{\n    change: range, checked: false\n},\n'#range');\nlet axisLabel:EmitType<IAxisLabelRenderEventArgs>;\nrangeSet.change = combineRange = (e: CheckBoxChangeEvents) => {\n    let element: HTMLInputElement = document.getElementById('range') as HTMLInputElement;\n    if (e.checked === true) {\n        showCheckBox.disabled = true;\n        this.circulargauge.axes[0].ranges[0].start = 0;\n        this.circulargauge.axes[0].ranges[0].end = 120;\n        this.circulargauge.axes[0].ranges[0].startWidth = 5;\n        this.circulargauge.axes[0].ranges[0].endWidth = 35;\n        this.circulargauge.axes[0].ranges[0].color = 'url(#grad1)';\n        this.circulargauge.axes[0].ranges[1].start = null;\n        this.circulargauge.axes[0].ranges[1].end = null;\n        this.circulargauge.axes[0].ranges[1].startWidth = '';\n        this.circulargauge.axes[0].ranges[1].endWidth = '';\n        this.circulargauge.axes[0].ranges[1].color = '';\n        this.circulargauge.axes[0].ranges[2].start = null;\n        this.circulargauge.axes[0].ranges[2].end = null;\n        this.circulargauge.axes[0].ranges[2].startWidth = '';\n        this.circulargauge.axes[0].ranges[2].endWidth = '';\n        this.circulargauge.axes[0].ranges[2].color = '';\n        this.circulargauge.axes[0].ranges[3].start = null;\n        this.circulargauge.axes[0].ranges[3].end = null;\n        this.circulargauge.axes[0].ranges[3].startWidth = '';\n        this.circulargauge.axes[0].ranges[3].endWidth = '';\n        this.circulargauge.axes[0].ranges[3].color = '';\n        this.circulargauge.axes[0].ranges[4].start = null;\n        this.circulargauge.axes[0].ranges[4].end = null;\n        this.circulargauge.axes[0].ranges[4].startWidth = '';\n        this.circulargauge.axes[0].ranges[4].endWidth = '';\n        this.circulargauge.axes[0].ranges[4].color = '';\n        this.circulargauge.axes[0].ranges[5].start = null;\n        this.circulargauge.axes[0].ranges[5].end = null;\n        this.circulargauge.axes[0].ranges[5].startWidth = '';\n        this.circulargauge.axes[0].ranges[5].endWidth = '';\n        this.circulargauge.axes[0].ranges[5].color = '';\n        this.circulargauge.axes[0].pointers[0].animation.enable = false;\n        this.circulargauge.refresh();\n    } else {\n        showCheckBox.disabled = false;\n        this.circulargauge.axes[0].ranges[0].start = 0;\n        this.circulargauge.axes[0].ranges[0].end = 20;\n        this.circulargauge.axes[0].ranges[0].startWidth = 5;\n        this.circulargauge.axes[0].ranges[0].endWidth = 10;\n        this.circulargauge.axes[0].ranges[0].color = '#82b944';\n        this.circulargauge.axes[0].ranges[1].start = 20;\n        this.circulargauge.axes[0].ranges[1].end = 40;\n        this.circulargauge.axes[0].ranges[1].startWidth = 10;\n        this.circulargauge.axes[0].ranges[1].endWidth = 15;\n        this.circulargauge.axes[0].ranges[1].color = '#a1cb43';\n        this.circulargauge.axes[0].ranges[2].start = 40;\n        this.circulargauge.axes[0].ranges[2].end = 60;\n        this.circulargauge.axes[0].ranges[2].startWidth = 15;\n        this.circulargauge.axes[0].ranges[2].endWidth = 20;\n        this.circulargauge.axes[0].ranges[2].color = '#ddec12';\n        this.circulargauge.axes[0].ranges[3].start = 60;\n        this.circulargauge.axes[0].ranges[3].end = 80;\n        this.circulargauge.axes[0].ranges[3].startWidth = 20;\n        this.circulargauge.axes[0].ranges[3].endWidth = 25;\n        this.circulargauge.axes[0].ranges[3].color = '#ffbc00';\n        this.circulargauge.axes[0].ranges[4].start = 80;\n        this.circulargauge.axes[0].ranges[4].end = 100;\n        this.circulargauge.axes[0].ranges[4].startWidth = 25;\n        this.circulargauge.axes[0].ranges[4].endWidth = 30;\n        this.circulargauge.axes[0].ranges[4].color = '#ff6000';\n        this.circulargauge.axes[0].ranges[5].start = 100;\n        this.circulargauge.axes[0].ranges[5].end = 120;\n        this.circulargauge.axes[0].ranges[5].startWidth = 30;\n        this.circulargauge.axes[0].ranges[5].endWidth = 35;\n        this.circulargauge.axes[0].ranges[5].color = 'red';\n        this.circulargauge.axes[0].pointers[0].animation.enable = false;\n        this.circulargauge.refresh();\n    }\n};\ninterval.change = showText = (e: CheckBoxChangeEvents) => {\n    this.circulargauge.axes[0].pointers[0].animation.enable = false;\n    this.circulargauge.refresh();\n}\nshowCheckBox.change = range = (e: CheckBoxChangeEvents) => {\n    if (e.checked) {\n        this.circulargauge.axes[0].rangeGap = 5;\n    } else {\n        this.circulargauge.axes[0].rangeGap = null;\n    }\n    this.circulargauge.axes[0].pointers[0].animation.enable = false;\n    this.circulargauge.refresh();\n};\n}\n\n    constructor() {\n        //\n    };\n}","app/app.module.ts":"import { ButtonModule, CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { GridModule } from '@syncfusion/ej2-angular-grids';\n\nimport { CircularGaugeAllModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ CircularGaugeAllModule, GridModule, ButtonModule, CheckBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-md-8 control-section\">\n    <ejs-circulargauge (load)='load($event)' (axisLabelRender)='axisLabelRender($event)' style='display:block;' id='container'\n        centerY='75%' #circulargauge=''>\n        <e-axes>\n            <e-axis minimum=0 radius='120%' maximum=120 startAngle=270 endAngle=90 [majorTicks]='majorTicks'\n                [labelStyle]='labelStyle' [lineStyle]='lineStyle' [minorTicks]='minorTicks' [annotations]='annotaions'\n                [ranges]='ranges' [pointers]='pointers'>\n            </e-axis>\n        </e-axes>\n    </ejs-circulargauge>\n</div>\n<div class=\"col-md-4 property-section\">\n    <div class=\"property-panel-section\">\n        <div class=\"property-panel-header\">Properties</div>\n        <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tbody>\n                <tr>\n                    <td style=\"width: 50%\">\n                        <div class=\"property-text\"> Show text labels</div>\n                    </td>\n                    <td style=\"width: 50%;\">\n                        <div style=\"margin-left: 30px\">\n                            <input type=\"checkbox\" id=\"showText\" checked />\n                        </div>\n                    </td>\n                </tr>\n                <br />\n                <tr>\n                    <td style=\"width: 50%\">\n                        <div class=\"property-text\"> Combine ranges</div>\n                    </td>\n                    <td style=\"width: 50%;\">\n                        <div style=\"margin-left: 30px\">\n                            <input type=\"checkbox\" id=\"combineRange\" checked />\n                        </div>\n                    </td>\n                </tr>\n                <br />\n                <tr>\n                    <td style=\"width: 50%\">\n                        <div class=\"property-text\"> Gap between ranges</div>\n                    </td>\n                    <td style=\"width: 50%;\">\n                        <div style=\"margin-left: 30px\">\n                            <input type=\"checkbox\" id=\"range\" checked />\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n<script id='pointerValue' type=\"text/x-template\">\n        <div id='templateWrap'>\n            <div class='des'>\n                <div id='pointerannotation' style=\"width:90px;text-align:center;font-size:20px;font-family:Roboto\">${pointers[0].value} km/h</div>\n            </div>\n        </div>\n    </script>\n<svg style=\"height:0px;width:0px\">\n    <defs>\n        <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n            <stop offset=\"0%\" style=\"stop-color:#82b944;stop-opacity:1\" />\n            <stop offset=\"50%\" style=\"stop-color:rgb(255,255,0);stop-opacity:1\" />\n            <stop offset=\"100%\" style=\"stop-color:red;stop-opacity:1\" />\n        </linearGradient>\n    </defs>\n</svg>","app.component.css":"","customization.service.ts":"/**\n * Dynamic source\n */\n\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { Annotations, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n\nexport class DynamicDataSerive {\n    GetSubGauge1(): any {\n        let gauge1: CircularGauge = new CircularGauge({\n            load: (args: ILoadedEventArgs) => {\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i,  'Contrast');\n            },\n            axes: [{\n                annotations: [{\n                    content: '<div style=\"color:#666666;font-size:35px;\">50.5GB</div>',\n                    angle: 180, radius: '0%', zIndex:'1'\n                }, {\n                    content: '<div style=\"color:#757575;font-size:15px;\">Used</div>',\n                    angle: 180, radius: '25%', zIndex:'1',\n                    textStyle: {\n                        fontFamily: 'Roboto',\n                        color: '#9E9E9E',\n                        fontStyle: 'Bold',\n                        fontWeight: 'Regular',\n                        size: '14px'\n                    }\n                }],\n                lineStyle: { width: 0 },\n                startAngle: 180, endAngle: 180,\n                radius: '80%',\n                labelStyle: { font: { size: '0px' } },\n                majorTicks: { width: 0 },\n                minorTicks: { height: 0 },\n                minimum: 0, maximum: 100,\n                ranges: [{\n                    start: 0, end: 100,\n                    radius: '80%', startWidth: 30,\n                    endWidth: 30, color: '#E0E0E0'\n                }],\n                pointers: [{\n                    type: 'RangeBar',\n                    value: 50.5, radius: '80%',\n                    color: '#FF2680', animation: { duration: 0 },\n                    pointerWidth: 30\n                }]\n            }]\n        });\n        let gauge2: CircularGauge = new CircularGauge({\n            load: (args: ILoadedEventArgs) => {\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n                selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i,  'Contrast');\n            },\n            centerY: '70%',\n            axes: [{\n                annotations: [{\n                    content: '<div style=\"color:#666666;font-size:35px;\">1800</div>',\n                    angle: 0,\n                    radius: '110%', zIndex:'1'\n                }],\n                lineStyle: { width: 0 },\n                startAngle: 300, endAngle: 60,\n                radius: '80%',\n                labelStyle: { font: { size: '0px' } },\n                majorTicks: { width: 0 },\n                minorTicks: { height: 0 },\n                minimum: 999, maximum: 2000,\n                ranges: [{\n                    start: 1000, end: 2000,\n                    radius: '90%',\n                    startWidth: 30, endWidth: 30,\n                    color: '#E0E0E0'\n                }],\n                pointers: [{\n                    type: 'RangeBar',\n                    value: 1800, radius: '90%',\n                    color: '#FFDD00', animation: { duration: 0 },\n                    pointerWidth: 30\n                }, {\n                    radius: '90%', value: 1800,\n                    color: '#424242',\n                    animation: { duration: 0 },\n                    pointerWidth: 9,\n                    cap: { radius: 10, color: '#424242', border: { width: 0 } }\n                }]\n            }]\n        });\n        return { 'gauge1': gauge1, 'gauge2': gauge2 };\n    }\n}"}