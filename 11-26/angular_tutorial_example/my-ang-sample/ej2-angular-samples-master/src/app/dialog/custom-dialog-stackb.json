{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { DialogComponent, ButtonPropsModel } from '@syncfusion/ej2-angular-popups';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { ButtonModel } from '@syncfusion/ej2-buttons';\nimport { ButtonComponent } from '@syncfusion/ej2-angular-buttons';\n/**\n * Default Dialog Component\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n\n    // Define Dialog properties\n    @ViewChild('alertDialog')\n    public alertDialog: DialogComponent;\n\n    @ViewChild('confirmDialog')\n    public confirmDialog: DialogComponent;\n\n    @ViewChild('promptDialog')\n    public promptDialog: DialogComponent;\n\n    @ViewChild('password')\n    public password: ElementRef;\n\n    @ViewChild('alertButton')\n    public alertbtn: ButtonComponent;\n\n    public alertHeader: string = 'Low Battery';\n    public confirmHeader: string = 'Delete Multiple Items';\n    public promptHeader: string = 'Join Wi-Fi network';\n    public alertContent: string = '10% of battery remaining';\n    public showCloseIcon: Boolean = false;\n    public visible: Boolean = true;\n    public hidden: Boolean = false;\n    public confirmCloseIcon: Boolean = true;\n    public target: string = '.control-section';\n    public alertWidth: string = '250px';\n    public confirmWidth: string = '400px';\n    public promptWidth: string = '330px';\n    public animationSettings: Object = { effect: 'None' };\n    public hide: any;\n\n    ngAfterViewInit(): void {\n        this.alertbtn.element.focus();\n    }\n    public alertDlgBtnClick = (): void => {\n        this.alertDialog.hide();\n    }\n    public confirmDlgBtnClick = (): void => {\n        this.confirmDialog.hide();\n    }\n    public promptDlgBtnClick = (): void => {\n        this.promptDialog.hide();\n    }\n    public onFocus = (): void => {\n        this.password.nativeElement.parentElement.classList.add('e-input-focus');\n    }\n    public onBlur = (): void => {\n        this.password.nativeElement.parentElement.classList.remove('e-input-focus');\n    }\n\n    // Render the Buttons to open corresponding Dialogs\n    public alertDlgButtons: ButtonPropsModel[] = [{ click: this.alertDlgBtnClick.bind(this), buttonModel: { content: 'Dismiss', isPrimary: true } }];\n    public confirmDlgButtons: ButtonPropsModel[] = [{ click: this.confirmDlgBtnClick.bind(this), buttonModel: { content: 'Yes', isPrimary: true } }, { click: this.confirmDlgBtnClick.bind(this), buttonModel: { content: 'No' } }];\n    public promptDlgButtons: ButtonPropsModel[] = [{ click: this.promptDlgBtnClick.bind(this), buttonModel: { content: 'Connect', isPrimary: true } }, { click: this.promptDlgBtnClick.bind(this), buttonModel: { content: 'Cancel' } }];\n\n    // While clicking alert button, open the alert Dialog\n    public alertBtnClick = (): void => {\n        this.alertDialog.show();\n        this.dialogOpen();\n    }\n\n    // While clicking confirm button, open the confirm Dialog\n    public confirmBtnClick = (): void => {\n        this.confirmDialog.show();\n        this.dialogOpen();\n    }\n\n    // While clicking prompt button, open the prompt Dialog\n    public promptBtnClick = (): void => {\n        this.promptDialog.show();\n        this.dialogOpen();\n    }\n\n    // On Dialog close, show the buttons\n    public dialogClose = (): void => {\n        (document.querySelectorAll('.dlgbtn')[0] as HTMLElement).classList.remove('e-btn-hide');\n        (document.querySelectorAll('.dlgbtn')[1] as HTMLElement).classList.remove('e-btn-hide');\n        (document.querySelectorAll('.dlgbtn')[2] as HTMLElement).classList.remove('e-btn-hide');\n    }\n    // On Dialog open, hide the buttons\n    public dialogOpen = (): void => {\n        (document.querySelectorAll('.dlgbtn')[0] as HTMLElement).classList.add('e-btn-hide');\n        (document.querySelectorAll('.dlgbtn')[1] as HTMLElement).classList.add('e-btn-hide');\n        (document.querySelectorAll('.dlgbtn')[2] as HTMLElement).classList.add('e-btn-hide');\n    }\n}\n","app/app.module.ts":"import { ScheduleAllModule, RecurrenceEditorAllModule } from '@syncfusion/ej2-angular-schedule';\n\nimport { ChartAllModule, AccumulationChartAllModule, RangeNavigatorAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { TabAllModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { DatePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { CheckBoxModule , ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ RadioButtonModule, CheckBoxModule, BrowserModule, ButtonModule, DialogModule, RadioButtonModule, ChartAllModule, RangeNavigatorAllModule, AccumulationChartAllModule, GridAllModule, RichTextEditorAllModule, ScheduleAllModule, RecurrenceEditorAllModule, CheckBoxModule, FormsModule, ReactiveFormsModule, CommonModule, BrowserModule, TabAllModule, DatePickerModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\" style=\"padding:10px;position:relative;\">\n    <!-- Buttons to open corresponding Dialogs -->\n    <button ejs-button class='dlgbtn' id='alertbtn' #alertButton (click)=\"alertBtnClick()\">Alert</button>\n\n    <button ejs-button class='dlgbtn' #confirmButton (click)=\"confirmBtnClick()\">Confirm</button>\n\n    <button ejs-button class='dlgbtn' #promptButton (click)=\"promptBtnClick()\">Prompt</button>\n\n    <!-- Render the alert Dialog -->\n    <ejs-dialog #alertDialog [buttons]='alertDlgButtons' [visible]='hidden' [header]='alertHeader' [animationSettings]='animationSettings' [content]='alertContent' [showCloseIcon]='showCloseIcon' (open)=\"dialogOpen()\" (close)=\"dialogClose()\" [target]='target'\n        [width]='alertWidth'>\n    </ejs-dialog>\n\n    <!-- Render the confirmation Dialog -->\n    <ejs-dialog #confirmDialog [buttons]='confirmDlgButtons' [visible]='hidden' [header]='confirmHeader' [animationSettings]='animationSettings' [showCloseIcon]='confirmCloseIcon' (open)=\"dialogOpen()\" (close)=\"dialogClose()\" [target]='target'\n        [width]='confirmWidth'>\n        <ng-template #content>\n            <span>Are you sure you want to permanently delete these items ?</span>\n        </ng-template>\n    </ejs-dialog>\n\n    <!-- Render the prompt Dialog -->\n    <ejs-dialog #promptDialog [buttons]='promptDlgButtons' [visible]='hidden' [header]='promptHeader' [animationSettings]='animationSettings' [showCloseIcon]='showCloseIcon' [target]='target' (open)=\"dialogOpen()\" (close)=\"dialogClose()\" [width]='promptWidth'>\n        <!-- Prompt Dialog content  -->\n        <ng-template #content>\n            <table style=\"border-collapse: separate;border-spacing: 10px;width:85%;margin: 0px -5px 0px;\">\n                <tr>\n                    <td>SSID:</td>\n                </tr>\n                <tr>\n                    <td><b>AndroidAP</b></td>\n                </tr>\n                <tr>\n                    <td>Password:</td>\n                </tr>\n                <tr>\n                    <td><span class=\"e-input-group\">\n                    <input type=\"password\" #password id=\"password\" (focus)='onFocus()' (blur)='onBlur()' name=\"Required\" class=\"e-input\" />\n                    </span></td>\n                </tr>\n            </table>\n        </ng-template>\n    </ejs-dialog>\n\n</div>","app.component.css":".e-btn-hide {\n    display: none;\n}\n\n/* <!-- custom code start --> */\n.dlgbtn {\n    margin-right: 5%;\n}\n.control-section {\n    height: 100%;\n    min-height: 350px;\n    }\n/* <!-- custom code end --> */"}