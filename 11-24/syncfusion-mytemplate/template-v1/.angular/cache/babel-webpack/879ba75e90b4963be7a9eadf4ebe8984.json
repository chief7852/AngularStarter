{"ast":null,"code":"import { setTemplateEngine, getTemplateEngine } from '@syncfusion/ej2-base';\nimport { setValue, getValue } from '@syncfusion/ej2-base';\nvar stringCompiler = getTemplateEngine();\n/**\n * Angular Template Compiler\n */\n\nexport function compile(templateEle, helper) {\n  if (typeof templateEle === 'string') {\n    return stringCompiler(templateEle, helper);\n  } else {\n    var contRef_1 = templateEle.elementRef.nativeElement._viewContainerRef;\n    var pName_1 = templateEle.elementRef.nativeElement.propName; //tslint:disable-next-line        \n\n    return function (data, component, propName) {\n      var context = {\n        $implicit: data\n      };\n      /* istanbul ignore next */\n\n      var conRef = contRef_1 ? contRef_1 : component.viewContainerRef;\n      var viewRef = conRef.createEmbeddedView(templateEle, context);\n      viewRef.markForCheck();\n      /* istanbul ignore next */\n\n      var viewCollection = component && component.registeredTemplate ? component.registeredTemplate : getValue('currentInstance.registeredTemplate', conRef);\n      propName = propName && component.registeredTemplate ? propName : pName_1;\n\n      if (typeof viewCollection[propName] === 'undefined') {\n        viewCollection[propName] = [];\n      }\n\n      viewCollection[propName].push(viewRef);\n      return viewRef.rootNodes;\n    };\n  }\n}\n/**\n * Property decorator for angular.\n */\n\nexport function Template(defaultValue) {\n  return function (target, key) {\n    var propertyDescriptor = {\n      set: setter(key),\n      get: getter(key, defaultValue),\n      enumerable: true,\n      configurable: true\n    };\n    Object.defineProperty(target, key, propertyDescriptor);\n  };\n}\n\nfunction setter(key) {\n  return function (val) {\n    if (val === undefined) {\n      return;\n    }\n\n    setValue(key + 'Ref', val, this);\n\n    if (typeof val !== 'string') {\n      val.elementRef.nativeElement._viewContainerRef = this.viewContainerRef;\n      val.elementRef.nativeElement.propName = key;\n    } else {\n      if (this.saveChanges) {\n        this.saveChanges(key, val, undefined);\n        this.dataBind();\n      }\n    }\n  };\n}\n\nfunction getter(key, defaultValue) {\n  return function () {\n    /* istanbul ignore next */\n    return getValue(key + 'Ref', this) || defaultValue;\n  };\n} //tslint:disable-next-line\n\n\nsetTemplateEngine({\n  compile: compile\n});","map":{"version":3,"sources":["D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@syncfusion/ej2-angular-base/src/template.js"],"names":["setTemplateEngine","getTemplateEngine","setValue","getValue","stringCompiler","compile","templateEle","helper","contRef_1","elementRef","nativeElement","_viewContainerRef","pName_1","propName","data","component","context","$implicit","conRef","viewContainerRef","viewRef","createEmbeddedView","markForCheck","viewCollection","registeredTemplate","push","rootNodes","Template","defaultValue","target","key","propertyDescriptor","set","setter","get","getter","enumerable","configurable","Object","defineProperty","val","undefined","saveChanges","dataBind"],"mappings":"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","sourcesContent":["import { setTemplateEngine, getTemplateEngine } from '@syncfusion/ej2-base';\nimport { setValue, getValue } from '@syncfusion/ej2-base';\nvar stringCompiler = getTemplateEngine();\n/**\n * Angular Template Compiler\n */\nexport function compile(templateEle, helper) {\n    if (typeof templateEle === 'string') {\n        return stringCompiler(templateEle, helper);\n    }\n    else {\n        var contRef_1 = templateEle.elementRef.nativeElement._viewContainerRef;\n        var pName_1 = templateEle.elementRef.nativeElement.propName;\n        //tslint:disable-next-line        \n        return function (data, component, propName) {\n            var context = { $implicit: data };\n            /* istanbul ignore next */\n            var conRef = contRef_1 ? contRef_1 : component.viewContainerRef;\n            var viewRef = conRef.createEmbeddedView(templateEle, context);\n            viewRef.markForCheck();\n            /* istanbul ignore next */\n            var viewCollection = (component && component.registeredTemplate) ?\n                component.registeredTemplate : getValue('currentInstance.registeredTemplate', conRef);\n            propName = (propName && component.registeredTemplate) ? propName : pName_1;\n            if (typeof viewCollection[propName] === 'undefined') {\n                viewCollection[propName] = [];\n            }\n            viewCollection[propName].push(viewRef);\n            return viewRef.rootNodes;\n        };\n    }\n}\n/**\n * Property decorator for angular.\n */\nexport function Template(defaultValue) {\n    return function (target, key) {\n        var propertyDescriptor = {\n            set: setter(key),\n            get: getter(key, defaultValue),\n            enumerable: true,\n            configurable: true\n        };\n        Object.defineProperty(target, key, propertyDescriptor);\n    };\n}\nfunction setter(key) {\n    return function (val) {\n        if (val === undefined) {\n            return;\n        }\n        setValue(key + 'Ref', val, this);\n        if (typeof val !== 'string') {\n            val.elementRef.nativeElement._viewContainerRef = this.viewContainerRef;\n            val.elementRef.nativeElement.propName = key;\n        }\n        else {\n            if (this.saveChanges) {\n                this.saveChanges(key, val, undefined);\n                this.dataBind();\n            }\n        }\n    };\n}\nfunction getter(key, defaultValue) {\n    return function () {\n        /* istanbul ignore next */\n        return getValue(key + 'Ref', this) || defaultValue;\n    };\n}\n//tslint:disable-next-line\nsetTemplateEngine({ compile: compile });\n"]},"metadata":{},"sourceType":"module"}