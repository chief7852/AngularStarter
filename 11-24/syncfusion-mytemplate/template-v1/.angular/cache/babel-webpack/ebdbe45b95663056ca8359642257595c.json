{"ast":null,"code":"import { getValue, setValue, isNullOrUndefined, isObject } from '@syncfusion/ej2-base';\n/**\n * Angular Form Base Module\n */\n\nvar FormBase =\n/** @class */\nfunction () {\n  function FormBase() {}\n\n  FormBase.prototype.propagateChange = function (_) {\n    return;\n  };\n\n  FormBase.prototype.propagateTouch = function () {\n    return;\n  };\n\n  FormBase.prototype.localChange = function (e) {\n    //tslint:disable-next-line\n    var value = e.checked === undefined ? e.value : e.checked;\n    this.objCheck = isObject(value);\n\n    if (this.isUpdated === true) {\n      this.angularValue = this.oldValue;\n    }\n\n    if (this.objCheck === true) {\n      this.duplicateValue = JSON.stringify(value);\n      this.duplicateAngularValue = JSON.stringify(this.angularValue);\n\n      if (this.duplicateValue !== this.duplicateAngularValue && this.propagateChange !== undefined && value !== undefined) {\n        // Update angular from our control\n        this.propagateChange(value);\n        this.angularValue = value;\n      }\n    } else {\n      if (value !== this.angularValue && this.propagateChange !== undefined && value !== undefined) {\n        // While reset form using reset() method ng-dirty not get updated, so while value is empty just update angularValue only\n        if (value !== '' && value !== null) {\n          // Update angular from our control\n          this.propagateChange(value);\n          this.angularValue = value;\n        } else {\n          //tslint:disable-next-line\n          var optionalValue = value;\n          this.propagateChange(optionalValue);\n          this.angularValue = value;\n        }\n      }\n    }\n  };\n\n  FormBase.prototype.registerOnChange = function (registerFunction) {\n    this.propagateChange = registerFunction;\n  };\n\n  FormBase.prototype.registerOnTouched = function (registerFunction) {\n    this.propagateTouch = registerFunction;\n  };\n\n  FormBase.prototype.twoWaySetter = function (newVal, prop) {\n    var oldVal = this.oldValue || getValue(prop, this.properties);\n    var ele = this.inputElement || this.element;\n\n    if (ele && oldVal === newVal && this.value === newVal && (ele.value === undefined || ele.value === '')) {\n      return;\n    }\n\n    this.saveChanges(prop, newVal, oldVal);\n    setValue(prop, isNullOrUndefined(newVal) ? null : newVal, this.properties);\n    getValue(prop + 'Change', this).emit(newVal);\n  }; // tslint:disable-next-line:no-any\n\n\n  FormBase.prototype.ngAfterViewInit = function (isTempRef) {\n    // tslint:disable-next-line:no-any\n    var tempFormAfterViewThis = isTempRef || this; // Used setTimeout for template binding\n    // Refer Link: https://github.com/angular/angular/issues/6005\n    // Removed setTimeout, Because we have called markForCheck() method in Angular Template Compiler\n    // setTimeout(() => {\n\n    /* istanbul ignore else */\n\n    if (typeof window !== 'undefined') {\n      tempFormAfterViewThis.appendTo(tempFormAfterViewThis.element);\n      var ele = tempFormAfterViewThis.inputElement || tempFormAfterViewThis.element;\n      ele.addEventListener('focus', tempFormAfterViewThis.ngOnFocus.bind(tempFormAfterViewThis));\n      ele.addEventListener('blur', tempFormAfterViewThis.ngOnBlur.bind(tempFormAfterViewThis));\n    }\n\n    this.isFormInit = false; // });\n  };\n\n  FormBase.prototype.setDisabledState = function (disabled) {\n    this.enabled = !disabled;\n    this.disabled = disabled;\n  };\n\n  FormBase.prototype.writeValue = function (value) {\n    var regExp = /ejs-radiobutton/g; //update control value from angular\n\n    if (this.checked === undefined) {\n      this.value = value;\n    } else {\n      // To resolve boolean type formControl value is not working for radio button control.\n\n      /* istanbul ignore next */\n      if (this.ngEle) {\n        if (typeof value === 'boolean') {\n          if (regExp.test(this.ngEle.nativeElement.outerHTML)) {\n            this.checked = value === this.value;\n          } else {\n            this.checked = value;\n          }\n        } else {\n          this.checked = value === this.value;\n        }\n      }\n    }\n\n    this.angularValue = value;\n    this.isUpdated = true; // When binding Html textbox value to syncfusion textbox, change event triggered dynamically.\n    // To prevent change event, trigger change in component side based on `preventChange` value\n\n    this.preventChange = this.isFormInit ? false : true;\n\n    if (value === null) {\n      return;\n    }\n  };\n\n  FormBase.prototype.ngOnFocus = function (e) {\n    /* istanbul ignore else */\n    if (this.skipFromEvent !== true) {\n      this.focus.emit(e);\n    }\n  };\n\n  FormBase.prototype.ngOnBlur = function (e) {\n    this.propagateTouch();\n    /* istanbul ignore else */\n\n    if (this.skipFromEvent !== true) {\n      this.blur.emit(e);\n    }\n  };\n\n  FormBase.isFormBase = true;\n  return FormBase;\n}();\n\nexport { FormBase };","map":{"version":3,"sources":["D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@syncfusion/ej2-angular-base/src/form-base.js"],"names":["getValue","setValue","isNullOrUndefined","isObject","FormBase","prototype","propagateChange","_","propagateTouch","localChange","e","value","checked","undefined","objCheck","isUpdated","angularValue","oldValue","duplicateValue","JSON","stringify","duplicateAngularValue","optionalValue","registerOnChange","registerFunction","registerOnTouched","twoWaySetter","newVal","prop","oldVal","properties","ele","inputElement","element","saveChanges","emit","ngAfterViewInit","isTempRef","tempFormAfterViewThis","window","appendTo","addEventListener","ngOnFocus","bind","ngOnBlur","isFormInit","setDisabledState","disabled","enabled","writeValue","regExp","ngEle","test","nativeElement","outerHTML","preventChange","skipFromEvent","focus","blur","isFormBase"],"mappings":"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","sourcesContent":["import { getValue, setValue, isNullOrUndefined, isObject } from '@syncfusion/ej2-base';\n/**\n * Angular Form Base Module\n */\nvar FormBase = /** @class */ (function () {\n    function FormBase() {\n    }\n    FormBase.prototype.propagateChange = function (_) { return; };\n    FormBase.prototype.propagateTouch = function () { return; };\n    FormBase.prototype.localChange = function (e) {\n        //tslint:disable-next-line\n        var value = (e.checked === undefined ? e.value : e.checked);\n        this.objCheck = isObject(value);\n        if (this.isUpdated === true) {\n            this.angularValue = this.oldValue;\n        }\n        if (this.objCheck === true) {\n            this.duplicateValue = JSON.stringify(value);\n            this.duplicateAngularValue = JSON.stringify(this.angularValue);\n            if (this.duplicateValue !== this.duplicateAngularValue && this.propagateChange !== undefined && value !== undefined) {\n                // Update angular from our control\n                this.propagateChange(value);\n                this.angularValue = value;\n            }\n        }\n        else {\n            if (value !== this.angularValue && this.propagateChange !== undefined && value !== undefined) {\n                // While reset form using reset() method ng-dirty not get updated, so while value is empty just update angularValue only\n                if (value !== '' && value !== null) {\n                    // Update angular from our control\n                    this.propagateChange(value);\n                    this.angularValue = value;\n                }\n                else {\n                    //tslint:disable-next-line\n                    var optionalValue = value;\n                    this.propagateChange(optionalValue);\n                    this.angularValue = value;\n                }\n            }\n        }\n    };\n    FormBase.prototype.registerOnChange = function (registerFunction) {\n        this.propagateChange = registerFunction;\n    };\n    FormBase.prototype.registerOnTouched = function (registerFunction) {\n        this.propagateTouch = registerFunction;\n    };\n    FormBase.prototype.twoWaySetter = function (newVal, prop) {\n        var oldVal = this.oldValue || getValue(prop, this.properties);\n        var ele = this.inputElement || this.element;\n        if (ele && oldVal === newVal && this.value === newVal &&\n            (ele.value === undefined || ele.value === '')) {\n            return;\n        }\n        this.saveChanges(prop, newVal, oldVal);\n        setValue(prop, (isNullOrUndefined(newVal) ? null : newVal), this.properties);\n        getValue(prop + 'Change', this).emit(newVal);\n    };\n    // tslint:disable-next-line:no-any\n    FormBase.prototype.ngAfterViewInit = function (isTempRef) {\n        // tslint:disable-next-line:no-any\n        var tempFormAfterViewThis = isTempRef || this;\n        // Used setTimeout for template binding\n        // Refer Link: https://github.com/angular/angular/issues/6005\n        // Removed setTimeout, Because we have called markForCheck() method in Angular Template Compiler\n        // setTimeout(() => {\n        /* istanbul ignore else */\n        if (typeof window !== 'undefined') {\n            tempFormAfterViewThis.appendTo(tempFormAfterViewThis.element);\n            var ele = tempFormAfterViewThis.inputElement || tempFormAfterViewThis.element;\n            ele.addEventListener('focus', tempFormAfterViewThis.ngOnFocus.bind(tempFormAfterViewThis));\n            ele.addEventListener('blur', tempFormAfterViewThis.ngOnBlur.bind(tempFormAfterViewThis));\n        }\n        this.isFormInit = false;\n        // });\n    };\n    FormBase.prototype.setDisabledState = function (disabled) {\n        this.enabled = !disabled;\n        this.disabled = disabled;\n    };\n    FormBase.prototype.writeValue = function (value) {\n        var regExp = /ejs-radiobutton/g;\n        //update control value from angular\n        if (this.checked === undefined) {\n            this.value = value;\n        }\n        else {\n            // To resolve boolean type formControl value is not working for radio button control.\n            /* istanbul ignore next */\n            if (this.ngEle) {\n                if (typeof value === 'boolean') {\n                    if (regExp.test(this.ngEle.nativeElement.outerHTML)) {\n                        this.checked = value === this.value;\n                    }\n                    else {\n                        this.checked = value;\n                    }\n                }\n                else {\n                    this.checked = value === this.value;\n                }\n            }\n        }\n        this.angularValue = value;\n        this.isUpdated = true;\n        // When binding Html textbox value to syncfusion textbox, change event triggered dynamically.\n        // To prevent change event, trigger change in component side based on `preventChange` value\n        this.preventChange = this.isFormInit ? false : true;\n        if (value === null) {\n            return;\n        }\n    };\n    FormBase.prototype.ngOnFocus = function (e) {\n        /* istanbul ignore else */\n        if (this.skipFromEvent !== true) {\n            this.focus.emit(e);\n        }\n    };\n    FormBase.prototype.ngOnBlur = function (e) {\n        this.propagateTouch();\n        /* istanbul ignore else */\n        if (this.skipFromEvent !== true) {\n            this.blur.emit(e);\n        }\n    };\n    FormBase.isFormBase = true;\n    return FormBase;\n}());\nexport { FormBase };\n"]},"metadata":{},"sourceType":"module"}