{"ast":null,"code":"import _assertThisInitialized from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createForOfIteratorHelper from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _inherits from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\n\nvar Query = /*#__PURE__*/function () {\n  /**\n   * Constructor for Query class.\n   * @param  {string|string[]} from?\n   * @hidden\n   */\n  function Query(from) {\n    _classCallCheck(this, Query);\n\n    /** @hidden */\n    this.subQuery = null;\n    /** @hidden */\n\n    this.isChild = false;\n    /** @hidden */\n\n    this.distincts = [];\n    this.queries = [];\n    this.key = '';\n    this.fKey = '';\n\n    if (typeof from === 'string') {\n      this.fromTable = from;\n    } else if (from && from instanceof Array) {\n      this.lookups = from;\n    }\n\n    this.expands = [];\n    this.sortedColumns = [];\n    this.groupedColumns = [];\n    this.subQuery = null;\n    this.isChild = false;\n    this.params = [];\n    this.lazyLoad = [];\n    return this;\n  }\n  /**\n   * Sets the primary key.\n   * @param  {string} field - Defines the column field.\n   */\n\n\n  _createClass(Query, [{\n    key: \"setKey\",\n    value: function setKey(field) {\n      this.key = field;\n      return this;\n    }\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n\n  }, {\n    key: \"using\",\n    value: function using(dataManager) {\n      this.dataManager = dataManager;\n      return this;\n    }\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(dataManager, done, fail, always) {\n      dataManager = dataManager || this.dataManager;\n\n      if (dataManager) {\n        return dataManager.executeQuery(this, done, fail, always);\n      }\n\n      return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n\n  }, {\n    key: \"executeLocal\",\n    value: function executeLocal(dataManager) {\n      dataManager = dataManager || this.dataManager;\n\n      if (dataManager) {\n        return dataManager.executeLocal(this);\n      }\n\n      return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Creates deep copy of the Query object.\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var cloned = new Query();\n      cloned.queries = this.queries.slice(0);\n      cloned.key = this.key;\n      cloned.isChild = this.isChild;\n      cloned.dataManager = this.dataManager;\n      cloned.fromTable = this.fromTable;\n      cloned.params = this.params.slice(0);\n      cloned.expands = this.expands.slice(0);\n      cloned.sortedColumns = this.sortedColumns.slice(0);\n      cloned.groupedColumns = this.groupedColumns.slice(0);\n      cloned.subQuerySelector = this.subQuerySelector;\n      cloned.subQuery = this.subQuery;\n      cloned.fKey = this.fKey;\n      cloned.isCountRequired = this.isCountRequired;\n      cloned.distincts = this.distincts.slice(0);\n      cloned.lazyLoad = this.lazyLoad.slice(0);\n      return cloned;\n    }\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n\n  }, {\n    key: \"from\",\n    value: function from(tableName) {\n      this.fromTable = tableName;\n      return this;\n    }\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n\n  }, {\n    key: \"addParams\",\n    value: function addParams(key, value) {\n      if (typeof value === 'function') {\n        this.params.push({\n          key: key,\n          fn: value\n        });\n      } else {\n        this.params.push({\n          key: key,\n          value: value\n        });\n      }\n\n      return this;\n    }\n    /**\n     * @hidden\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function distinct(fields) {\n      if (typeof fields === 'string') {\n        this.distincts = [].slice.call([fields], 0);\n      } else {\n        this.distincts = fields.slice(0);\n      }\n\n      return this;\n    }\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n\n  }, {\n    key: \"expand\",\n    value: function expand(tables) {\n      if (typeof tables === 'string') {\n        this.expands = [].slice.call([tables], 0);\n      } else {\n        this.expands = tables.slice(0);\n      }\n\n      return this;\n    }\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n\n  }, {\n    key: \"where\",\n    value: function where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n      operator = operator ? operator.toLowerCase() : null;\n      var predicate = null;\n\n      if (typeof fieldName === 'string') {\n        predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n      } else if (fieldName instanceof Predicate) {\n        predicate = fieldName;\n      }\n\n      this.queries.push({\n        fn: 'onWhere',\n        e: predicate\n      });\n      return this;\n    }\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n\n  }, {\n    key: \"search\",\n    value: function search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n      if (typeof fieldNames === 'string') {\n        fieldNames = [fieldNames];\n      }\n\n      if (!operator || operator === 'none') {\n        operator = 'contains';\n      }\n\n      var comparer = DataUtil.fnOperators[operator];\n      this.queries.push({\n        fn: 'onSearch',\n        e: {\n          fieldNames: fieldNames,\n          operator: operator,\n          searchKey: searchKey,\n          ignoreCase: ignoreCase,\n          ignoreAccent: ignoreAccent,\n          comparer: comparer\n        }\n      });\n      return this;\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n\n  }, {\n    key: \"sortBy\",\n    value: function sortBy(fieldName, comparer, isFromGroup) {\n      return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     * @param  {string} direction - Defines the sort direction .\n     */\n\n  }, {\n    key: \"sortByForeignKey\",\n    value: function sortByForeignKey(fieldName, comparer, isFromGroup, direction) {\n      var order = !isNullOrUndefined(direction) ? direction : 'ascending';\n      var sorts;\n      var temp;\n\n      if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n        fieldName = fieldName.replace(/ desc$/i, '');\n        comparer = 'descending';\n      }\n\n      if (!comparer || typeof comparer === 'string') {\n        order = comparer ? comparer.toLowerCase() : 'ascending';\n        comparer = DataUtil.fnSort(comparer);\n      }\n\n      if (isFromGroup) {\n        sorts = Query.filterQueries(this.queries, 'onSortBy');\n\n        for (var i = 0; i < sorts.length; i++) {\n          temp = sorts[i].e.fieldName;\n\n          if (typeof temp === 'string') {\n            if (temp === fieldName) {\n              return this;\n            }\n          } else if (temp instanceof Array) {\n            for (var j = 0; j < temp.length; j++) {\n              if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                return this;\n              }\n            }\n          }\n        }\n      }\n\n      this.queries.push({\n        fn: 'onSortBy',\n        e: {\n          fieldName: fieldName,\n          comparer: comparer,\n          direction: order\n        }\n      });\n      return this;\n    }\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n\n  }, {\n    key: \"sortByDesc\",\n    value: function sortByDesc(fieldName) {\n      return this.sortBy(fieldName, 'descending');\n    }\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n\n  }, {\n    key: \"group\",\n    value: function group(fieldName, fn, format) {\n      this.sortBy(fieldName, null, true);\n      this.queries.push({\n        fn: 'onGroup',\n        e: {\n          fieldName: fieldName,\n          comparer: fn ? fn : null,\n          format: format ? format : null\n        }\n      });\n      return this;\n    }\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n\n  }, {\n    key: \"page\",\n    value: function page(pageIndex, pageSize) {\n      this.queries.push({\n        fn: 'onPage',\n        e: {\n          pageIndex: pageIndex,\n          pageSize: pageSize\n        }\n      });\n      return this;\n    }\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n\n  }, {\n    key: \"range\",\n    value: function range(start, end) {\n      this.queries.push({\n        fn: 'onRange',\n        e: {\n          start: start,\n          end: end\n        }\n      });\n      return this;\n    }\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n\n  }, {\n    key: \"take\",\n    value: function take(nos) {\n      this.queries.push({\n        fn: 'onTake',\n        e: {\n          nos: nos\n        }\n      });\n      return this;\n    }\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function skip(nos) {\n      this.queries.push({\n        fn: 'onSkip',\n        e: {\n          nos: nos\n        }\n      });\n      return this;\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(fieldNames) {\n      if (typeof fieldNames === 'string') {\n        fieldNames = [].slice.call([fieldNames], 0);\n      }\n\n      this.queries.push({\n        fn: 'onSelect',\n        e: {\n          fieldNames: fieldNames\n        }\n      });\n      return this;\n    }\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n\n  }, {\n    key: \"hierarchy\",\n    value: function hierarchy(query, selectorFn) {\n      this.subQuerySelector = selectorFn;\n      this.subQuery = query;\n      return this;\n    }\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n\n  }, {\n    key: \"foreignKey\",\n    value: function foreignKey(key) {\n      this.fKey = key;\n      return this;\n    }\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n\n  }, {\n    key: \"requiresCount\",\n    value: function requiresCount() {\n      this.isCountRequired = true;\n      return this;\n    } //type - sum, avg, min, max\n\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function aggregate(type, field) {\n      this.queries.push({\n        fn: 'onAggregates',\n        e: {\n          field: field,\n          type: type\n        }\n      });\n      return this;\n    }\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n\n  }], [{\n    key: \"filterQueries\",\n    value: function filterQueries(queries, name) {\n      return queries.filter(function (q) {\n        return q.fn === name;\n      });\n    }\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n\n  }, {\n    key: \"filterQueryLists\",\n    value: function filterQueryLists(queries, singles) {\n      var filtered = queries.filter(function (q) {\n        return singles.indexOf(q.fn) !== -1;\n      });\n      var res = {};\n\n      for (var i = 0; i < filtered.length; i++) {\n        if (!res[filtered[i].fn]) {\n          res[filtered[i].fn] = filtered[i].e;\n        }\n      }\n\n      return res;\n    }\n  }]);\n\n  return Query;\n}();\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\n\n\nvar Predicate = /*#__PURE__*/function () {\n  /**\n   * Constructor for Predicate class.\n   * @param  {string|Predicate} field\n   * @param  {string} operator\n   * @param  {string|number|boolean|Predicate|Predicate[]} value\n   * @param  {boolean=false} ignoreCase\n   * @hidden\n   */\n  function Predicate(field, operator, value) {\n    var ignoreCase = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var ignoreAccent = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, Predicate);\n\n    /** @hidden */\n    this.ignoreAccent = false;\n    /** @hidden */\n\n    this.isComplex = false;\n\n    if (typeof field === 'string') {\n      this.field = field;\n      this.operator = operator.toLowerCase();\n      this.value = value;\n      this.ignoreCase = ignoreCase;\n      this.ignoreAccent = ignoreAccent;\n      this.isComplex = false;\n      this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n    } else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n      this.isComplex = true;\n      this.condition = operator.toLowerCase();\n      this.predicates = [field];\n\n      if (value instanceof Array) {\n        [].push.apply(this.predicates, value);\n      } else {\n        this.predicates.push(value);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Adds n-number of new predicates on existing predicate with “and” condition.\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n\n\n  _createClass(Predicate, [{\n    key: \"and\",\n    value:\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    function and(field, operator, value, ignoreCase, ignoreAccent) {\n      return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n\n  }, {\n    key: \"or\",\n    value:\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    function or(field, operator, value, ignoreCase, ignoreAccent) {\n      return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n\n  }, {\n    key: \"validate\",\n    value:\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    function validate(record) {\n      var predicate = this.predicates ? this.predicates : [];\n      var isAnd;\n      var ret;\n\n      if (!this.isComplex && this.comparer) {\n        return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n      }\n\n      isAnd = this.condition === 'and';\n\n      for (var i = 0; i < predicate.length; i++) {\n        ret = predicate[i].validate(record);\n\n        if (isAnd) {\n          if (!ret) {\n            return false;\n          }\n        } else {\n          if (ret) {\n            return true;\n          }\n        }\n      }\n\n      return isAnd;\n    }\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n\n  }, {\n    key: \"toJson\",\n    value: function toJson() {\n      var predicates;\n      var p;\n\n      if (this.isComplex) {\n        predicates = [];\n        p = this.predicates;\n\n        for (var i = 0; i < p.length; i++) {\n          predicates.push(p[i].toJson());\n        }\n      }\n\n      return {\n        isComplex: this.isComplex,\n        field: this.field,\n        operator: this.operator,\n        value: this.value,\n        ignoreCase: this.ignoreCase,\n        ignoreAccent: this.ignoreAccent,\n        condition: this.condition,\n        predicates: predicates\n      };\n    }\n  }], [{\n    key: \"and\",\n    value: function and() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    }\n  }, {\n    key: \"or\",\n    value: function or() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    }\n  }, {\n    key: \"fromJson\",\n    value: function fromJson(json) {\n      if (json instanceof Array) {\n        var res = [];\n\n        for (var i = 0, len = json.length; i < len; i++) {\n          res.push(this.fromJSONData(json[i]));\n        }\n\n        return res;\n      }\n\n      var pred = json;\n      return this.fromJSONData(pred);\n    }\n  }, {\n    key: \"combinePredicates\",\n    value: function combinePredicates(predicates, operator) {\n      if (predicates.length === 1) {\n        if (!(predicates[0] instanceof Array)) {\n          return predicates[0];\n        }\n\n        predicates = predicates[0];\n      }\n\n      return new Predicate(predicates[0], operator, predicates.slice(1));\n    }\n  }, {\n    key: \"combine\",\n    value: function combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n      if (field instanceof Predicate) {\n        return Predicate[condition](pred, field);\n      }\n\n      if (typeof field === 'string') {\n        return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n      }\n\n      return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    }\n  }, {\n    key: \"fromJSONData\",\n    value: function fromJSONData(json) {\n      var preds = json.predicates || [];\n      var len = preds.length;\n      var predicates = [];\n      var result;\n\n      for (var i = 0; i < len; i++) {\n        predicates.push(this.fromJSONData(preds[i]));\n      }\n\n      if (!json.isComplex) {\n        result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n      } else {\n        result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n      }\n\n      return result;\n    }\n  }]);\n\n  return Predicate;\n}();\n\nvar consts = {\n  GroupGuid: '{271bbba0-1ee7}'\n};\n/**\n * Data manager common utility methods.\n * @hidden\n */\n\nvar DataUtil = /*#__PURE__*/function () {\n  function DataUtil() {\n    _classCallCheck(this, DataUtil);\n  }\n\n  _createClass(DataUtil, null, [{\n    key: \"getValue\",\n    value:\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    function getValue(value, inst) {\n      if (typeof value === 'function') {\n        return value.call(inst || {});\n      }\n\n      return value;\n    }\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function endsWith(input, substr) {\n      return input.slice && input.slice(-substr.length) === substr;\n    }\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function startsWith(input, start) {\n      return input.slice(0, start.length) === start;\n    }\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n\n  }, {\n    key: \"fnSort\",\n    value: function fnSort(order) {\n      order = order ? DataUtil.toLowerCase(order) : 'ascending';\n\n      if (order === 'ascending') {\n        return this.fnAscending;\n      }\n\n      return this.fnDescending;\n    }\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n\n  }, {\n    key: \"fnAscending\",\n    value: function fnAscending(x, y) {\n      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n        return -1;\n      }\n\n      if (y === null || y === undefined) {\n        return -1;\n      }\n\n      if (typeof x === 'string') {\n        return x.localeCompare(y);\n      }\n\n      if (x === null || x === undefined) {\n        return 1;\n      }\n\n      return x - y;\n    }\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n\n  }, {\n    key: \"fnDescending\",\n    value: function fnDescending(x, y) {\n      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n        return -1;\n      }\n\n      if (y === null || y === undefined) {\n        return 1;\n      }\n\n      if (typeof x === 'string') {\n        return x.localeCompare(y) * -1;\n      }\n\n      if (x === null || x === undefined) {\n        return -1;\n      }\n\n      return y - x;\n    }\n  }, {\n    key: \"extractFields\",\n    value: function extractFields(obj, fields) {\n      var newObj = {};\n\n      for (var i = 0; i < fields.length; i++) {\n        newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n      }\n\n      return newObj;\n    }\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(jsonArray, fields) {\n      var newData = [];\n\n      for (var i = 0; i < jsonArray.length; i++) {\n        newData.push(this.extractFields(jsonArray[i], fields));\n      }\n\n      return newData;\n    }\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n\n  }, {\n    key: \"group\",\n    value: function group(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {\n      var _this = this;\n\n      level = level || 1;\n      var jsonData = jsonArray;\n      var guid = 'GroupGuid';\n\n      if (jsonData.GroupGuid === consts[guid]) {\n        var _loop = function _loop(j) {\n          if (!isNullOrUndefined(groupDs)) {\n            var indx = -1;\n            var temp = groupDs.filter(function (e) {\n              return e.key === jsonData[j].key;\n            });\n            indx = groupDs.indexOf(temp[0]);\n            jsonData[j].items = _this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);\n            jsonData[j].count = groupDs[indx].count;\n          } else {\n            jsonData[j].items = _this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);\n            jsonData[j].count = jsonData[j].items.length;\n          }\n        };\n\n        for (var j = 0; j < jsonData.length; j++) {\n          _loop(j);\n        }\n\n        jsonData.childLevels += 1;\n        return jsonData;\n      }\n\n      var grouped = {};\n      var groupedArray = [];\n      groupedArray.GroupGuid = consts[guid];\n      groupedArray.level = level;\n      groupedArray.childLevels = 0;\n      groupedArray.records = jsonData;\n\n      var _loop2 = function _loop2(i) {\n        var val = _this.getVal(jsonData, i, field);\n\n        if (!isNullOrUndefined(format)) {\n          val = format(val, field);\n        }\n\n        if (!grouped[val]) {\n          grouped[val] = {\n            key: val,\n            count: 0,\n            items: [],\n            aggregates: {},\n            field: field\n          };\n          groupedArray.push(grouped[val]);\n\n          if (!isNullOrUndefined(groupDs)) {\n            var tempObj = groupDs.filter(function (e) {\n              return e.key === grouped[val].key;\n            });\n            grouped[val].count = tempObj[0].count;\n          }\n        }\n\n        grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n\n        if (!isLazyLoad || isLazyLoad && aggregates.length) {\n          grouped[val].items.push(jsonData[i]);\n        }\n      };\n\n      for (var i = 0; i < jsonData.length; i++) {\n        _loop2(i);\n      }\n\n      if (aggregates && aggregates.length) {\n        var _loop3 = function _loop3(_i) {\n          var res = {};\n          var fn = void 0;\n          var aggs = aggregates;\n\n          for (var _j = 0; _j < aggregates.length; _j++) {\n            fn = DataUtil.aggregates[aggregates[_j].type];\n\n            if (!isNullOrUndefined(groupDs)) {\n              var temp = groupDs.filter(function (e) {\n                return e.key === groupedArray[_i].key;\n              });\n\n              if (fn) {\n                res[aggs[_j].field + ' - ' + aggs[_j].type] = fn(temp[0].items, aggs[_j].field);\n              }\n            } else {\n              if (fn) {\n                res[aggs[_j].field + ' - ' + aggs[_j].type] = fn(groupedArray[_i].items, aggs[_j].field);\n              }\n            }\n          }\n\n          groupedArray[_i].aggregates = res;\n        };\n\n        for (var _i = 0; _i < groupedArray.length; _i++) {\n          _loop3(_i);\n        }\n      }\n\n      if (isLazyLoad && groupedArray.length && aggregates.length) {\n        for (var _i2 = 0; _i2 < groupedArray.length; _i2++) {\n          groupedArray[_i2].items = [];\n        }\n      }\n\n      return jsonData.length && groupedArray || jsonData;\n    }\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n\n  }, {\n    key: \"buildHierarchy\",\n    value: function buildHierarchy(fKey, from, source, lookup, pKey) {\n      var i;\n      var grp = {};\n      var temp;\n\n      if (lookup.result) {\n        lookup = lookup.result;\n      }\n\n      if (lookup.GroupGuid) {\n        this.throwError('DataManager: Do not have support Grouping in hierarchy');\n      }\n\n      for (i = 0; i < lookup.length; i++) {\n        var fKeyData = this.getObject(fKey, lookup[i]);\n        temp = grp[fKeyData] || (grp[fKeyData] = []);\n        temp.push(lookup[i]);\n      }\n\n      for (i = 0; i < source.length; i++) {\n        var _fKeyData = this.getObject(pKey || fKey, source[i]);\n\n        source[i][from] = grp[_fKeyData];\n      }\n    }\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n\n  }, {\n    key: \"getFieldList\",\n    value: function getFieldList(obj, fields, prefix) {\n      if (prefix === undefined) {\n        prefix = '';\n      }\n\n      if (fields === undefined || fields === null) {\n        return this.getFieldList(obj, [], prefix);\n      }\n\n      var copyObj = obj;\n      var keys = Object.keys(obj);\n\n      for (var _i3 = 0, _keys = keys; _i3 < _keys.length; _i3++) {\n        var prop = _keys[_i3];\n\n        if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n          this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n        } else {\n          fields.push(prefix + prop);\n        }\n      }\n\n      return fields;\n    }\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n\n  }, {\n    key: \"getObject\",\n    value: function getObject(nameSpace, from) {\n      if (!nameSpace) {\n        return from;\n      }\n\n      if (!from) {\n        return undefined;\n      }\n\n      if (nameSpace.indexOf('.') === -1) {\n        return from[nameSpace];\n      }\n\n      var value = from;\n      var splits = nameSpace.split('.');\n\n      for (var i = 0; i < splits.length; i++) {\n        if (value == null) {\n          break;\n        }\n\n        value = value[splits[i]];\n      }\n\n      return value;\n    }\n    /**\n     * To set value for the nameSpace in desired object.\n     * @param {string} nameSpace - String value to the get the inner object.\n     * @param {Object} value - Value that you need to set.\n     * @param {Object} obj - Object to get the inner object value.\n     * @return { [key: string]: Object; } | Object\n     * @hidden\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(nameSpace, value, obj) {\n      var keys = nameSpace.toString().split('.');\n      var start = obj || {};\n      var fromObj = start;\n      var i;\n      var length = keys.length;\n      var key;\n\n      for (i = 0; i < length; i++) {\n        key = keys[i];\n\n        if (i + 1 === length) {\n          fromObj[key] = value === undefined ? undefined : value;\n        } else if (isNullOrUndefined(fromObj[key])) {\n          fromObj[key] = {};\n        }\n\n        fromObj = fromObj[key];\n      }\n\n      return start;\n    }\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(ds, field, comparer) {\n      if (ds.length <= 1) {\n        return ds;\n      }\n\n      var middle = parseInt((ds.length / 2).toString(), 10);\n      var left = ds.slice(0, middle);\n      var right = ds.slice(middle);\n      left = this.sort(left, field, comparer);\n      right = this.sort(right, field, comparer);\n      return this.merge(left, right, field, comparer);\n    }\n  }, {\n    key: \"ignoreDiacritics\",\n    value: function ignoreDiacritics(value) {\n      if (typeof value !== 'string') {\n        return value;\n      }\n\n      var result = value.split('');\n      var newValue = result.map(function (temp) {\n        return temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp;\n      });\n      return newValue.join('');\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(left, right, fieldName, comparer) {\n      var result = [];\n      var current;\n\n      while (left.length > 0 || right.length > 0) {\n        if (left.length > 0 && right.length > 0) {\n          if (comparer) {\n            current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n          } else {\n            current = left[0][fieldName] < left[0][fieldName] ? left : right;\n          }\n        } else {\n          current = left.length > 0 ? left : right;\n        }\n\n        result.push(current.shift());\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getVal\",\n    value: function getVal(array, index, field) {\n      return field ? this.getObject(field, array[index]) : array[index];\n    }\n  }, {\n    key: \"toLowerCase\",\n    value: function toLowerCase(val) {\n      return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : '';\n    }\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n\n  }, {\n    key: \"callAdaptorFunction\",\n    value: function callAdaptorFunction(adaptor, fnName, param1, param2) {\n      if (fnName in adaptor) {\n        var res = adaptor[fnName](param1, param2);\n\n        if (!isNullOrUndefined(res)) {\n          param1 = res;\n        }\n      }\n\n      return param1;\n    }\n  }, {\n    key: \"getAddParams\",\n    value: function getAddParams(adp, dm, query) {\n      var req = {};\n      DataUtil.callAdaptorFunction(adp, 'addParams', {\n        dm: dm,\n        query: query,\n        params: query.params,\n        reqParams: req\n      });\n      return req;\n    }\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n\n  }, {\n    key: \"isPlainObject\",\n    value: function isPlainObject(obj) {\n      return !!obj && obj.constructor === Object;\n    }\n    /**\n     * Returns true when the browser cross origin request.\n     */\n\n  }, {\n    key: \"isCors\",\n    value: function isCors() {\n      var xhr = null;\n      var request = 'XMLHttpRequest';\n\n      try {\n        xhr = new window[request]();\n      } catch (e) {// No exception handling\n      }\n\n      return !!xhr && 'withCredentials' in xhr;\n    }\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n\n  }, {\n    key: \"getGuid\",\n    value: function getGuid(prefix) {\n      var hexs = '0123456789abcdef';\n      var rand;\n      return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {\n        if ('crypto' in window && 'getRandomValues' in crypto) {\n          var arr = new Uint8Array(1);\n          window.crypto.getRandomValues(arr);\n          rand = arr[0] % 16 | 0;\n        } else {\n          rand = Math.random() * 16 | 0;\n        }\n\n        return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n      });\n    }\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n\n  }, {\n    key: \"isNull\",\n    value: function isNull(val) {\n      return val === undefined || val === null;\n    }\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n\n  }, {\n    key: \"getItemFromComparer\",\n    value: function getItemFromComparer(array, field, comparer) {\n      var keyVal;\n      var current;\n      var key;\n      var i = 0;\n      var castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n\n      if (array.length) {\n        while (isNullOrUndefined(keyVal) && i < array.length) {\n          keyVal = DataUtil.getVal(array, i, field);\n          key = array[i++];\n        }\n      }\n\n      for (; i < array.length; i++) {\n        current = DataUtil.getVal(array, i, field);\n\n        if (isNullOrUndefined(current)) {\n          continue;\n        }\n\n        if (castRequired) {\n          keyVal = +keyVal;\n          current = +current;\n        }\n\n        if (comparer(keyVal, current) > 0) {\n          keyVal = current;\n          key = array[i];\n        }\n      }\n\n      return key;\n    }\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function distinct(json, fieldName, requiresCompleteRecord) {\n      requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n      var result = [];\n      var val;\n      var tmp = {};\n      json.forEach(function (data, index) {\n        val = typeof json[index] === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n\n        if (!(val in tmp)) {\n          result.push(!requiresCompleteRecord ? val : json[index]);\n          tmp[val] = 1;\n        }\n      });\n      return result;\n    }\n    /**\n     * Process the given records based on the datamanager string.\n     * @param  {string} datamanager\n     * @param  {Object[]} records\n     */\n\n  }, {\n    key: \"processData\",\n    value: function processData(dm, records) {\n      var query = this.prepareQuery(dm);\n      var sampledata = new DataManager(records);\n\n      if (dm.requiresCounts) {\n        query.requiresCount();\n      }\n\n      var result = sampledata.executeLocal(query);\n      var returnValue = {\n        result: dm.requiresCounts ? result.result : result,\n        count: result.count,\n        aggregates: JSON.stringify(result.aggregates)\n      };\n      return dm.requiresCounts ? returnValue : result;\n    }\n  }, {\n    key: \"prepareQuery\",\n    value: function prepareQuery(dm) {\n      var _this2 = this;\n\n      var query = new Query();\n\n      if (dm.select) {\n        query.select(dm.select);\n      }\n\n      if (dm.where) {\n        var where = DataUtil.parse.parseJson(dm.where);\n        where.filter(function (pred) {\n          if (isNullOrUndefined(pred.condition)) {\n            query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);\n          } else {\n            var predicateList = [];\n\n            if (pred.field) {\n              predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));\n            } else {\n              predicateList = predicateList.concat(_this2.getPredicate(pred.predicates));\n            }\n\n            if (pred.condition == 'or') {\n              query.where(Predicate.or(predicateList));\n            } else if (pred.condition == 'and') {\n              query.where(Predicate.and(predicateList));\n            }\n          }\n        });\n      }\n\n      if (dm.search) {\n        var search = DataUtil.parse.parseJson(dm.search);\n        search.filter(function (e) {\n          return query.search(e.key, e.fields, e['operator'], e['ignoreCase'], e['ignoreAccent']);\n        });\n      }\n\n      if (dm.aggregates) {\n        dm.aggregates.filter(function (e) {\n          return query.aggregate(e.type, e.field);\n        });\n      }\n\n      if (dm.sorted) {\n        dm.sorted.filter(function (e) {\n          return query.sortBy(e.name, e.direction);\n        });\n      }\n\n      if (dm.skip) {\n        query.skip(dm.skip);\n      }\n\n      if (dm.take) {\n        query.take(dm.take);\n      }\n\n      if (dm.group) {\n        dm.group.filter(function (grp) {\n          return query.group(grp);\n        });\n      }\n\n      return query;\n    }\n  }, {\n    key: \"getPredicate\",\n    value: function getPredicate(pred) {\n      var mainPred = [];\n\n      for (var i = 0; i < pred.length; i++) {\n        var e = pred[i];\n\n        if (e.field) {\n          mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));\n        } else {\n          var childPred = [];\n          var cpre = this.getPredicate(e.predicates);\n\n          for (var _i4 = 0, _Object$keys = Object.keys(cpre); _i4 < _Object$keys.length; _i4++) {\n            var prop = _Object$keys[_i4];\n            childPred.push(cpre[prop]);\n          }\n\n          mainPred.push(e.condition == 'or' ? Predicate.or(childPred) : Predicate.and(childPred));\n        }\n      }\n\n      return mainPred;\n    }\n  }]);\n\n  return DataUtil;\n}();\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\n\n\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\n\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\n\nDataUtil.throwError = function (error) {\n  try {\n    throw new Error(error);\n  } catch (e) {\n    throw e.message + '\\n' + e.stack;\n  }\n};\n\nDataUtil.aggregates = {\n  /**\n   * Calculate sum of the given field in the data.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  sum: function sum(ds, field) {\n    var result = 0;\n    var val;\n    var castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n\n    for (var i = 0; i < ds.length; i++) {\n      val = DataUtil.getVal(ds, i, field);\n\n      if (!isNaN(val) && val !== null) {\n        if (castRequired) {\n          val = +val;\n        }\n\n        result += val;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Calculate average value of the given field in the data.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  average: function average(ds, field) {\n    return DataUtil.aggregates.sum(ds, field) / ds.length;\n  },\n\n  /**\n   * Returns the min value of the data based on the field.\n   * @param  {Object[]} ds\n   * @param  {string|Function} field\n   */\n  min: function min(ds, field) {\n    var comparer;\n\n    if (typeof field === 'function') {\n      comparer = field;\n      field = null;\n    }\n\n    return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n  },\n\n  /**\n   * Returns the max value of the data based on the field.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   * @returns number\n   */\n  max: function max(ds, field) {\n    var comparer;\n\n    if (typeof field === 'function') {\n      comparer = field;\n      field = null;\n    }\n\n    return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n  },\n\n  /**\n   * Returns the total number of true value present in the data based on the given boolean field name.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  truecount: function truecount(ds, field) {\n    return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n  },\n\n  /**\n   * Returns the total number of false value present in the data based on the given boolean field name.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  falsecount: function falsecount(ds, field) {\n    return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n  },\n\n  /**\n   * Returns the length of the given data.\n   * @param  {Object[]} ds\n   * @param  {string} field?\n   * @returns number\n   */\n  count: function count(ds, field) {\n    return ds.length;\n  }\n};\n/**\n * Specifies the Object with filter operators.\n */\n\nDataUtil.operatorSymbols = {\n  '<': 'lessthan',\n  '>': 'greaterthan',\n  '<=': 'lessthanorequal',\n  '>=': 'greaterthanorequal',\n  '==': 'equal',\n  '!=': 'notequal',\n  '*=': 'contains',\n  '$=': 'endswith',\n  '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\n\nDataUtil.odBiOperator = {\n  '<': ' lt ',\n  '>': ' gt ',\n  '<=': ' le ',\n  '>=': ' ge ',\n  '==': ' eq ',\n  '!=': ' ne ',\n  'lessthan': ' lt ',\n  'lessthanorequal': ' le ',\n  'greaterthan': ' gt ',\n  'greaterthanorequal': ' ge ',\n  'equal': ' eq ',\n  'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\n\nDataUtil.odUniOperator = {\n  '$=': 'endswith',\n  '^=': 'startswith',\n  '*=': 'substringof',\n  'endswith': 'endswith',\n  'startswith': 'startswith',\n  'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\n\nDataUtil.odv4UniOperator = {\n  '$=': 'endswith',\n  '^=': 'startswith',\n  '*=': 'contains',\n  'endswith': 'endswith',\n  'startswith': 'startswith',\n  'contains': 'contains'\n};\nDataUtil.diacritics = {\n  \"\\u24B6\": 'A',\n  \"\\uFF21\": 'A',\n  \"\\xC0\": 'A',\n  \"\\xC1\": 'A',\n  \"\\xC2\": 'A',\n  \"\\u1EA6\": 'A',\n  \"\\u1EA4\": 'A',\n  \"\\u1EAA\": 'A',\n  \"\\u1EA8\": 'A',\n  \"\\xC3\": 'A',\n  \"\\u0100\": 'A',\n  \"\\u0102\": 'A',\n  \"\\u1EB0\": 'A',\n  \"\\u1EAE\": 'A',\n  \"\\u1EB4\": 'A',\n  \"\\u1EB2\": 'A',\n  \"\\u0226\": 'A',\n  \"\\u01E0\": 'A',\n  \"\\xC4\": 'A',\n  \"\\u01DE\": 'A',\n  \"\\u1EA2\": 'A',\n  \"\\xC5\": 'A',\n  \"\\u01FA\": 'A',\n  \"\\u01CD\": 'A',\n  \"\\u0200\": 'A',\n  \"\\u0202\": 'A',\n  \"\\u1EA0\": 'A',\n  \"\\u1EAC\": 'A',\n  \"\\u1EB6\": 'A',\n  \"\\u1E00\": 'A',\n  \"\\u0104\": 'A',\n  \"\\u023A\": 'A',\n  \"\\u2C6F\": 'A',\n  \"\\uA732\": 'AA',\n  \"\\xC6\": 'AE',\n  \"\\u01FC\": 'AE',\n  \"\\u01E2\": 'AE',\n  \"\\uA734\": 'AO',\n  \"\\uA736\": 'AU',\n  \"\\uA738\": 'AV',\n  \"\\uA73A\": 'AV',\n  \"\\uA73C\": 'AY',\n  \"\\u24B7\": 'B',\n  \"\\uFF22\": 'B',\n  \"\\u1E02\": 'B',\n  \"\\u1E04\": 'B',\n  \"\\u1E06\": 'B',\n  \"\\u0243\": 'B',\n  \"\\u0182\": 'B',\n  \"\\u0181\": 'B',\n  \"\\u24B8\": 'C',\n  \"\\uFF23\": 'C',\n  \"\\u0106\": 'C',\n  \"\\u0108\": 'C',\n  \"\\u010A\": 'C',\n  \"\\u010C\": 'C',\n  \"\\xC7\": 'C',\n  \"\\u1E08\": 'C',\n  \"\\u0187\": 'C',\n  \"\\u023B\": 'C',\n  \"\\uA73E\": 'C',\n  \"\\u24B9\": 'D',\n  \"\\uFF24\": 'D',\n  \"\\u1E0A\": 'D',\n  \"\\u010E\": 'D',\n  \"\\u1E0C\": 'D',\n  \"\\u1E10\": 'D',\n  \"\\u1E12\": 'D',\n  \"\\u1E0E\": 'D',\n  \"\\u0110\": 'D',\n  \"\\u018B\": 'D',\n  \"\\u018A\": 'D',\n  \"\\u0189\": 'D',\n  \"\\uA779\": 'D',\n  \"\\u01F1\": 'DZ',\n  \"\\u01C4\": 'DZ',\n  \"\\u01F2\": 'Dz',\n  \"\\u01C5\": 'Dz',\n  \"\\u24BA\": 'E',\n  \"\\uFF25\": 'E',\n  \"\\xC8\": 'E',\n  \"\\xC9\": 'E',\n  \"\\xCA\": 'E',\n  \"\\u1EC0\": 'E',\n  \"\\u1EBE\": 'E',\n  \"\\u1EC4\": 'E',\n  \"\\u1EC2\": 'E',\n  \"\\u1EBC\": 'E',\n  \"\\u0112\": 'E',\n  \"\\u1E14\": 'E',\n  \"\\u1E16\": 'E',\n  \"\\u0114\": 'E',\n  \"\\u0116\": 'E',\n  \"\\xCB\": 'E',\n  \"\\u1EBA\": 'E',\n  \"\\u011A\": 'E',\n  \"\\u0204\": 'E',\n  \"\\u0206\": 'E',\n  \"\\u1EB8\": 'E',\n  \"\\u1EC6\": 'E',\n  \"\\u0228\": 'E',\n  \"\\u1E1C\": 'E',\n  \"\\u0118\": 'E',\n  \"\\u1E18\": 'E',\n  \"\\u1E1A\": 'E',\n  \"\\u0190\": 'E',\n  \"\\u018E\": 'E',\n  \"\\u24BB\": 'F',\n  \"\\uFF26\": 'F',\n  \"\\u1E1E\": 'F',\n  \"\\u0191\": 'F',\n  \"\\uA77B\": 'F',\n  \"\\u24BC\": 'G',\n  \"\\uFF27\": 'G',\n  \"\\u01F4\": 'G',\n  \"\\u011C\": 'G',\n  \"\\u1E20\": 'G',\n  \"\\u011E\": 'G',\n  \"\\u0120\": 'G',\n  \"\\u01E6\": 'G',\n  \"\\u0122\": 'G',\n  \"\\u01E4\": 'G',\n  \"\\u0193\": 'G',\n  \"\\uA7A0\": 'G',\n  \"\\uA77D\": 'G',\n  \"\\uA77E\": 'G',\n  \"\\u24BD\": 'H',\n  \"\\uFF28\": 'H',\n  \"\\u0124\": 'H',\n  \"\\u1E22\": 'H',\n  \"\\u1E26\": 'H',\n  \"\\u021E\": 'H',\n  \"\\u1E24\": 'H',\n  \"\\u1E28\": 'H',\n  \"\\u1E2A\": 'H',\n  \"\\u0126\": 'H',\n  \"\\u2C67\": 'H',\n  \"\\u2C75\": 'H',\n  \"\\uA78D\": 'H',\n  \"\\u24BE\": 'I',\n  \"\\uFF29\": 'I',\n  \"\\xCC\": 'I',\n  \"\\xCD\": 'I',\n  \"\\xCE\": 'I',\n  \"\\u0128\": 'I',\n  \"\\u012A\": 'I',\n  \"\\u012C\": 'I',\n  \"\\u0130\": 'I',\n  \"\\xCF\": 'I',\n  \"\\u1E2E\": 'I',\n  \"\\u1EC8\": 'I',\n  \"\\u01CF\": 'I',\n  \"\\u0208\": 'I',\n  \"\\u020A\": 'I',\n  \"\\u1ECA\": 'I',\n  \"\\u012E\": 'I',\n  \"\\u1E2C\": 'I',\n  \"\\u0197\": 'I',\n  \"\\u24BF\": 'J',\n  \"\\uFF2A\": 'J',\n  \"\\u0134\": 'J',\n  \"\\u0248\": 'J',\n  \"\\u24C0\": 'K',\n  \"\\uFF2B\": 'K',\n  \"\\u1E30\": 'K',\n  \"\\u01E8\": 'K',\n  \"\\u1E32\": 'K',\n  \"\\u0136\": 'K',\n  \"\\u1E34\": 'K',\n  \"\\u0198\": 'K',\n  \"\\u2C69\": 'K',\n  \"\\uA740\": 'K',\n  \"\\uA742\": 'K',\n  \"\\uA744\": 'K',\n  \"\\uA7A2\": 'K',\n  \"\\u24C1\": 'L',\n  \"\\uFF2C\": 'L',\n  \"\\u013F\": 'L',\n  \"\\u0139\": 'L',\n  \"\\u013D\": 'L',\n  \"\\u1E36\": 'L',\n  \"\\u1E38\": 'L',\n  \"\\u013B\": 'L',\n  \"\\u1E3C\": 'L',\n  \"\\u1E3A\": 'L',\n  \"\\u0141\": 'L',\n  \"\\u023D\": 'L',\n  \"\\u2C62\": 'L',\n  \"\\u2C60\": 'L',\n  \"\\uA748\": 'L',\n  \"\\uA746\": 'L',\n  \"\\uA780\": 'L',\n  \"\\u01C7\": 'LJ',\n  \"\\u01C8\": 'Lj',\n  \"\\u24C2\": 'M',\n  \"\\uFF2D\": 'M',\n  \"\\u1E3E\": 'M',\n  \"\\u1E40\": 'M',\n  \"\\u1E42\": 'M',\n  \"\\u2C6E\": 'M',\n  \"\\u019C\": 'M',\n  \"\\u24C3\": 'N',\n  \"\\uFF2E\": 'N',\n  \"\\u01F8\": 'N',\n  \"\\u0143\": 'N',\n  \"\\xD1\": 'N',\n  \"\\u1E44\": 'N',\n  \"\\u0147\": 'N',\n  \"\\u1E46\": 'N',\n  \"\\u0145\": 'N',\n  \"\\u1E4A\": 'N',\n  \"\\u1E48\": 'N',\n  \"\\u0220\": 'N',\n  \"\\u019D\": 'N',\n  \"\\uA790\": 'N',\n  \"\\uA7A4\": 'N',\n  \"\\u01CA\": 'NJ',\n  \"\\u01CB\": 'Nj',\n  \"\\u24C4\": 'O',\n  \"\\uFF2F\": 'O',\n  \"\\xD2\": 'O',\n  \"\\xD3\": 'O',\n  \"\\xD4\": 'O',\n  \"\\u1ED2\": 'O',\n  \"\\u1ED0\": 'O',\n  \"\\u1ED6\": 'O',\n  \"\\u1ED4\": 'O',\n  \"\\xD5\": 'O',\n  \"\\u1E4C\": 'O',\n  \"\\u022C\": 'O',\n  \"\\u1E4E\": 'O',\n  \"\\u014C\": 'O',\n  \"\\u1E50\": 'O',\n  \"\\u1E52\": 'O',\n  \"\\u014E\": 'O',\n  \"\\u022E\": 'O',\n  \"\\u0230\": 'O',\n  \"\\xD6\": 'O',\n  \"\\u022A\": 'O',\n  \"\\u1ECE\": 'O',\n  \"\\u0150\": 'O',\n  \"\\u01D1\": 'O',\n  \"\\u020C\": 'O',\n  \"\\u020E\": 'O',\n  \"\\u01A0\": 'O',\n  \"\\u1EDC\": 'O',\n  \"\\u1EDA\": 'O',\n  \"\\u1EE0\": 'O',\n  \"\\u1EDE\": 'O',\n  \"\\u1EE2\": 'O',\n  \"\\u1ECC\": 'O',\n  \"\\u1ED8\": 'O',\n  \"\\u01EA\": 'O',\n  \"\\u01EC\": 'O',\n  \"\\xD8\": 'O',\n  \"\\u01FE\": 'O',\n  \"\\u0186\": 'O',\n  \"\\u019F\": 'O',\n  \"\\uA74A\": 'O',\n  \"\\uA74C\": 'O',\n  \"\\u01A2\": 'OI',\n  \"\\uA74E\": 'OO',\n  \"\\u0222\": 'OU',\n  \"\\u24C5\": 'P',\n  \"\\uFF30\": 'P',\n  \"\\u1E54\": 'P',\n  \"\\u1E56\": 'P',\n  \"\\u01A4\": 'P',\n  \"\\u2C63\": 'P',\n  \"\\uA750\": 'P',\n  \"\\uA752\": 'P',\n  \"\\uA754\": 'P',\n  \"\\u24C6\": 'Q',\n  \"\\uFF31\": 'Q',\n  \"\\uA756\": 'Q',\n  \"\\uA758\": 'Q',\n  \"\\u024A\": 'Q',\n  \"\\u24C7\": 'R',\n  \"\\uFF32\": 'R',\n  \"\\u0154\": 'R',\n  \"\\u1E58\": 'R',\n  \"\\u0158\": 'R',\n  \"\\u0210\": 'R',\n  \"\\u0212\": 'R',\n  \"\\u1E5A\": 'R',\n  \"\\u1E5C\": 'R',\n  \"\\u0156\": 'R',\n  \"\\u1E5E\": 'R',\n  \"\\u024C\": 'R',\n  \"\\u2C64\": 'R',\n  \"\\uA75A\": 'R',\n  \"\\uA7A6\": 'R',\n  \"\\uA782\": 'R',\n  \"\\u24C8\": 'S',\n  \"\\uFF33\": 'S',\n  \"\\u1E9E\": 'S',\n  \"\\u015A\": 'S',\n  \"\\u1E64\": 'S',\n  \"\\u015C\": 'S',\n  \"\\u1E60\": 'S',\n  \"\\u0160\": 'S',\n  \"\\u1E66\": 'S',\n  \"\\u1E62\": 'S',\n  \"\\u1E68\": 'S',\n  \"\\u0218\": 'S',\n  \"\\u015E\": 'S',\n  \"\\u2C7E\": 'S',\n  \"\\uA7A8\": 'S',\n  \"\\uA784\": 'S',\n  \"\\u24C9\": 'T',\n  \"\\uFF34\": 'T',\n  \"\\u1E6A\": 'T',\n  \"\\u0164\": 'T',\n  \"\\u1E6C\": 'T',\n  \"\\u021A\": 'T',\n  \"\\u0162\": 'T',\n  \"\\u1E70\": 'T',\n  \"\\u1E6E\": 'T',\n  \"\\u0166\": 'T',\n  \"\\u01AC\": 'T',\n  \"\\u01AE\": 'T',\n  \"\\u023E\": 'T',\n  \"\\uA786\": 'T',\n  \"\\uA728\": 'TZ',\n  \"\\u24CA\": 'U',\n  \"\\uFF35\": 'U',\n  \"\\xD9\": 'U',\n  \"\\xDA\": 'U',\n  \"\\xDB\": 'U',\n  \"\\u0168\": 'U',\n  \"\\u1E78\": 'U',\n  \"\\u016A\": 'U',\n  \"\\u1E7A\": 'U',\n  \"\\u016C\": 'U',\n  \"\\xDC\": 'U',\n  \"\\u01DB\": 'U',\n  \"\\u01D7\": 'U',\n  \"\\u01D5\": 'U',\n  \"\\u01D9\": 'U',\n  \"\\u1EE6\": 'U',\n  \"\\u016E\": 'U',\n  \"\\u0170\": 'U',\n  \"\\u01D3\": 'U',\n  \"\\u0214\": 'U',\n  \"\\u0216\": 'U',\n  \"\\u01AF\": 'U',\n  \"\\u1EEA\": 'U',\n  \"\\u1EE8\": 'U',\n  \"\\u1EEE\": 'U',\n  \"\\u1EEC\": 'U',\n  \"\\u1EF0\": 'U',\n  \"\\u1EE4\": 'U',\n  \"\\u1E72\": 'U',\n  \"\\u0172\": 'U',\n  \"\\u1E76\": 'U',\n  \"\\u1E74\": 'U',\n  \"\\u0244\": 'U',\n  \"\\u24CB\": 'V',\n  \"\\uFF36\": 'V',\n  \"\\u1E7C\": 'V',\n  \"\\u1E7E\": 'V',\n  \"\\u01B2\": 'V',\n  \"\\uA75E\": 'V',\n  \"\\u0245\": 'V',\n  \"\\uA760\": 'VY',\n  \"\\u24CC\": 'W',\n  \"\\uFF37\": 'W',\n  \"\\u1E80\": 'W',\n  \"\\u1E82\": 'W',\n  \"\\u0174\": 'W',\n  \"\\u1E86\": 'W',\n  \"\\u1E84\": 'W',\n  \"\\u1E88\": 'W',\n  \"\\u2C72\": 'W',\n  \"\\u24CD\": 'X',\n  \"\\uFF38\": 'X',\n  \"\\u1E8A\": 'X',\n  \"\\u1E8C\": 'X',\n  \"\\u24CE\": 'Y',\n  \"\\uFF39\": 'Y',\n  \"\\u1EF2\": 'Y',\n  \"\\xDD\": 'Y',\n  \"\\u0176\": 'Y',\n  \"\\u1EF8\": 'Y',\n  \"\\u0232\": 'Y',\n  \"\\u1E8E\": 'Y',\n  \"\\u0178\": 'Y',\n  \"\\u1EF6\": 'Y',\n  \"\\u1EF4\": 'Y',\n  \"\\u01B3\": 'Y',\n  \"\\u024E\": 'Y',\n  \"\\u1EFE\": 'Y',\n  \"\\u24CF\": 'Z',\n  \"\\uFF3A\": 'Z',\n  \"\\u0179\": 'Z',\n  \"\\u1E90\": 'Z',\n  \"\\u017B\": 'Z',\n  \"\\u017D\": 'Z',\n  \"\\u1E92\": 'Z',\n  \"\\u1E94\": 'Z',\n  \"\\u01B5\": 'Z',\n  \"\\u0224\": 'Z',\n  \"\\u2C7F\": 'Z',\n  \"\\u2C6B\": 'Z',\n  \"\\uA762\": 'Z',\n  \"\\u24D0\": 'a',\n  \"\\uFF41\": 'a',\n  \"\\u1E9A\": 'a',\n  \"\\xE0\": 'a',\n  \"\\xE1\": 'a',\n  \"\\xE2\": 'a',\n  \"\\u1EA7\": 'a',\n  \"\\u1EA5\": 'a',\n  \"\\u1EAB\": 'a',\n  \"\\u1EA9\": 'a',\n  \"\\xE3\": 'a',\n  \"\\u0101\": 'a',\n  \"\\u0103\": 'a',\n  \"\\u1EB1\": 'a',\n  \"\\u1EAF\": 'a',\n  \"\\u1EB5\": 'a',\n  \"\\u1EB3\": 'a',\n  \"\\u0227\": 'a',\n  \"\\u01E1\": 'a',\n  \"\\xE4\": 'a',\n  \"\\u01DF\": 'a',\n  \"\\u1EA3\": 'a',\n  \"\\xE5\": 'a',\n  \"\\u01FB\": 'a',\n  \"\\u01CE\": 'a',\n  \"\\u0201\": 'a',\n  \"\\u0203\": 'a',\n  \"\\u1EA1\": 'a',\n  \"\\u1EAD\": 'a',\n  \"\\u1EB7\": 'a',\n  \"\\u1E01\": 'a',\n  \"\\u0105\": 'a',\n  \"\\u2C65\": 'a',\n  \"\\u0250\": 'a',\n  \"\\uA733\": 'aa',\n  \"\\xE6\": 'ae',\n  \"\\u01FD\": 'ae',\n  \"\\u01E3\": 'ae',\n  \"\\uA735\": 'ao',\n  \"\\uA737\": 'au',\n  \"\\uA739\": 'av',\n  \"\\uA73B\": 'av',\n  \"\\uA73D\": 'ay',\n  \"\\u24D1\": 'b',\n  \"\\uFF42\": 'b',\n  \"\\u1E03\": 'b',\n  \"\\u1E05\": 'b',\n  \"\\u1E07\": 'b',\n  \"\\u0180\": 'b',\n  \"\\u0183\": 'b',\n  \"\\u0253\": 'b',\n  \"\\u24D2\": 'c',\n  \"\\uFF43\": 'c',\n  \"\\u0107\": 'c',\n  \"\\u0109\": 'c',\n  \"\\u010B\": 'c',\n  \"\\u010D\": 'c',\n  \"\\xE7\": 'c',\n  \"\\u1E09\": 'c',\n  \"\\u0188\": 'c',\n  \"\\u023C\": 'c',\n  \"\\uA73F\": 'c',\n  \"\\u2184\": 'c',\n  \"\\u24D3\": 'd',\n  \"\\uFF44\": 'd',\n  \"\\u1E0B\": 'd',\n  \"\\u010F\": 'd',\n  \"\\u1E0D\": 'd',\n  \"\\u1E11\": 'd',\n  \"\\u1E13\": 'd',\n  \"\\u1E0F\": 'd',\n  \"\\u0111\": 'd',\n  \"\\u018C\": 'd',\n  \"\\u0256\": 'd',\n  \"\\u0257\": 'd',\n  \"\\uA77A\": 'd',\n  \"\\u01F3\": 'dz',\n  \"\\u01C6\": 'dz',\n  \"\\u24D4\": 'e',\n  \"\\uFF45\": 'e',\n  \"\\xE8\": 'e',\n  \"\\xE9\": 'e',\n  \"\\xEA\": 'e',\n  \"\\u1EC1\": 'e',\n  \"\\u1EBF\": 'e',\n  \"\\u1EC5\": 'e',\n  \"\\u1EC3\": 'e',\n  \"\\u1EBD\": 'e',\n  \"\\u0113\": 'e',\n  \"\\u1E15\": 'e',\n  \"\\u1E17\": 'e',\n  \"\\u0115\": 'e',\n  \"\\u0117\": 'e',\n  \"\\xEB\": 'e',\n  \"\\u1EBB\": 'e',\n  \"\\u011B\": 'e',\n  \"\\u0205\": 'e',\n  \"\\u0207\": 'e',\n  \"\\u1EB9\": 'e',\n  \"\\u1EC7\": 'e',\n  \"\\u0229\": 'e',\n  \"\\u1E1D\": 'e',\n  \"\\u0119\": 'e',\n  \"\\u1E19\": 'e',\n  \"\\u1E1B\": 'e',\n  \"\\u0247\": 'e',\n  \"\\u025B\": 'e',\n  \"\\u01DD\": 'e',\n  \"\\u24D5\": 'f',\n  \"\\uFF46\": 'f',\n  \"\\u1E1F\": 'f',\n  \"\\u0192\": 'f',\n  \"\\uA77C\": 'f',\n  \"\\u24D6\": 'g',\n  \"\\uFF47\": 'g',\n  \"\\u01F5\": 'g',\n  \"\\u011D\": 'g',\n  \"\\u1E21\": 'g',\n  \"\\u011F\": 'g',\n  \"\\u0121\": 'g',\n  \"\\u01E7\": 'g',\n  \"\\u0123\": 'g',\n  \"\\u01E5\": 'g',\n  \"\\u0260\": 'g',\n  \"\\uA7A1\": 'g',\n  \"\\u1D79\": 'g',\n  \"\\uA77F\": 'g',\n  \"\\u24D7\": 'h',\n  \"\\uFF48\": 'h',\n  \"\\u0125\": 'h',\n  \"\\u1E23\": 'h',\n  \"\\u1E27\": 'h',\n  \"\\u021F\": 'h',\n  \"\\u1E25\": 'h',\n  \"\\u1E29\": 'h',\n  \"\\u1E2B\": 'h',\n  \"\\u1E96\": 'h',\n  \"\\u0127\": 'h',\n  \"\\u2C68\": 'h',\n  \"\\u2C76\": 'h',\n  \"\\u0265\": 'h',\n  \"\\u0195\": 'hv',\n  \"\\u24D8\": 'i',\n  \"\\uFF49\": 'i',\n  \"\\xEC\": 'i',\n  \"\\xED\": 'i',\n  \"\\xEE\": 'i',\n  \"\\u0129\": 'i',\n  \"\\u012B\": 'i',\n  \"\\u012D\": 'i',\n  \"\\xEF\": 'i',\n  \"\\u1E2F\": 'i',\n  \"\\u1EC9\": 'i',\n  \"\\u01D0\": 'i',\n  \"\\u0209\": 'i',\n  \"\\u020B\": 'i',\n  \"\\u1ECB\": 'i',\n  \"\\u012F\": 'i',\n  \"\\u1E2D\": 'i',\n  \"\\u0268\": 'i',\n  \"\\u0131\": 'i',\n  \"\\u24D9\": 'j',\n  \"\\uFF4A\": 'j',\n  \"\\u0135\": 'j',\n  \"\\u01F0\": 'j',\n  \"\\u0249\": 'j',\n  \"\\u24DA\": 'k',\n  \"\\uFF4B\": 'k',\n  \"\\u1E31\": 'k',\n  \"\\u01E9\": 'k',\n  \"\\u1E33\": 'k',\n  \"\\u0137\": 'k',\n  \"\\u1E35\": 'k',\n  \"\\u0199\": 'k',\n  \"\\u2C6A\": 'k',\n  \"\\uA741\": 'k',\n  \"\\uA743\": 'k',\n  \"\\uA745\": 'k',\n  \"\\uA7A3\": 'k',\n  \"\\u24DB\": 'l',\n  \"\\uFF4C\": 'l',\n  \"\\u0140\": 'l',\n  \"\\u013A\": 'l',\n  \"\\u013E\": 'l',\n  \"\\u1E37\": 'l',\n  \"\\u1E39\": 'l',\n  \"\\u013C\": 'l',\n  \"\\u1E3D\": 'l',\n  \"\\u1E3B\": 'l',\n  \"\\u017F\": 'l',\n  \"\\u0142\": 'l',\n  \"\\u019A\": 'l',\n  \"\\u026B\": 'l',\n  \"\\u2C61\": 'l',\n  \"\\uA749\": 'l',\n  \"\\uA781\": 'l',\n  \"\\uA747\": 'l',\n  \"\\u01C9\": 'lj',\n  \"\\u24DC\": 'm',\n  \"\\uFF4D\": 'm',\n  \"\\u1E3F\": 'm',\n  \"\\u1E41\": 'm',\n  \"\\u1E43\": 'm',\n  \"\\u0271\": 'm',\n  \"\\u026F\": 'm',\n  \"\\u24DD\": 'n',\n  \"\\uFF4E\": 'n',\n  \"\\u01F9\": 'n',\n  \"\\u0144\": 'n',\n  \"\\xF1\": 'n',\n  \"\\u1E45\": 'n',\n  \"\\u0148\": 'n',\n  \"\\u1E47\": 'n',\n  \"\\u0146\": 'n',\n  \"\\u1E4B\": 'n',\n  \"\\u1E49\": 'n',\n  \"\\u019E\": 'n',\n  \"\\u0272\": 'n',\n  \"\\u0149\": 'n',\n  \"\\uA791\": 'n',\n  \"\\uA7A5\": 'n',\n  \"\\u01CC\": 'nj',\n  \"\\u24DE\": 'o',\n  \"\\uFF4F\": 'o',\n  \"\\xF2\": 'o',\n  \"\\xF3\": 'o',\n  \"\\xF4\": 'o',\n  \"\\u1ED3\": 'o',\n  \"\\u1ED1\": 'o',\n  \"\\u1ED7\": 'o',\n  \"\\u1ED5\": 'o',\n  \"\\xF5\": 'o',\n  \"\\u1E4D\": 'o',\n  \"\\u022D\": 'o',\n  \"\\u1E4F\": 'o',\n  \"\\u014D\": 'o',\n  \"\\u1E51\": 'o',\n  \"\\u1E53\": 'o',\n  \"\\u014F\": 'o',\n  \"\\u022F\": 'o',\n  \"\\u0231\": 'o',\n  \"\\xF6\": 'o',\n  \"\\u022B\": 'o',\n  \"\\u1ECF\": 'o',\n  \"\\u0151\": 'o',\n  \"\\u01D2\": 'o',\n  \"\\u020D\": 'o',\n  \"\\u020F\": 'o',\n  \"\\u01A1\": 'o',\n  \"\\u1EDD\": 'o',\n  \"\\u1EDB\": 'o',\n  \"\\u1EE1\": 'o',\n  \"\\u1EDF\": 'o',\n  \"\\u1EE3\": 'o',\n  \"\\u1ECD\": 'o',\n  \"\\u1ED9\": 'o',\n  \"\\u01EB\": 'o',\n  \"\\u01ED\": 'o',\n  \"\\xF8\": 'o',\n  \"\\u01FF\": 'o',\n  \"\\u0254\": 'o',\n  \"\\uA74B\": 'o',\n  \"\\uA74D\": 'o',\n  \"\\u0275\": 'o',\n  \"\\u01A3\": 'oi',\n  \"\\u0223\": 'ou',\n  \"\\uA74F\": 'oo',\n  \"\\u24DF\": 'p',\n  \"\\uFF50\": 'p',\n  \"\\u1E55\": 'p',\n  \"\\u1E57\": 'p',\n  \"\\u01A5\": 'p',\n  \"\\u1D7D\": 'p',\n  \"\\uA751\": 'p',\n  \"\\uA753\": 'p',\n  \"\\uA755\": 'p',\n  \"\\u24E0\": 'q',\n  \"\\uFF51\": 'q',\n  \"\\u024B\": 'q',\n  \"\\uA757\": 'q',\n  \"\\uA759\": 'q',\n  \"\\u24E1\": 'r',\n  \"\\uFF52\": 'r',\n  \"\\u0155\": 'r',\n  \"\\u1E59\": 'r',\n  \"\\u0159\": 'r',\n  \"\\u0211\": 'r',\n  \"\\u0213\": 'r',\n  \"\\u1E5B\": 'r',\n  \"\\u1E5D\": 'r',\n  \"\\u0157\": 'r',\n  \"\\u1E5F\": 'r',\n  \"\\u024D\": 'r',\n  \"\\u027D\": 'r',\n  \"\\uA75B\": 'r',\n  \"\\uA7A7\": 'r',\n  \"\\uA783\": 'r',\n  \"\\u24E2\": 's',\n  \"\\uFF53\": 's',\n  \"\\xDF\": 's',\n  \"\\u015B\": 's',\n  \"\\u1E65\": 's',\n  \"\\u015D\": 's',\n  \"\\u1E61\": 's',\n  \"\\u0161\": 's',\n  \"\\u1E67\": 's',\n  \"\\u1E63\": 's',\n  \"\\u1E69\": 's',\n  \"\\u0219\": 's',\n  \"\\u015F\": 's',\n  \"\\u023F\": 's',\n  \"\\uA7A9\": 's',\n  \"\\uA785\": 's',\n  \"\\u1E9B\": 's',\n  \"\\u24E3\": 't',\n  \"\\uFF54\": 't',\n  \"\\u1E6B\": 't',\n  \"\\u1E97\": 't',\n  \"\\u0165\": 't',\n  \"\\u1E6D\": 't',\n  \"\\u021B\": 't',\n  \"\\u0163\": 't',\n  \"\\u1E71\": 't',\n  \"\\u1E6F\": 't',\n  \"\\u0167\": 't',\n  \"\\u01AD\": 't',\n  \"\\u0288\": 't',\n  \"\\u2C66\": 't',\n  \"\\uA787\": 't',\n  \"\\uA729\": 'tz',\n  \"\\u24E4\": 'u',\n  \"\\uFF55\": 'u',\n  \"\\xF9\": 'u',\n  \"\\xFA\": 'u',\n  \"\\xFB\": 'u',\n  \"\\u0169\": 'u',\n  \"\\u1E79\": 'u',\n  \"\\u016B\": 'u',\n  \"\\u1E7B\": 'u',\n  \"\\u016D\": 'u',\n  \"\\xFC\": 'u',\n  \"\\u01DC\": 'u',\n  \"\\u01D8\": 'u',\n  \"\\u01D6\": 'u',\n  \"\\u01DA\": 'u',\n  \"\\u1EE7\": 'u',\n  \"\\u016F\": 'u',\n  \"\\u0171\": 'u',\n  \"\\u01D4\": 'u',\n  \"\\u0215\": 'u',\n  \"\\u0217\": 'u',\n  \"\\u01B0\": 'u',\n  \"\\u1EEB\": 'u',\n  \"\\u1EE9\": 'u',\n  \"\\u1EEF\": 'u',\n  \"\\u1EED\": 'u',\n  \"\\u1EF1\": 'u',\n  \"\\u1EE5\": 'u',\n  \"\\u1E73\": 'u',\n  \"\\u0173\": 'u',\n  \"\\u1E77\": 'u',\n  \"\\u1E75\": 'u',\n  \"\\u0289\": 'u',\n  \"\\u24E5\": 'v',\n  \"\\uFF56\": 'v',\n  \"\\u1E7D\": 'v',\n  \"\\u1E7F\": 'v',\n  \"\\u028B\": 'v',\n  \"\\uA75F\": 'v',\n  \"\\u028C\": 'v',\n  \"\\uA761\": 'vy',\n  \"\\u24E6\": 'w',\n  \"\\uFF57\": 'w',\n  \"\\u1E81\": 'w',\n  \"\\u1E83\": 'w',\n  \"\\u0175\": 'w',\n  \"\\u1E87\": 'w',\n  \"\\u1E85\": 'w',\n  \"\\u1E98\": 'w',\n  \"\\u1E89\": 'w',\n  \"\\u2C73\": 'w',\n  \"\\u24E7\": 'x',\n  \"\\uFF58\": 'x',\n  \"\\u1E8B\": 'x',\n  \"\\u1E8D\": 'x',\n  \"\\u24E8\": 'y',\n  \"\\uFF59\": 'y',\n  \"\\u1EF3\": 'y',\n  \"\\xFD\": 'y',\n  \"\\u0177\": 'y',\n  \"\\u1EF9\": 'y',\n  \"\\u0233\": 'y',\n  \"\\u1E8F\": 'y',\n  \"\\xFF\": 'y',\n  \"\\u1EF7\": 'y',\n  \"\\u1E99\": 'y',\n  \"\\u1EF5\": 'y',\n  \"\\u01B4\": 'y',\n  \"\\u024F\": 'y',\n  \"\\u1EFF\": 'y',\n  \"\\u24E9\": 'z',\n  \"\\uFF5A\": 'z',\n  \"\\u017A\": 'z',\n  \"\\u1E91\": 'z',\n  \"\\u017C\": 'z',\n  \"\\u017E\": 'z',\n  \"\\u1E93\": 'z',\n  \"\\u1E95\": 'z',\n  \"\\u01B6\": 'z',\n  \"\\u0225\": 'z',\n  \"\\u0240\": 'z',\n  \"\\u2C6C\": 'z',\n  \"\\uA763\": 'z',\n  \"\\u0386\": \"\\u0391\",\n  \"\\u0388\": \"\\u0395\",\n  \"\\u0389\": \"\\u0397\",\n  \"\\u038A\": \"\\u0399\",\n  \"\\u03AA\": \"\\u0399\",\n  \"\\u038C\": \"\\u039F\",\n  \"\\u038E\": \"\\u03A5\",\n  \"\\u03AB\": \"\\u03A5\",\n  \"\\u038F\": \"\\u03A9\",\n  \"\\u03AC\": \"\\u03B1\",\n  \"\\u03AD\": \"\\u03B5\",\n  \"\\u03AE\": \"\\u03B7\",\n  \"\\u03AF\": \"\\u03B9\",\n  \"\\u03CA\": \"\\u03B9\",\n  \"\\u0390\": \"\\u03B9\",\n  \"\\u03CC\": \"\\u03BF\",\n  \"\\u03CD\": \"\\u03C5\",\n  \"\\u03CB\": \"\\u03C5\",\n  \"\\u03B0\": \"\\u03C5\",\n  \"\\u03C9\": \"\\u03C9\",\n  \"\\u03C2\": \"\\u03C3\"\n};\nDataUtil.fnOperators = {\n  /**\n   * Returns true when the actual input is equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   * @param  {boolean} ignoreAccent?\n   */\n  equal: function equal(actual, expected, ignoreCase, ignoreAccent) {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n    }\n\n    return actual === expected;\n  },\n\n  /**\n   * Returns true when the actual input is not equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  notequal: function notequal(actual, expected, ignoreCase, ignoreAccent) {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n  },\n\n  /**\n   * Returns true when the actual input is less than to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  lessthan: function lessthan(actual, expected, ignoreCase) {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n    }\n\n    if (isNullOrUndefined(actual)) {\n      actual = undefined;\n    }\n\n    return actual < expected;\n  },\n\n  /**\n   * Returns true when the actual input is greater than to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  greaterthan: function greaterthan(actual, expected, ignoreCase) {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n    }\n\n    return actual > expected;\n  },\n\n  /**\n   * Returns true when the actual input is less than or equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  lessthanorequal: function lessthanorequal(actual, expected, ignoreCase) {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n    }\n\n    if (isNullOrUndefined(actual)) {\n      actual = undefined;\n    }\n\n    return actual <= expected;\n  },\n\n  /**\n   * Returns true when the actual input is greater than or equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  greaterthanorequal: function greaterthanorequal(actual, expected, ignoreCase) {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n    }\n\n    return actual >= expected;\n  },\n\n  /**\n   * Returns true when the actual input contains the given string.\n   * @param  {string|number} actual\n   * @param  {string|number} expected\n   * @param  {boolean} ignoreCase?\n   */\n  contains: function contains(actual, expected, ignoreCase, ignoreAccent) {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n    }\n\n    return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) !== -1;\n  },\n\n  /**\n   * Returns true when the given input value is not null.\n   * @param  {string|number} actual\n   * @returns boolean\n   */\n  notnull: function notnull(actual) {\n    return actual !== null;\n  },\n\n  /**\n   * Returns true when the given input value is null.\n   * @param  {string|number} actual\n   * @returns boolean\n   */\n  isnull: function isnull(actual) {\n    return actual === null;\n  },\n\n  /**\n   * Returns true when the actual input starts with the given string\n   * @param  {string} actual\n   * @param  {string} expected\n   * @param  {boolean} ignoreCase?\n   */\n  startswith: function startswith(actual, expected, ignoreCase, ignoreAccent) {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n    }\n\n    return actual && expected && DataUtil.startsWith(actual, expected);\n  },\n\n  /**\n   * Returns true when the actual input ends with the given string.\n   * @param  {string} actual\n   * @param  {string} expected\n   * @param  {boolean} ignoreCase?\n   */\n  endswith: function endswith(actual, expected, ignoreCase, ignoreAccent) {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n    }\n\n    return actual && expected && DataUtil.endsWith(actual, expected);\n  },\n\n  /**\n   * It will return the filter operator based on the filter symbol.\n   * @param  {string} operator\n   * @hidden\n   */\n  processSymbols: function processSymbols(operator) {\n    var fnName = DataUtil.operatorSymbols[operator];\n\n    if (fnName) {\n      var fn = DataUtil.fnOperators[fnName];\n      return fn;\n    }\n\n    return DataUtil.throwError('Query - Process Operator : Invalid operator');\n  },\n\n  /**\n   * It will return the valid filter operator based on the specified operators.\n   * @param  {string} operator\n   * @hidden\n   */\n  processOperator: function processOperator(operator) {\n    var fn = DataUtil.fnOperators[operator];\n\n    if (fn) {\n      return fn;\n    }\n\n    return DataUtil.fnOperators.processSymbols(operator);\n  }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\n\nDataUtil.parse = {\n  /**\n   * Parse the given string to the plain JavaScript object.\n   * @param  {string|Object|Object[]} jsonText\n   */\n  parseJson: function parseJson(jsonText) {\n    if (typeof jsonText === 'string') {\n      jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n    } else if (jsonText instanceof Array) {\n      DataUtil.parse.iterateAndReviveArray(jsonText);\n    } else if (typeof jsonText === 'object' && jsonText !== null) {\n      DataUtil.parse.iterateAndReviveJson(jsonText);\n    }\n\n    return jsonText;\n  },\n\n  /**\n   * It will perform on array of values.\n   * @param  {string[]|Object[]} array\n   * @hidden\n   */\n  iterateAndReviveArray: function iterateAndReviveArray(array) {\n    for (var i = 0; i < array.length; i++) {\n      if (typeof array[i] === 'object' && array[i] !== null) {\n        DataUtil.parse.iterateAndReviveJson(array[i]);\n      } else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n        array[i] = DataUtil.parse.jsonReviver('', array[i]);\n      } else {\n        array[i] = DataUtil.parse.parseJson(array[i]);\n      }\n    }\n  },\n\n  /**\n   * It will perform on JSON values\n   * @param  {JSON} json\n   * @hidden\n   */\n  iterateAndReviveJson: function iterateAndReviveJson(json) {\n    var value;\n    var keys = Object.keys(json);\n\n    for (var _i5 = 0, _keys2 = keys; _i5 < _keys2.length; _i5++) {\n      var prop = _keys2[_i5];\n\n      if (DataUtil.startsWith(prop, '__')) {\n        continue;\n      }\n\n      value = json[prop];\n\n      if (typeof value === 'object') {\n        if (value instanceof Array) {\n          DataUtil.parse.iterateAndReviveArray(value);\n        } else if (value) {\n          DataUtil.parse.iterateAndReviveJson(value);\n        }\n      } else {\n        json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n      }\n    }\n  },\n\n  /**\n   * It will perform on JSON values\n   * @param  {string} field\n   * @param  {string|Date} value\n   * @hidden\n   */\n  jsonReviver: function jsonReviver(field, value) {\n    if (typeof value === 'string') {\n      var ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n      var offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n\n      if (ms) {\n        return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n      } else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n        var isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n        var arr = value.split(/[^0-9.]/);\n\n        if (isUTC) {\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n        } else {\n          var utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n          var hrs = parseInt(arr[6], 10);\n          var mins = parseInt(arr[7], 10);\n\n          if (isNaN(hrs) && isNaN(mins)) {\n            return utcFormat;\n          }\n\n          if (value.indexOf('+') > -1) {\n            utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n          } else {\n            utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n          }\n\n          value = DataUtil.dateParse.toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n        }\n\n        if (DataUtil.serverTimezoneOffset == null) {\n          value = DataUtil.dateParse.addSelfOffset(value);\n        }\n      }\n    }\n\n    return value;\n  },\n\n  /**\n   * Check wheather the given value is JSON or not.\n   * @param  {Object[]} jsonData\n   */\n  isJson: function isJson(jsonData) {\n    if (typeof jsonData[0] === 'string') {\n      return jsonData;\n    }\n\n    return DataUtil.parse.parseJson(jsonData);\n  },\n\n  /**\n   * Checks wheather the given value is GUID or not.\n   * @param  {string} value\n   */\n  isGuid: function isGuid(value) {\n    var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n    var match = regex.exec(value);\n    return match != null;\n  },\n\n  /**\n   * The method used to replace the value based on the type.\n   * @param  {Object} value\n   * @param  {boolean} stringify\n   * @hidden\n   */\n  replacer: function replacer(value, stringify) {\n    if (DataUtil.isPlainObject(value)) {\n      return DataUtil.parse.jsonReplacer(value, stringify);\n    }\n\n    if (value instanceof Array) {\n      return DataUtil.parse.arrayReplacer(value);\n    }\n\n    if (value instanceof Date) {\n      return DataUtil.parse.jsonReplacer({\n        val: value\n      }, stringify).val;\n    }\n\n    return value;\n  },\n\n  /**\n   * It will replace the JSON value.\n   * @param  {string} key\n   * @param  {Object} val\n   * @hidden\n   */\n  jsonReplacer: function jsonReplacer(val, stringify) {\n    var value;\n    var keys = Object.keys(val);\n\n    for (var _i6 = 0, _keys3 = keys; _i6 < _keys3.length; _i6++) {\n      var prop = _keys3[_i6];\n      value = val[prop];\n\n      if (!(value instanceof Date)) {\n        continue;\n      }\n\n      var d = value;\n\n      if (DataUtil.serverTimezoneOffset == null) {\n        val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n      } else {\n        d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n        val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n      }\n    }\n\n    return val;\n  },\n\n  /**\n   * It will replace the Array of value.\n   * @param  {string} key\n   * @param  {Object[]} val\n   * @hidden\n   */\n  arrayReplacer: function arrayReplacer(val) {\n    for (var i = 0; i < val.length; i++) {\n      if (DataUtil.isPlainObject(val[i])) {\n        val[i] = DataUtil.parse.jsonReplacer(val[i]);\n      } else if (val[i] instanceof Date) {\n        val[i] = DataUtil.parse.jsonReplacer({\n          date: val[i]\n        }).date;\n      }\n    }\n\n    return val;\n  },\n\n  /**\n   * It will replace the Date object with respective to UTC format value.\n   * @param  {string} key\n   * @param  {any} value\n   * @hidden\n   */\n\n  /* tslint:disable-next-line:no-any */\n  jsonDateReplacer: function jsonDateReplacer(key, value) {\n    if (key === 'value' && value) {\n      if (typeof value === 'string') {\n        var ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n\n        if (ms) {\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n        } else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n          var arr = value.split(/[^0-9]/);\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n        }\n      }\n\n      if (value instanceof Date) {\n        value = DataUtil.dateParse.addSelfOffset(value);\n\n        if (DataUtil.serverTimezoneOffset === null) {\n          return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n        } else {\n          value = DataUtil.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 * 2 - DataUtil.serverTimezoneOffset, false);\n          return value.toJSON();\n        }\n      }\n    }\n\n    return value;\n  }\n};\n/**\n * @hidden\n */\n\nDataUtil.dateParse = {\n  addSelfOffset: function addSelfOffset(input) {\n    return new Date(+input - input.getTimezoneOffset() * 60000);\n  },\n  toUTC: function toUTC(input) {\n    return new Date(+input + input.getTimezoneOffset() * 60000);\n  },\n  toTimeZone: function toTimeZone(input, offset, utc) {\n    if (offset === null) {\n      return input;\n    }\n\n    var unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n    return new Date(+unix - offset * 3600000);\n  },\n  toLocalTime: function toLocalTime(input) {\n    var datefn = input;\n    var timeZone = -datefn.getTimezoneOffset();\n    var differenceString = timeZone >= 0 ? '+' : '-';\n\n    var localtimefn = function localtimefn(num) {\n      var norm = Math.floor(Math.abs(num));\n      return (norm < 10 ? '0' : '') + norm;\n    };\n\n    var val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) + 'T' + localtimefn(datefn.getHours()) + ':' + localtimefn(datefn.getMinutes()) + ':' + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ':' + localtimefn(timeZone % 60);\n    return val;\n  }\n};\nvar consts$1 = {\n  GroupGuid: '{271bbba0-1ee7}'\n};\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\n\nvar Adaptor = /*#__PURE__*/function () {\n  /**\n   * Constructor for Adaptor class\n   * @param  {DataOptions} ds?\n   * @hidden\n   * @returns aggregates\n   */\n  function Adaptor(ds) {\n    _classCallCheck(this, Adaptor);\n\n    // common options for all the adaptors \n    this.options = {\n      from: 'table',\n      requestType: 'json',\n      sortBy: 'sorted',\n      select: 'select',\n      skip: 'skip',\n      group: 'group',\n      take: 'take',\n      search: 'search',\n      count: 'requiresCounts',\n      where: 'where',\n      aggregates: 'aggregates',\n      expand: 'expand'\n    };\n    /**\n     * Specifies the type of adaptor.\n     * @default Adaptor\n     */\n\n    this.type = Adaptor;\n    this.dataSource = ds;\n    this.pvt = {};\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {Object} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @returns Object\n   */\n\n\n  _createClass(Adaptor, [{\n    key: \"processResponse\",\n    value: function processResponse(data, ds, query, xhr) {\n      return data;\n    }\n  }]);\n\n  return Adaptor;\n}();\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\n\n\nvar JsonAdaptor = /*#__PURE__*/function (_Adaptor) {\n  _inherits(JsonAdaptor, _Adaptor);\n\n  var _super = _createSuper(JsonAdaptor);\n\n  function JsonAdaptor() {\n    _classCallCheck(this, JsonAdaptor);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(JsonAdaptor, [{\n    key: \"processQuery\",\n    value:\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    function processQuery(dataManager, query) {\n      var result = dataManager.dataSource.json.slice(0);\n      var count = result.length;\n      var countFlg = true;\n      var ret;\n      var key;\n      var lazyLoad = {};\n      var keyCount = 0;\n      var group = [];\n      var page;\n\n      for (var i = 0; i < query.lazyLoad.length; i++) {\n        keyCount++;\n        lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n      }\n\n      var agg = {};\n\n      for (var _i7 = 0; _i7 < query.queries.length; _i7++) {\n        key = query.queries[_i7];\n\n        if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {\n          if (key.fn === 'onGroup') {\n            group.push(key.e);\n          }\n\n          if (key.fn === 'onPage') {\n            page = key.e;\n          }\n\n          continue;\n        }\n\n        ret = this[key.fn].call(this, result, key.e, query);\n\n        if (key.fn === 'onAggregates') {\n          agg[key.e.field + ' - ' + key.e.type] = ret;\n        } else {\n          result = ret !== undefined ? ret : result;\n        }\n\n        if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n          countFlg = false;\n        }\n\n        if (countFlg) {\n          count = result.length;\n        }\n      }\n\n      if (keyCount) {\n        var args = {\n          query: query,\n          lazyLoad: lazyLoad,\n          result: result,\n          group: group,\n          page: page\n        };\n        var lazyLoadData = this.lazyLoadGroup(args);\n        result = lazyLoadData.result;\n        count = lazyLoadData.count;\n      }\n\n      if (query.isCountRequired) {\n        result = {\n          result: result,\n          count: count,\n          aggregates: agg\n        };\n      }\n\n      return result;\n    }\n    /**\n     * Perform lazy load grouping in JSON array based on the given query and lazy load details.\n     * @param  {LazyLoadGroupArgs} args\n     */\n\n  }, {\n    key: \"lazyLoadGroup\",\n    value: function lazyLoadGroup(args) {\n      var count = 0;\n      var agg = this.getAggregate(args.query);\n      var result = args.result;\n\n      if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {\n        var req = args.lazyLoad.onDemandGroupInfo;\n\n        for (var i = req.where.length - 1; i >= 0; i--) {\n          result = this.onWhere(result, req.where[i]);\n        }\n\n        if (args.group.length !== req.level) {\n          var field = args.group[req.level].fieldName;\n          result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n        }\n\n        count = result.length;\n        var data = result;\n        result = result.slice(req.skip);\n        result = result.slice(0, req.take);\n\n        if (args.group.length !== req.level) {\n          this.formGroupResult(result, data);\n        }\n      } else {\n        var _field = args.group[0].fieldName;\n        result = DataUtil.group(result, _field, agg, null, null, args.group[0].comparer, true);\n        count = result.length;\n        var _data = result;\n\n        if (args.page) {\n          result = this.onPage(result, args.page, args.query);\n        }\n\n        this.formGroupResult(result, _data);\n      }\n\n      return {\n        result: result,\n        count: count\n      };\n    }\n  }, {\n    key: \"formGroupResult\",\n    value: function formGroupResult(result, data) {\n      if (result.length && data.length) {\n        var uid = 'GroupGuid';\n        var childLevel = 'childLevels';\n        var level = 'level';\n        var records = 'records';\n        result[uid] = data[uid];\n        result[childLevel] = data[childLevel];\n        result[level] = data[level];\n        result[records] = data[records];\n      }\n\n      return result;\n    }\n    /**\n     * Separate the aggregate query from the given queries\n     * @param  {Query} query\n     */\n\n  }, {\n    key: \"getAggregate\",\n    value: function getAggregate(query) {\n      var aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n      var agg = [];\n\n      if (aggQuery.length) {\n        var tmp;\n\n        for (var i = 0; i < aggQuery.length; i++) {\n          tmp = aggQuery[i].e;\n          agg.push({\n            type: tmp.type,\n            field: DataUtil.getValue(tmp.field, query)\n          });\n        }\n      }\n\n      return agg;\n    }\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n\n  }, {\n    key: \"batchRequest\",\n    value: function batchRequest(dm, changes, e) {\n      var i;\n      var deletedRecordsLen = changes.deletedRecords.length;\n\n      for (i = 0; i < changes.addedRecords.length; i++) {\n        this.insert(dm, changes.addedRecords[i]);\n      }\n\n      for (i = 0; i < changes.changedRecords.length; i++) {\n        this.update(dm, e.key, changes.changedRecords[i]);\n      }\n\n      for (i = 0; i < deletedRecordsLen; i++) {\n        this.remove(dm, e.key, changes.deletedRecords[i]);\n      }\n\n      return changes;\n    }\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n\n  }, {\n    key: \"onWhere\",\n    value: function onWhere(ds, e) {\n      if (!ds || !ds.length) {\n        return ds;\n      }\n\n      return ds.filter(function (obj) {\n        if (e) {\n          return e.validate(obj);\n        }\n      });\n    }\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n\n  }, {\n    key: \"onAggregates\",\n    value: function onAggregates(ds, e) {\n      var fn = DataUtil.aggregates[e.type];\n\n      if (!ds || !fn || ds.length === 0) {\n        return null;\n      }\n\n      return fn(ds, e.field);\n    }\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n\n  }, {\n    key: \"onSearch\",\n    value: function onSearch(ds, e) {\n      if (!ds || !ds.length) {\n        return ds;\n      }\n\n      if (e.fieldNames.length === 0) {\n        DataUtil.getFieldList(ds[0], e.fieldNames);\n      }\n\n      return ds.filter(function (obj) {\n        for (var j = 0; j < e.fieldNames.length; j++) {\n          if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n    }\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n\n  }, {\n    key: \"onSortBy\",\n    value: function onSortBy(ds, e, query) {\n      if (!ds || !ds.length) {\n        return ds;\n      }\n\n      var fnCompare;\n      var field = DataUtil.getValue(e.fieldName, query);\n\n      if (!field) {\n        return ds.sort(e.comparer);\n      }\n\n      if (field instanceof Array) {\n        field = field.slice(0);\n\n        for (var i = field.length - 1; i >= 0; i--) {\n          if (!field[i]) {\n            continue;\n          }\n\n          fnCompare = e.comparer;\n\n          if (DataUtil.endsWith(field[i], ' desc')) {\n            fnCompare = DataUtil.fnSort('descending');\n            field[i] = field[i].replace(' desc', '');\n          }\n\n          ds = DataUtil.sort(ds, field[i], fnCompare);\n        }\n\n        return ds;\n      }\n\n      return DataUtil.sort(ds, field, e.comparer);\n    }\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n\n  }, {\n    key: \"onGroup\",\n    value: function onGroup(ds, e, query) {\n      if (!ds || !ds.length) {\n        return ds;\n      }\n\n      var agg = this.getAggregate(query);\n      return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    }\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n\n  }, {\n    key: \"onPage\",\n    value: function onPage(ds, e, query) {\n      var size = DataUtil.getValue(e.pageSize, query);\n      var start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n      var end = start + size;\n\n      if (!ds || !ds.length) {\n        return ds;\n      }\n\n      return ds.slice(start, end);\n    }\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n\n  }, {\n    key: \"onRange\",\n    value: function onRange(ds, e) {\n      if (!ds || !ds.length) {\n        return ds;\n      }\n\n      return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    }\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n\n  }, {\n    key: \"onTake\",\n    value: function onTake(ds, e) {\n      if (!ds || !ds.length) {\n        return ds;\n      }\n\n      return ds.slice(0, DataUtil.getValue(e.nos));\n    }\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n\n  }, {\n    key: \"onSkip\",\n    value: function onSkip(ds, e) {\n      if (!ds || !ds.length) {\n        return ds;\n      }\n\n      return ds.slice(DataUtil.getValue(e.nos));\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n\n  }, {\n    key: \"onSelect\",\n    value: function onSelect(ds, e) {\n      if (!ds || !ds.length) {\n        return ds;\n      }\n\n      return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    }\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(dm, data, tableName, query, position) {\n      if (isNullOrUndefined(position)) {\n        return dm.dataSource.json.push(data);\n      } else {\n        return dm.dataSource.json.splice(position, 0, data);\n      }\n    }\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(dm, keyField, value, tableName) {\n      var ds = dm.dataSource.json;\n      var i;\n\n      if (typeof value === 'object' && !(value instanceof Date)) {\n        value = DataUtil.getObject(keyField, value);\n      }\n\n      for (i = 0; i < ds.length; i++) {\n        if (DataUtil.getObject(keyField, ds[i]) === value) {\n          break;\n        }\n      }\n\n      return i !== ds.length ? ds.splice(i, 1) : null;\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(dm, keyField, value, tableName) {\n      var ds = dm.dataSource.json;\n      var i;\n      var key;\n\n      if (!isNullOrUndefined(keyField)) {\n        key = getValue(keyField, value);\n      }\n\n      for (i = 0; i < ds.length; i++) {\n        if (!isNullOrUndefined(keyField) && getValue(keyField, ds[i]) === key) {\n          break;\n        }\n      }\n\n      return i < ds.length ? merge(ds[i], value) : null;\n    }\n  }]);\n\n  return JsonAdaptor;\n}(Adaptor);\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\n\n\nvar UrlAdaptor = /*#__PURE__*/function (_Adaptor2) {\n  _inherits(UrlAdaptor, _Adaptor2);\n\n  var _super2 = _createSuper(UrlAdaptor);\n\n  function UrlAdaptor() {\n    _classCallCheck(this, UrlAdaptor);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(UrlAdaptor, [{\n    key: \"processQuery\",\n    value:\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    // tslint:disable-next-line:max-func-body-length\n    function processQuery(dm, query, hierarchyFilters) {\n      var queries = this.getQueryRequest(query);\n      var singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n      var params = query.params;\n      var url = dm.dataSource.url;\n      var temp;\n      var skip;\n      var take = null;\n      var options = this.options;\n      var request = {\n        sorts: [],\n        groups: [],\n        filters: [],\n        searches: [],\n        aggregates: []\n      }; // calc Paging & Range\n\n      if ('onPage' in singles) {\n        temp = singles.onPage;\n        skip = DataUtil.getValue(temp.pageIndex, query);\n        take = DataUtil.getValue(temp.pageSize, query);\n        skip = (skip - 1) * take;\n      } else if ('onRange' in singles) {\n        temp = singles.onRange;\n        skip = temp.start;\n        take = temp.end - temp.start;\n      } // Sorting\n\n\n      for (var i = 0; i < queries.sorts.length; i++) {\n        temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n        request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', {\n          name: temp,\n          direction: queries.sorts[i].e.direction\n        }, query));\n      } // hierarchy\n\n\n      if (hierarchyFilters) {\n        temp = this.getFiltersFrom(hierarchyFilters, query);\n\n        if (temp) {\n          request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n        }\n      } // Filters\n\n\n      for (var _i8 = 0; _i8 < queries.filters.length; _i8++) {\n        var res = DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[_i8].e.toJson(), query);\n\n        if (this.getModuleName && this.getModuleName() === 'ODataV4Adaptor' && !isNullOrUndefined(queries.filters[_i8].e.key) && queries.filters.length > 1) {\n          res = \"(\" + res + \")\";\n        }\n\n        request.filters.push(res);\n\n        var _keys4 = typeof request.filters[_i8] === 'object' ? Object.keys(request.filters[_i8]) : [];\n\n        var _iterator = _createForOfIteratorHelper(_keys4),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var prop = _step.value;\n\n            if (DataUtil.isNull(request[prop])) {\n              delete request[prop];\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } // Searches\n\n\n      for (var _i9 = 0; _i9 < queries.searches.length; _i9++) {\n        temp = queries.searches[_i9].e;\n        request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n          fields: temp.fieldNames,\n          operator: temp.operator,\n          key: temp.searchKey,\n          ignoreCase: temp.ignoreCase\n        }, query));\n      } // Grouping\n\n\n      for (var _i10 = 0; _i10 < queries.groups.length; _i10++) {\n        request.groups.push(DataUtil.getValue(queries.groups[_i10].e.fieldName, query));\n      } // aggregates\n\n\n      for (var _i11 = 0; _i11 < queries.aggregates.length; _i11++) {\n        temp = queries.aggregates[_i11].e;\n        request.aggregates.push({\n          type: temp.type,\n          field: DataUtil.getValue(temp.field, query)\n        });\n      }\n\n      var req = {};\n      this.getRequestQuery(options, query, singles, request, req); // Params\n\n      DataUtil.callAdaptorFunction(this, 'addParams', {\n        dm: dm,\n        query: query,\n        params: params,\n        reqParams: req\n      });\n\n      if (query.lazyLoad.length) {\n        for (var _i12 = 0; _i12 < query.lazyLoad.length; _i12++) {\n          req[query.lazyLoad[_i12].key] = query.lazyLoad[_i12].value;\n        }\n      } // cleanup\n\n\n      var keys = Object.keys(req);\n\n      for (var _i13 = 0, _keys5 = keys; _i13 < _keys5.length; _i13++) {\n        var _prop = _keys5[_i13];\n\n        if (DataUtil.isNull(req[_prop]) || req[_prop] === '' || req[_prop].length === 0) {\n          delete req[_prop];\n        }\n      }\n\n      if (!(options.skip in req && options.take in req) && take !== null) {\n        req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n        req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n      }\n\n      var p = this.pvt;\n      this.pvt = {};\n\n      if (this.options.requestType === 'json') {\n        return {\n          data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n          url: url,\n          pvtData: p,\n          type: 'POST',\n          contentType: 'application/json; charset=utf-8'\n        };\n      }\n\n      temp = this.convertToQueryString(req, query, dm);\n      temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n      return {\n        type: 'GET',\n        url: temp.length ? url.replace(/\\/*$/, temp) : url,\n        pvtData: p\n      };\n    }\n  }, {\n    key: \"getRequestQuery\",\n    value: function getRequestQuery(options, query, singles, request, request1) {\n      var param = 'param';\n      var req = request1;\n      req[options.from] = query.fromTable;\n\n      if (options.apply && query.distincts.length) {\n        req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n      }\n\n      if (!query.distincts.length && options.expand) {\n        req[options.expand] = 'onExpand' in this && 'onSelect' in singles ? DataUtil.callAdaptorFunction(this, 'onExpand', {\n          selects: DataUtil.getValue(singles.onSelect.fieldNames, query),\n          expands: query.expands\n        }, query) : query.expands;\n      }\n\n      req[options.select] = 'onSelect' in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n      req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n      req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n      req[options.skip] = 'onSkip' in singles ? DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n      req[options.take] = 'onTake' in singles ? DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n      req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n      req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n      req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n      req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n      req[param] = [];\n    }\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n\n  }, {\n    key: \"convertToQueryString\",\n    value: function convertToQueryString(request, query, dm) {\n      return ''; // this needs to be overridden\n    }\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(data, ds, query, xhr, request, changes) {\n      if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n        var handleTimeZone = DataUtil.timeZoneHandling;\n\n        if (ds && !ds.timeZoneHandling) {\n          DataUtil.timeZoneHandling = false;\n        }\n\n        data = DataUtil.parse.parseJson(data);\n        DataUtil.timeZoneHandling = handleTimeZone;\n      }\n\n      var requests = request;\n      var pvt = requests.pvtData || {};\n      var groupDs = data ? data.groupDs : [];\n\n      if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n        return query.isCountRequired ? {\n          result: [],\n          count: 0\n        } : [];\n      }\n\n      var d = JSON.parse(requests.data);\n\n      if (d && d.action === 'batch' && data && data.addedRecords) {\n        changes.addedRecords = data.addedRecords;\n        return changes;\n      }\n\n      if (data && data.d) {\n        data = data.d;\n      }\n\n      var args = {};\n\n      if (data && 'count' in data) {\n        args.count = data.count;\n      }\n\n      args.result = data && data.result ? data.result : data;\n      var isExpand = false;\n\n      if (Array.isArray(data.result) && data.result.length) {\n        var key = 'key';\n        var val = 'value';\n        var level = 'level';\n\n        if (!isNullOrUndefined(data.result[0][key])) {\n          args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);\n        }\n\n        if (query && query.lazyLoad.length && pvt.groups.length) {\n          for (var i = 0; i < query.lazyLoad.length; i++) {\n            if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {\n              var value = query.lazyLoad[i][val][level];\n\n              if (pvt.groups.length === value) {\n                isExpand = true;\n              }\n            }\n          }\n        }\n      }\n\n      if (!isExpand) {\n        this.getAggregateResult(pvt, data, args, groupDs, query);\n      }\n\n      return DataUtil.isNull(args.count) ? args.result : {\n        result: args.result,\n        count: args.count,\n        aggregates: args.aggregates\n      };\n    }\n  }, {\n    key: \"formRemoteGroupedData\",\n    value: function formRemoteGroupedData(data, level, childLevel) {\n      for (var i = 0; i < data.length; i++) {\n        if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {\n          this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);\n        }\n      }\n\n      var uid = 'GroupGuid';\n      var childLvl = 'childLevels';\n      var lvl = 'level';\n      var records = 'records';\n      data[uid] = consts$1[uid];\n      data[lvl] = level;\n      data[childLvl] = childLevel;\n      data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];\n      return data;\n    }\n  }, {\n    key: \"getGroupedRecords\",\n    value: function getGroupedRecords(data, hasRecords) {\n      var childGroupedRecords = [];\n      var records = 'records';\n\n      for (var i = 0; i < data.length; i++) {\n        if (!hasRecords) {\n          for (var j = 0; j < data[i].items.length; j++) {\n            childGroupedRecords.push(data[i].items[j]);\n          }\n        } else {\n          childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);\n        }\n      }\n\n      return childGroupedRecords;\n    }\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n\n  }, {\n    key: \"onGroup\",\n    value: function onGroup(e) {\n      this.pvt.groups = e;\n      return e;\n    }\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n\n  }, {\n    key: \"onAggregates\",\n    value: function onAggregates(e) {\n      this.pvt.aggregates = e;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n\n  }, {\n    key: \"batchRequest\",\n    value: function batchRequest(dm, changes, e, query, original) {\n      var url;\n      var key;\n      return {\n        type: 'POST',\n        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n        contentType: 'application/json; charset=utf-8',\n        dataType: 'json',\n        data: JSON.stringify(extend({}, {\n          changed: changes.changedRecords,\n          added: changes.addedRecords,\n          deleted: changes.deletedRecords,\n          action: 'batch',\n          table: e[url],\n          key: e[key]\n        }, DataUtil.getAddParams(this, dm, query)))\n      };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n\n  }, {\n    key: \"beforeSend\",\n    value: function beforeSend(dm, request) {// need to extend this method\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(dm, data, tableName, query) {\n      return {\n        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n        data: JSON.stringify(extend({}, {\n          value: data,\n          table: tableName,\n          action: 'insert'\n        }, DataUtil.getAddParams(this, dm, query)))\n      };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(dm, keyField, value, tableName, query) {\n      return {\n        type: 'POST',\n        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n        data: JSON.stringify(extend({}, {\n          key: value,\n          keyColumn: keyField,\n          table: tableName,\n          action: 'remove'\n        }, DataUtil.getAddParams(this, dm, query)))\n      };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(dm, keyField, value, tableName, query) {\n      return {\n        type: 'POST',\n        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n        data: JSON.stringify(extend({}, {\n          value: value,\n          action: 'update',\n          keyColumn: keyField,\n          key: DataUtil.getObject(keyField, value),\n          table: tableName\n        }, DataUtil.getAddParams(this, dm, query)))\n      };\n    }\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n\n  }, {\n    key: \"getFiltersFrom\",\n    value: function getFiltersFrom(data, query) {\n      var key = query.fKey;\n      var value;\n      var prop = key;\n      var pKey = query.key;\n      var predicats = [];\n\n      if (typeof data[0] !== 'object') {\n        prop = null;\n      }\n\n      for (var i = 0; i < data.length; i++) {\n        if (typeof data[0] === 'object') {\n          value = DataUtil.getObject(pKey || prop, data[i]);\n        } else {\n          value = data[i];\n        }\n\n        predicats.push(new Predicate(key, 'equal', value));\n      }\n\n      return Predicate.or(predicats);\n    }\n  }, {\n    key: \"getAggregateResult\",\n    value: function getAggregateResult(pvt, data, args, groupDs, query) {\n      var pData = data;\n\n      if (data && data.result) {\n        pData = data.result;\n      }\n\n      if (pvt && pvt.aggregates && pvt.aggregates.length) {\n        var agg = pvt.aggregates;\n        var fn;\n        var aggregateData = pData;\n        var res = {};\n\n        if (data.aggregate) {\n          aggregateData = data.aggregate;\n        }\n\n        for (var i = 0; i < agg.length; i++) {\n          fn = DataUtil.aggregates[agg[i].type];\n\n          if (fn) {\n            res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n          }\n        }\n\n        args.aggregates = res;\n      }\n\n      var key = 'key';\n      var isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);\n\n      if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {\n        var groups = pvt.groups;\n\n        for (var _i14 = 0; _i14 < groups.length; _i14++) {\n          var level = null;\n\n          if (!isNullOrUndefined(groupDs)) {\n            groupDs = DataUtil.group(groupDs, groups[_i14]);\n          }\n\n          var groupQuery = Query.filterQueries(query.queries, 'onGroup')[_i14].e;\n\n          pData = DataUtil.group(pData, groups[_i14], pvt.aggregates, level, groupDs, groupQuery.comparer);\n        }\n\n        args.result = pData;\n      }\n\n      return args;\n    }\n  }, {\n    key: \"getQueryRequest\",\n    value: function getQueryRequest(query) {\n      var req = {\n        sorts: [],\n        groups: [],\n        filters: [],\n        searches: [],\n        aggregates: []\n      };\n      req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n      req.groups = Query.filterQueries(query.queries, 'onGroup');\n      req.filters = Query.filterQueries(query.queries, 'onWhere');\n      req.searches = Query.filterQueries(query.queries, 'onSearch');\n      req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n      return req;\n    }\n  }, {\n    key: \"addParams\",\n    value: function addParams(options) {\n      var req = options.reqParams;\n\n      if (options.params.length) {\n        req.params = {};\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(options.params),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tmp = _step2.value;\n\n          if (req[tmp.key]) {\n            throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n          }\n\n          req[tmp.key] = tmp.value;\n\n          if (tmp.fn) {\n            req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n          }\n\n          req.params[tmp.key] = req[tmp.key];\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n\n  return UrlAdaptor;\n}(Adaptor);\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\n\n\nvar ODataAdaptor = /*#__PURE__*/function (_UrlAdaptor) {\n  _inherits(ODataAdaptor, _UrlAdaptor);\n\n  var _super3 = _createSuper(ODataAdaptor);\n\n  function ODataAdaptor(props) {\n    var _this3;\n\n    _classCallCheck(this, ODataAdaptor);\n\n    _this3 = _super3.call(this); // options replaced the default adaptor options\n\n    _this3.options = extend({}, _this3.options, {\n      requestType: 'get',\n      accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n      multipartAccept: 'multipart/mixed',\n      sortBy: '$orderby',\n      select: '$select',\n      skip: '$skip',\n      take: '$top',\n      count: '$inlinecount',\n      where: '$filter',\n      expand: '$expand',\n      batch: '$batch',\n      changeSet: '--changeset_',\n      batchPre: 'batch_',\n      contentId: 'Content-Id: ',\n      batchContent: 'Content-Type: multipart/mixed; boundary=',\n      changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n      updateType: 'PUT'\n    });\n    extend(_this3.options, props || {});\n    return _this3;\n  }\n\n  _createClass(ODataAdaptor, [{\n    key: \"getModuleName\",\n    value: function getModuleName() {\n      return 'ODataAdaptor';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n\n  }, {\n    key: \"onPredicate\",\n    value: function onPredicate(predicate, query, requiresCast) {\n      var returnValue = '';\n      var operator;\n      var guid;\n      var val = predicate.value;\n      var type = typeof val;\n      var field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n\n      if (val instanceof Date) {\n        val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n      }\n\n      if (type === 'string') {\n        val = encodeURIComponent(val);\n        val = '\\'' + val + '\\'';\n\n        if (requiresCast) {\n          field = 'cast(' + field + ', \\'Edm.String\\')';\n        }\n\n        if (DataUtil.parse.isGuid(val)) {\n          guid = 'guid';\n        }\n\n        if (predicate.ignoreCase) {\n          if (!guid) {\n            field = 'tolower(' + field + ')';\n          }\n\n          val = val.toLowerCase();\n        }\n      }\n\n      operator = DataUtil.odBiOperator[predicate.operator];\n\n      if (operator) {\n        returnValue += field;\n        returnValue += operator;\n\n        if (guid) {\n          returnValue += guid;\n        }\n\n        return returnValue + val;\n      }\n\n      if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n        operator = DataUtil.odv4UniOperator[predicate.operator];\n      } else {\n        operator = DataUtil.odUniOperator[predicate.operator];\n      }\n\n      if (operator === 'substringof') {\n        var temp = val;\n        val = field;\n        field = temp;\n      }\n\n      returnValue += operator + '(';\n      returnValue += field + ',';\n\n      if (guid) {\n        returnValue += guid;\n      }\n\n      returnValue += val + ')';\n      return returnValue;\n    }\n  }, {\n    key: \"addParams\",\n    value: function addParams(options) {\n      _get(_getPrototypeOf(ODataAdaptor.prototype), \"addParams\", this).call(this, options);\n\n      delete options.reqParams.params;\n    }\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n\n  }, {\n    key: \"onComplexPredicate\",\n    value: function onComplexPredicate(predicate, query, requiresCast) {\n      var res = [];\n\n      for (var i = 0; i < predicate.predicates.length; i++) {\n        res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n      }\n\n      return res.join(' ' + predicate.condition + ' ');\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n\n  }, {\n    key: \"onEachWhere\",\n    value: function onEachWhere(filter, query, requiresCast) {\n      return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n\n  }, {\n    key: \"onWhere\",\n    value: function onWhere(filters) {\n      if (this.pvt.search) {\n        filters.push(this.onEachWhere(this.pvt.search, null, true));\n      }\n\n      return filters.join(' and ');\n    }\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n\n  }, {\n    key: \"onEachSearch\",\n    value: function onEachSearch(e) {\n      if (e.fields && e.fields.length === 0) {\n        DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n      }\n\n      var filter = this.pvt.search || [];\n\n      for (var i = 0; i < e.fields.length; i++) {\n        filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n      }\n\n      this.pvt.search = filter;\n    }\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n\n  }, {\n    key: \"onSearch\",\n    value: function onSearch(e) {\n      this.pvt.search = Predicate.or(this.pvt.search);\n      return '';\n    }\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n\n  }, {\n    key: \"onEachSort\",\n    value: function onEachSort(e) {\n      var res = [];\n\n      if (e.name instanceof Array) {\n        for (var i = 0; i < e.name.length; i++) {\n          res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n      } else {\n        res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n      }\n\n      return res.join(',');\n    }\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n\n  }, {\n    key: \"onSortBy\",\n    value: function onSortBy(e) {\n      return e.reverse().join(',');\n    }\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n\n  }, {\n    key: \"onGroup\",\n    value: function onGroup(e) {\n      this.pvt.groups = e;\n      return [];\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n\n  }, {\n    key: \"onSelect\",\n    value: function onSelect(e) {\n      for (var i = 0; i < e.length; i++) {\n        e[i] = ODataAdaptor.getField(e[i]);\n      }\n\n      return e.join(',');\n    }\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n\n  }, {\n    key: \"onAggregates\",\n    value: function onAggregates(e) {\n      this.pvt.aggregates = e;\n      return '';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n\n  }, {\n    key: \"onCount\",\n    value: function onCount(e) {\n      return e === true ? 'allpages' : '';\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n\n  }, {\n    key: \"beforeSend\",\n    value: function beforeSend(dm, request, settings) {\n      if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n        request.setRequestHeader('Accept', this.options.multipartAccept);\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.overrideMimeType('text/plain; charset=x-user-defined');\n      } else {\n        request.setRequestHeader('Accept', this.options.accept);\n      }\n\n      request.setRequestHeader('DataServiceVersion', '2.0');\n      request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(data, ds, query, xhr, request, changes) {\n      var metaCheck = 'odata.metadata';\n\n      if (request && request.type === 'GET' && !this.rootUrl && data[metaCheck]) {\n        var dataUrls = data[metaCheck].split('/$metadata#');\n        this.rootUrl = dataUrls[0];\n        this.resourceTableName = dataUrls[1];\n      }\n\n      var pvtData = 'pvtData';\n\n      if (!isNullOrUndefined(data.d)) {\n        var dataCopy = query && query.isCountRequired ? data.d.results : data.d;\n        var metaData = '__metadata';\n\n        if (!isNullOrUndefined(dataCopy)) {\n          for (var i = 0; i < dataCopy.length; i++) {\n            if (!isNullOrUndefined(dataCopy[i][metaData])) {\n              delete dataCopy[i][metaData];\n            }\n          }\n        }\n      }\n\n      var pvt = request && request[pvtData];\n      var emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n\n      if (emptyAndBatch) {\n        return emptyAndBatch;\n      }\n\n      var versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n      var count = null;\n      var version = versionCheck && parseInt(versionCheck, 10) || 2;\n\n      if (query && query.isCountRequired) {\n        var oDataCount = '__count';\n\n        if (data[oDataCount] || data['odata.count']) {\n          count = data[oDataCount] || data['odata.count'];\n        }\n\n        if (data.d) {\n          data = data.d;\n        }\n\n        if (data[oDataCount] || data['odata.count']) {\n          count = data[oDataCount] || data['odata.count'];\n        }\n      }\n\n      if (version === 3 && data.value) {\n        data = data.value;\n      }\n\n      if (data.d) {\n        data = data.d;\n      }\n\n      if (version < 3 && data.results) {\n        data = data.results;\n      }\n\n      var args = {};\n      args.count = count;\n      args.result = data;\n      this.getAggregateResult(pvt, data, args, null, query);\n      return DataUtil.isNull(count) ? args.result : {\n        result: args.result,\n        count: args.count,\n        aggregates: args.aggregates\n      };\n    }\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n\n  }, {\n    key: \"convertToQueryString\",\n    value: function convertToQueryString(request, query, dm) {\n      var res = [];\n      var table = 'table';\n      var tableName = request[table] || '';\n      var format = '$format';\n      delete request[table];\n\n      if (dm.dataSource.requiresFormat) {\n        request[format] = 'json';\n      }\n\n      var keys = Object.keys(request);\n\n      for (var _i15 = 0, _keys6 = keys; _i15 < _keys6.length; _i15++) {\n        var prop = _keys6[_i15];\n        res.push(prop + '=' + request[prop]);\n      }\n\n      res = res.join('&');\n\n      if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n        return res;\n      }\n\n      return res.length ? tableName + '?' + res : tableName || '';\n    }\n  }, {\n    key: \"localTimeReplacer\",\n    value: function localTimeReplacer(key, convertObj) {\n      var _iterator3 = _createForOfIteratorHelper(!isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var prop = _step3.value;\n\n          if (convertObj[prop] instanceof Date) {\n            convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return convertObj;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(dm, data, tableName) {\n      return {\n        url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n        data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n      };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(dm, keyField, value, tableName) {\n      var url;\n\n      if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n        url = \"('\".concat(value, \"')\");\n      } else {\n        url = \"(\".concat(value, \")\");\n      }\n\n      return {\n        type: 'DELETE',\n        url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n      };\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(dm, keyField, value, tableName, query, original) {\n      if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n        value = this.compareAndRemove(value, original, keyField);\n      }\n\n      var url;\n\n      if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n        url = \"('\".concat(value[keyField], \"')\");\n      } else {\n        url = \"(\".concat(value[keyField], \")\");\n      }\n\n      return {\n        type: this.options.updateType,\n        url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n        data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n        accept: this.options.accept\n      };\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"batchRequest\",\n    value: function batchRequest(dm, changes, e, query, original) {\n      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n      var url = this.rootUrl ? this.rootUrl + '/' + this.options.batch : dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n      e.url = this.resourceTableName ? this.resourceTableName : e.url;\n      var args = {\n        url: e.url,\n        key: e.key,\n        cid: 1,\n        cSet: DataUtil.getGuid(this.options.changeSet)\n      };\n      var req = '--' + initialGuid + '\\n';\n      req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n      this.pvt.changeSet = 0;\n      req += this.generateInsertRequest(changes.addedRecords, args, dm);\n      req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n      req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n      req += args.cSet + '--\\n';\n      req += '--' + initialGuid + '--';\n      return {\n        type: 'POST',\n        url: url,\n        dataType: 'json',\n        contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n        data: req\n      };\n    }\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n\n  }, {\n    key: \"generateDeleteRequest\",\n    value: function generateDeleteRequest(arr, e, dm) {\n      if (!arr) {\n        return '';\n      }\n\n      var req = '';\n      var stat = {\n        'method': 'DELETE ',\n        'url': function url(data, i, key) {\n          var url = DataUtil.getObject(key, data[i]);\n\n          if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n            return '(' + url + ')';\n          } else if (url instanceof Date) {\n            var dateTime = data[i][key];\n            return '(' + dateTime.toJSON() + ')';\n          } else {\n            return \"('\".concat(url, \"')\");\n          }\n        },\n        'data': function data(_data2, i) {\n          return '';\n        }\n      };\n      req = this.generateBodyContent(arr, e, stat, dm);\n      return req + '\\n';\n    }\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n\n  }, {\n    key: \"generateInsertRequest\",\n    value: function generateInsertRequest(arr, e, dm) {\n      if (!arr) {\n        return '';\n      }\n\n      var req = '';\n      var stat = {\n        'method': 'POST ',\n        'url': function url(data, i, key) {\n          return '';\n        },\n        'data': function data(_data3, i) {\n          return JSON.stringify(_data3[i]) + '\\n\\n';\n        }\n      };\n      req = this.generateBodyContent(arr, e, stat, dm);\n      return req;\n    }\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n\n  }, {\n    key: \"generateUpdateRequest\",\n    value: function generateUpdateRequest(arr, e, dm, org) {\n      var _this4 = this;\n\n      if (!arr) {\n        return '';\n      }\n\n      var req = '';\n      arr.forEach(function (change) {\n        return change = _this4.compareAndRemove(change, org.filter(function (o) {\n          return DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change);\n        })[0], e.key);\n      });\n      var stat = {\n        'method': this.options.updateType + ' ',\n        'url': function url(data, i, key) {\n          if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n            return '(' + data[i][key] + ')';\n          } else if (data[i][key] instanceof Date) {\n            var date = data[i][key];\n            return '(' + date.toJSON() + ')';\n          } else {\n            return \"('\".concat(data[i][key], \"')\");\n          }\n        },\n        'data': function data(_data4, i) {\n          return JSON.stringify(_data4[i]) + '\\n\\n';\n        }\n      };\n      req = this.generateBodyContent(arr, e, stat, dm);\n      return req;\n    }\n  }, {\n    key: \"generateBodyContent\",\n    value: function generateBodyContent(arr, e, stat, dm) {\n      var req = '';\n\n      for (var i = 0; i < arr.length; i++) {\n        req += '\\n' + e.cSet + '\\n';\n        req += this.options.changeSetContent + '\\n\\n';\n        req += stat.method;\n\n        if (stat.method === 'POST ') {\n          req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n        } else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n          req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n        } else if (stat.method === 'DELETE ') {\n          req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n        }\n\n        req += 'Accept: ' + this.options.accept + '\\n';\n        req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n        req += this.options.batchChangeSetContentType + '\\n';\n\n        if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n          req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n          delete arr[i]['@odata.etag'];\n        } else {\n          req += '\\n';\n        }\n\n        req += stat.data(arr, i);\n      }\n\n      return req;\n    }\n  }, {\n    key: \"processBatchResponse\",\n    value: function processBatchResponse(data, query, xhr, request, changes) {\n      if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n        return query.isCountRequired ? {\n          result: [],\n          count: 0\n        } : [];\n      }\n\n      if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n        var guid = xhr.getResponseHeader('Content-Type');\n        var cIdx;\n        var jsonObj;\n        var d = data + '';\n        guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n        d = d.split(guid);\n\n        if (d.length < 2) {\n          return {};\n        }\n\n        d = d[1];\n        var exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n\n        if (exVal) {\n          d.replace(exVal[0], '');\n        }\n\n        var changeGuid = exVal ? exVal[1] : '';\n        d = d.split(changeGuid);\n\n        for (var i = d.length; i > -1; i--) {\n          if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n            continue;\n          }\n\n          cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n\n          if (changes.addedRecords[cIdx]) {\n            jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n            extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n          }\n        }\n\n        return changes;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"compareAndRemove\",\n    value: function compareAndRemove(data, original, key) {\n      var _this5 = this;\n\n      if (isNullOrUndefined(original)) {\n        return data;\n      }\n\n      Object.keys(data).forEach(function (prop) {\n        if (prop !== key && prop !== '@odata.etag') {\n          if (DataUtil.isPlainObject(data[prop])) {\n            _this5.compareAndRemove(data[prop], original[prop]);\n\n            var final = Object.keys(data[prop]).filter(function (data) {\n              return data !== '@odata.etag';\n            });\n\n            if (final.length === 0) {\n              delete data[prop];\n            }\n          } else if (data[prop] === original[prop]) {\n            delete data[prop];\n          } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n            delete data[prop];\n          }\n        }\n      });\n      return data;\n    }\n  }], [{\n    key: \"getField\",\n    value: function getField(prop) {\n      return prop.replace(/\\./g, '/');\n    }\n  }]);\n\n  return ODataAdaptor;\n}(UrlAdaptor);\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\n\n\nvar ODataV4Adaptor = /*#__PURE__*/function (_ODataAdaptor) {\n  _inherits(ODataV4Adaptor, _ODataAdaptor);\n\n  var _super4 = _createSuper(ODataV4Adaptor);\n\n  function ODataV4Adaptor(props) {\n    var _this6;\n\n    _classCallCheck(this, ODataV4Adaptor);\n\n    _this6 = _super4.call(this, props); // options replaced the default adaptor options\n\n    _this6.options = extend({}, _this6.options, {\n      requestType: 'get',\n      accept: 'application/json, text/javascript, */*; q=0.01',\n      multipartAccept: 'multipart/mixed',\n      sortBy: '$orderby',\n      select: '$select',\n      skip: '$skip',\n      take: '$top',\n      count: '$count',\n      search: '$search',\n      where: '$filter',\n      expand: '$expand',\n      batch: '$batch',\n      changeSet: '--changeset_',\n      batchPre: 'batch_',\n      contentId: 'Content-Id: ',\n      batchContent: 'Content-Type: multipart/mixed; boundary=',\n      changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n      updateType: 'PATCH',\n      localTime: false,\n      apply: '$apply'\n    });\n    extend(_this6.options, props || {});\n    return _this6;\n  }\n  /**\n   * @hidden\n   */\n\n\n  _createClass(ODataV4Adaptor, [{\n    key: \"getModuleName\",\n    value: function getModuleName() {\n      return 'ODataV4Adaptor';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n\n  }, {\n    key: \"onCount\",\n    value: function onCount(e) {\n      return e === true ? 'true' : '';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n\n  }, {\n    key: \"onPredicate\",\n    value: function onPredicate(predicate, query, requiresCast) {\n      var returnValue = '';\n      var val = predicate.value;\n      var isDate = val instanceof Date;\n\n      if (query instanceof Query) {\n        var queries = this.getQueryRequest(query);\n\n        for (var i = 0; i < queries.filters.length; i++) {\n          if (queries.filters[i].e.key === predicate.value) {\n            requiresCast = true;\n          }\n        }\n      }\n\n      returnValue = _get(_getPrototypeOf(ODataV4Adaptor.prototype), \"onPredicate\", this).call(this, predicate, query, requiresCast);\n\n      if (isDate) {\n        returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n      }\n\n      if (DataUtil.parse.isGuid(val)) {\n        returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n      }\n\n      return returnValue;\n    }\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n\n  }, {\n    key: \"onEachSearch\",\n    value: function onEachSearch(e) {\n      var search = this.pvt.searches || [];\n      search.push(e.key);\n      this.pvt.searches = search;\n    }\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n\n  }, {\n    key: \"onSearch\",\n    value: function onSearch(e) {\n      return this.pvt.searches.join(' OR ');\n    }\n    /**\n     * Returns the expand query string.\n     * @param  {string} e\n     */\n\n  }, {\n    key: \"onExpand\",\n    value: function onExpand(e) {\n      var selected = {};\n      var expanded = {};\n      var expands = e.expands.slice();\n      var exArr = [];\n      var selects = e.selects.filter(function (item) {\n        return item.indexOf('.') > -1;\n      });\n      selects.forEach(function (select) {\n        var splits = select.split('.');\n\n        if (!(splits[0] in selected)) {\n          selected[splits[0]] = [];\n        }\n\n        if (splits.length == 2) {\n          selected[splits[0]].push('$select=' + splits[1]);\n        } else {\n          var sel = '$select=' + splits[splits.length - 1];\n          var exp = '';\n          var close = '';\n\n          for (var i = 1; i < splits.length - 1; i++) {\n            exp = exp + '$expand=' + splits[i] + '(';\n            close = close + ')';\n          }\n\n          selected[splits[0]].push(exp + sel + close);\n        }\n      }); //Auto expand from select query\n\n      Object.keys(selected).forEach(function (expand) {\n        if (expands.indexOf(expand) === -1) {\n          expands.push(expand);\n        }\n      });\n      expands.forEach(function (expand) {\n        expanded[expand] = expand in selected ? \"\".concat(expand, \"(\").concat(selected[expand].join(';'), \")\") : expand;\n      });\n      Object.keys(expanded).forEach(function (ex) {\n        return exArr.push(expanded[ex]);\n      });\n      return exArr.join(',');\n    }\n    /**\n     * Returns the groupby query string.\n     * @param  {string} e\n     */\n\n  }, {\n    key: \"onDistinct\",\n    value: function onDistinct(distinctFields) {\n      var fields = distinctFields.map(function (field) {\n        return ODataAdaptor.getField(field);\n      }).join(',');\n      return \"groupby((\".concat(fields, \"))\");\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n\n  }, {\n    key: \"onSelect\",\n    value: function onSelect(e) {\n      return _get(_getPrototypeOf(ODataV4Adaptor.prototype), \"onSelect\", this).call(this, e.filter(function (item) {\n        return item.indexOf('.') === -1;\n      }));\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n\n  }, {\n    key: \"beforeSend\",\n    value: function beforeSend(dm, request, settings) {\n      if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n        request.setRequestHeader('Prefer', 'return=representation');\n      }\n\n      request.setRequestHeader('Accept', this.options.accept);\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(data, ds, query, xhr, request, changes) {\n      var metaName = '@odata.context';\n\n      if (request && request.type === 'GET' && !this.rootUrl && data[metaName]) {\n        var dataUrl = data[metaName].split('/$metadata#');\n        this.rootUrl = dataUrl[0];\n        this.resourceTableName = dataUrl[1];\n      }\n\n      var pvtData = 'pvtData';\n      var pvt = request && request[pvtData];\n\n      var emptyAndBatch = _get(_getPrototypeOf(ODataV4Adaptor.prototype), \"processBatchResponse\", this).call(this, data, query, xhr, request, changes);\n\n      if (emptyAndBatch) {\n        return emptyAndBatch;\n      }\n\n      var count = null;\n      var dataCount = '@odata.count';\n\n      if (query && query.isCountRequired) {\n        if (dataCount in data) {\n          count = data[dataCount];\n        }\n      }\n\n      data = !isNullOrUndefined(data.value) ? data.value : data;\n      var args = {};\n      args.count = count;\n      args.result = data;\n      this.getAggregateResult(pvt, data, args, null, query);\n      return DataUtil.isNull(count) ? args.result : {\n        result: args.result,\n        count: count,\n        aggregates: args.aggregates\n      };\n    }\n  }]);\n\n  return ODataV4Adaptor;\n}(ODataAdaptor);\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\n\n\nvar WebApiAdaptor = /*#__PURE__*/function (_ODataAdaptor2) {\n  _inherits(WebApiAdaptor, _ODataAdaptor2);\n\n  var _super5 = _createSuper(WebApiAdaptor);\n\n  function WebApiAdaptor() {\n    _classCallCheck(this, WebApiAdaptor);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(WebApiAdaptor, [{\n    key: \"getModuleName\",\n    value: function getModuleName() {\n      return 'WebApiAdaptor';\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(dm, data, tableName) {\n      return {\n        type: 'POST',\n        url: dm.dataSource.url,\n        data: JSON.stringify(data)\n      };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(dm, keyField, value, tableName) {\n      return {\n        type: 'DELETE',\n        url: dm.dataSource.url + '/' + value,\n        data: JSON.stringify(value)\n      };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(dm, keyField, value, tableName) {\n      return {\n        type: 'PUT',\n        url: dm.dataSource.url,\n        data: JSON.stringify(value)\n      };\n    }\n  }, {\n    key: \"batchRequest\",\n    value: function batchRequest(dm, changes, e) {\n      var _this7 = this;\n\n      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n      var url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n      e.url = this.resourceTableName ? this.resourceTableName : e.url;\n      var req = []; //insertion\n\n      var _loop4 = function _loop4(i, x) {\n        changes.addedRecords.forEach(function (j, d) {\n          var stat = {\n            'method': 'POST ',\n            'url': function url(data, i, key) {\n              return '';\n            },\n            'data': function data(_data5, i) {\n              return JSON.stringify(_data5[i]) + '\\n\\n';\n            }\n          };\n          req.push('--' + initialGuid);\n          req.push('Content-Type: application/http; msgtype=request', '');\n          req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n          req.push('Content-Type: ' + 'application/json; charset=utf-8');\n          req.push('Host: ' + location.host);\n          req.push('', j ? JSON.stringify(j) : '');\n        });\n      };\n\n      for (var i = 0, x = changes.addedRecords.length; i < x; i++) {\n        _loop4(i, x);\n      } //updation \n\n\n      var _loop5 = function _loop5(_i16, _x) {\n        changes.changedRecords.forEach(function (j, d) {\n          var stat = {\n            'method': _this7.options.updateType + ' ',\n            'url': function url(data, i, key) {\n              return '';\n            },\n            'data': function data(_data6, i) {\n              return JSON.stringify(_data6[i]) + '\\n\\n';\n            }\n          };\n          req.push('--' + initialGuid);\n          req.push('Content-Type: application/http; msgtype=request', '');\n          req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, _i16, e.key) + ' HTTP/1.1');\n          req.push('Content-Type: ' + 'application/json; charset=utf-8');\n          req.push('Host: ' + location.host);\n          req.push('', j ? JSON.stringify(j) : '');\n        });\n      };\n\n      for (var _i16 = 0, _x = changes.changedRecords.length; _i16 < _x; _i16++) {\n        _loop5(_i16, _x);\n      } //deletion\n\n\n      var _loop6 = function _loop6(_i17, _x2) {\n        changes.deletedRecords.forEach(function (j, d) {\n          var state = {\n            'mtd': 'DELETE ',\n            'url': function url(data, i, key) {\n              var url = DataUtil.getObject(key, data[i]);\n\n              if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                return '/' + url;\n              } else if (url instanceof Date) {\n                var datTime = data[i][key];\n                return '/' + datTime.toJSON();\n              } else {\n                return \"/'\".concat(url, \"'\");\n              }\n            },\n            'data': function data(_data7, i) {\n              return '';\n            }\n          };\n          req.push('--' + initialGuid);\n          req.push('Content-Type: application/http; msgtype=request', '');\n          req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, _i17, e.key) + ' HTTP/1.1');\n          req.push('Content-Type: ' + 'application/json; charset=utf-8');\n          req.push('Host: ' + location.host);\n          req.push('', j ? JSON.stringify(j) : '');\n        });\n      };\n\n      for (var _i17 = 0, _x2 = changes.deletedRecords.length; _i17 < _x2; _i17++) {\n        _loop6(_i17, _x2);\n      }\n\n      req.push('--' + initialGuid + '--', '');\n      return {\n        type: 'POST',\n        url: url,\n        contentType: 'multipart/mixed; boundary=' + initialGuid,\n        data: req.join('\\r\\n')\n      };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n\n  }, {\n    key: \"beforeSend\",\n    value: function beforeSend(dm, request, settings) {\n      request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(data, ds, query, xhr, request, changes) {\n      var pvtData = 'pvtData';\n      var pvt = request && request[pvtData];\n      var count = null;\n      var args = {};\n\n      if (request && request.type.toLowerCase() !== 'post') {\n        var versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        var version = versionCheck && parseInt(versionCheck, 10) || 2;\n\n        if (query && query.isCountRequired) {\n          if (!DataUtil.isNull(data.Count)) {\n            count = data.Count;\n          }\n        }\n\n        if (version < 3 && data.Items) {\n          data = data.Items;\n        }\n\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n      }\n\n      args.result = args.result || data;\n      return DataUtil.isNull(count) ? args.result : {\n        result: args.result,\n        count: args.count,\n        aggregates: args.aggregates\n      };\n    }\n  }]);\n\n  return WebApiAdaptor;\n}(ODataAdaptor);\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\n\n\nvar WebMethodAdaptor = /*#__PURE__*/function (_UrlAdaptor2) {\n  _inherits(WebMethodAdaptor, _UrlAdaptor2);\n\n  var _super6 = _createSuper(WebMethodAdaptor);\n\n  function WebMethodAdaptor() {\n    _classCallCheck(this, WebMethodAdaptor);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(WebMethodAdaptor, [{\n    key: \"processQuery\",\n    value:\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    function processQuery(dm, query, hierarchyFilters) {\n      var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n      var getData = 'data';\n      var data = DataUtil.parse.parseJson(obj[getData]);\n      var result = {};\n      var value = 'value';\n\n      if (data.param) {\n        for (var i = 0; i < data.param.length; i++) {\n          var param = data.param[i];\n          var key = Object.keys(param)[0];\n          result[key] = param[key];\n        }\n      }\n\n      result[value] = data;\n      var pvtData = 'pvtData';\n      var url = 'url';\n      return {\n        data: JSON.stringify(result),\n        url: obj[url],\n        pvtData: obj[pvtData],\n        type: 'POST',\n        contentType: 'application/json; charset=utf-8'\n      };\n    }\n  }]);\n\n  return WebMethodAdaptor;\n}(UrlAdaptor);\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\n\n\nvar RemoteSaveAdaptor = /*#__PURE__*/function (_JsonAdaptor) {\n  _inherits(RemoteSaveAdaptor, _JsonAdaptor);\n\n  var _super7 = _createSuper(RemoteSaveAdaptor);\n\n  /**\n   * @hidden\n   */\n  function RemoteSaveAdaptor() {\n    var _this8;\n\n    _classCallCheck(this, RemoteSaveAdaptor);\n\n    _this8 = _super7.call(this);\n    setValue('beforeSend', UrlAdaptor.prototype.beforeSend, _assertThisInitialized(_this8));\n    return _this8;\n  }\n\n  _createClass(RemoteSaveAdaptor, [{\n    key: \"insert\",\n    value: function insert(dm, data, tableName, query, position) {\n      this.pvt.position = position;\n      this.updateType = 'add';\n      return {\n        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n        data: JSON.stringify(extend({}, {\n          value: data,\n          table: tableName,\n          action: 'insert'\n        }, DataUtil.getAddParams(this, dm, query)))\n      };\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(dm, keyField, val, tableName, query) {\n      _get(_getPrototypeOf(RemoteSaveAdaptor.prototype), \"remove\", this).call(this, dm, keyField, val);\n\n      return {\n        type: 'POST',\n        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n        data: JSON.stringify(extend({}, {\n          key: val,\n          keyColumn: keyField,\n          table: tableName,\n          action: 'remove'\n        }, DataUtil.getAddParams(this, dm, query)))\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(dm, keyField, val, tableName, query) {\n      this.updateType = 'update';\n      this.updateKey = keyField;\n      return {\n        type: 'POST',\n        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n        data: JSON.stringify(extend({}, {\n          value: val,\n          action: 'update',\n          keyColumn: keyField,\n          key: val[keyField],\n          table: tableName\n        }, DataUtil.getAddParams(this, dm, query)))\n      };\n    }\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(data, ds, query, xhr, request, changes, e) {\n      var i;\n      var newData = request ? JSON.parse(request.data) : data;\n      data = newData.action === 'batch' ? DataUtil.parse.parseJson(data) : data;\n\n      if (this.updateType === 'add') {\n        _get(_getPrototypeOf(RemoteSaveAdaptor.prototype), \"insert\", this).call(this, ds, data, null, null, this.pvt.position);\n      }\n\n      if (this.updateType === 'update') {\n        _get(_getPrototypeOf(RemoteSaveAdaptor.prototype), \"update\", this).call(this, ds, this.updateKey, data);\n      }\n\n      this.updateType = undefined;\n\n      if (data.added) {\n        for (i = 0; i < data.added.length; i++) {\n          _get(_getPrototypeOf(RemoteSaveAdaptor.prototype), \"insert\", this).call(this, ds, data.added[i]);\n        }\n      }\n\n      if (data.changed) {\n        for (i = 0; i < data.changed.length; i++) {\n          _get(_getPrototypeOf(RemoteSaveAdaptor.prototype), \"update\", this).call(this, ds, e.key, data.changed[i]);\n        }\n      }\n\n      if (data.deleted) {\n        for (i = 0; i < data.deleted.length; i++) {\n          _get(_getPrototypeOf(RemoteSaveAdaptor.prototype), \"remove\", this).call(this, ds, e.key, data.deleted[i]);\n        }\n      }\n\n      return data;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n\n  }, {\n    key: \"batchRequest\",\n    value: function batchRequest(dm, changes, e, query, original) {\n      return {\n        type: 'POST',\n        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n        contentType: 'application/json; charset=utf-8',\n        dataType: 'json',\n        data: JSON.stringify(extend({}, {\n          changed: changes.changedRecords,\n          added: changes.addedRecords,\n          deleted: changes.deletedRecords,\n          action: 'batch',\n          table: e.url,\n          key: e.key\n        }, DataUtil.getAddParams(this, dm, query)))\n      };\n    }\n  }, {\n    key: \"addParams\",\n    value: function addParams(options) {\n      var urlParams = new UrlAdaptor();\n      urlParams.addParams(options);\n    }\n  }]);\n\n  return RemoteSaveAdaptor;\n}(JsonAdaptor);\n/**\n * Ajax Adaptor that is extended from URL Adaptor, is used for handle data operations with user defined functions.\n * @hidden\n */\n\n\nvar CustomDataAdaptor = /*#__PURE__*/function (_UrlAdaptor3) {\n  _inherits(CustomDataAdaptor, _UrlAdaptor3);\n\n  var _super8 = _createSuper(CustomDataAdaptor);\n\n  function CustomDataAdaptor(props) {\n    var _this9;\n\n    _classCallCheck(this, CustomDataAdaptor);\n\n    _this9 = _super8.call(this); // options replaced the default adaptor options\n\n    _this9.options = extend({}, _this9.options, {\n      getData: new Function(),\n      addRecord: new Function(),\n      updateRecord: new Function(),\n      deleteRecord: new Function(),\n      batchUpdate: new Function()\n    });\n    extend(_this9.options, props || {});\n    return _this9;\n  }\n\n  _createClass(CustomDataAdaptor, [{\n    key: \"getModuleName\",\n    value: function getModuleName() {\n      return 'CustomDataAdaptor';\n    }\n  }]);\n\n  return CustomDataAdaptor;\n}(UrlAdaptor);\n/**\n * The GraphqlAdaptor that is extended from URL Adaptor, is used for retrieving data from the Graphql server.\n * It interacts with the Graphql server with all the DataManager Queries and performs CRUD operations.\n * @hidden\n */\n\n\nvar GraphQLAdaptor = /*#__PURE__*/function (_UrlAdaptor4) {\n  _inherits(GraphQLAdaptor, _UrlAdaptor4);\n\n  var _super9 = _createSuper(GraphQLAdaptor);\n\n  function GraphQLAdaptor(options) {\n    var _this10;\n\n    _classCallCheck(this, GraphQLAdaptor);\n\n    _this10 = _super9.call(this);\n    _this10.opt = options;\n    _this10.schema = _this10.opt.response;\n    _this10.query = _this10.opt.query;\n    _this10.getVariables = _this10.opt.getVariables ? _this10.opt.getVariables : function () {};\n\n    _this10.getQuery = function () {\n      return _this10.query;\n    };\n\n    return _this10;\n  }\n  /**\n   * Process the JSON data based on the provided queries.\n   * @param  {DataManager} dm\n   * @param  {Query} query?\n   */\n\n\n  _createClass(GraphQLAdaptor, [{\n    key: \"getModuleName\",\n    value: function getModuleName() {\n      return 'GraphQLAdaptor';\n    }\n  }, {\n    key: \"processQuery\",\n    value: function processQuery(datamanager, query) {\n      var urlQuery = _get(_getPrototypeOf(GraphQLAdaptor.prototype), \"processQuery\", this).apply(this, arguments);\n\n      var dm = JSON.parse(urlQuery.data); // constructing GraphQL parameters\n\n      var keys = ['skip', 'take', 'sorted', 'table', 'select', 'where', 'search', 'requiresCounts', 'aggregates', 'params'];\n      var temp = {};\n      var str = 'searchwhereparams';\n      keys.filter(function (e) {\n        temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];\n      });\n      var vars = this.getVariables() || {};\n      vars['datamanager'] = temp;\n      var data = JSON.stringify({\n        query: this.getQuery(),\n        variables: vars\n      });\n      urlQuery.data = data;\n      return urlQuery;\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @returns DataResult\n     */\n\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(resData, ds, query, xhr, request) {\n      var res = resData;\n      var count;\n      var aggregates;\n      var result = getValue(this.schema.result, res.data);\n\n      if (this.schema.count) {\n        count = getValue(this.schema.count, res.data);\n      }\n\n      if (this.schema.aggregates) {\n        aggregates = getValue(this.schema.aggregates, res.data);\n        aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;\n      }\n\n      var pvt = request.pvtData || {};\n      var args = {\n        result: result,\n        aggregates: aggregates\n      };\n      var data = args;\n\n      if (pvt && pvt.groups && pvt.groups.length) {\n        this.getAggregateResult(pvt, data, args, null, query);\n      }\n\n      return !isNullOrUndefined(count) ? {\n        result: args.result,\n        count: count,\n        aggregates: aggregates\n      } : args.result;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert() {\n      var inserted = _get(_getPrototypeOf(GraphQLAdaptor.prototype), \"insert\", this).apply(this, arguments);\n\n      return this.generateCrudData(inserted, 'insert');\n    }\n    /**\n     * Prepare and returns request body which is used to update a new record in the table.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      var inserted = _get(_getPrototypeOf(GraphQLAdaptor.prototype), \"update\", this).apply(this, arguments);\n\n      return this.generateCrudData(inserted, 'update');\n    }\n    /**\n     * Prepare and returns request body which is used to remove a new record in the table.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var inserted = _get(_getPrototypeOf(GraphQLAdaptor.prototype), \"remove\", this).apply(this, arguments);\n\n      return this.generateCrudData(inserted, 'remove');\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     * @param  {Query} query\n     * @param  {Object} original\n     */\n\n  }, {\n    key: \"batchRequest\",\n    value: function batchRequest(dm, changes, e, query, original) {\n      var batch = _get(_getPrototypeOf(GraphQLAdaptor.prototype), \"batchRequest\", this).apply(this, arguments);\n\n      var bData = JSON.parse(batch.data);\n      bData.key = e.key;\n      batch.data = JSON.stringify(bData);\n      return this.generateCrudData(batch, 'batch');\n    }\n  }, {\n    key: \"generateCrudData\",\n    value: function generateCrudData(crudData, action) {\n      var parsed = JSON.parse(crudData.data);\n      crudData.data = JSON.stringify({\n        query: this.opt.getMutation(action),\n        variables: parsed\n      });\n      return crudData;\n    }\n  }]);\n\n  return GraphQLAdaptor;\n}(UrlAdaptor);\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\n\n\nvar CacheAdaptor = /*#__PURE__*/function (_UrlAdaptor5) {\n  _inherits(CacheAdaptor, _UrlAdaptor5);\n\n  var _super10 = _createSuper(CacheAdaptor);\n\n  /**\n   * Constructor for CacheAdaptor class.\n   * @param  {CacheAdaptor} adaptor?\n   * @param  {number} timeStamp?\n   * @param  {number} pageSize?\n   * @hidden\n   */\n  function CacheAdaptor(adaptor, timeStamp, pageSize) {\n    var _this11;\n\n    _classCallCheck(this, CacheAdaptor);\n\n    _this11 = _super10.call(this);\n    _this11.isCrudAction = false;\n    _this11.isInsertAction = false;\n\n    if (!isNullOrUndefined(adaptor)) {\n      _this11.cacheAdaptor = adaptor;\n    }\n\n    _this11.pageSize = pageSize;\n    _this11.guidId = DataUtil.getGuid('cacheAdaptor');\n    var obj = {\n      keys: [],\n      results: []\n    };\n    window.localStorage.setItem(_this11.guidId, JSON.stringify(obj));\n    var guid = _this11.guidId;\n\n    if (!isNullOrUndefined(timeStamp)) {\n      setInterval(function () {\n        var data;\n        data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n        var forDel = [];\n\n        for (var i = 0; i < data.results.length; i++) {\n          var currentTime = +new Date();\n          var requestTime = +new Date(data.results[i].timeStamp);\n          data.results[i].timeStamp = currentTime - requestTime;\n\n          if (currentTime - requestTime > timeStamp) {\n            forDel.push(i);\n          }\n        }\n\n        for (var _i18 = 0; _i18 < forDel.length; _i18++) {\n          data.results.splice(forDel[_i18], 1);\n          data.keys.splice(forDel[_i18], 1);\n        }\n\n        window.localStorage.removeItem(guid);\n        window.localStorage.setItem(guid, JSON.stringify(data));\n      }, timeStamp);\n    }\n\n    return _this11;\n  }\n  /**\n   * It will generate the key based on the URL when we send a request to server.\n   * @param  {string} url\n   * @param  {Query} query?\n   * @hidden\n   */\n\n\n  _createClass(CacheAdaptor, [{\n    key: \"generateKey\",\n    value: function generateKey(url, query) {\n      var queries = this.getQueryRequest(query);\n      var singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n      var key = url;\n      var page = 'onPage';\n\n      if (page in singles) {\n        key += singles[page].pageIndex;\n      }\n\n      queries.sorts.forEach(function (obj) {\n        key += obj.e.direction + obj.e.fieldName;\n      });\n      queries.groups.forEach(function (obj) {\n        key += obj.e.fieldName;\n      });\n      queries.searches.forEach(function (obj) {\n        key += obj.e.searchKey;\n      });\n\n      for (var filter = 0; filter < queries.filters.length; filter++) {\n        var currentFilter = queries.filters[filter];\n\n        if (currentFilter.e.isComplex) {\n          var newQuery = query.clone();\n          newQuery.queries = [];\n\n          for (var i = 0; i < currentFilter.e.predicates.length; i++) {\n            newQuery.queries.push({\n              fn: 'onWhere',\n              e: currentFilter.e.predicates[i],\n              filter: query.queries.filter\n            });\n          }\n\n          key += currentFilter.e.condition + this.generateKey(url, newQuery);\n        } else {\n          key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n        }\n      }\n\n      return key;\n    }\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n\n  }, {\n    key: \"processQuery\",\n    value: function processQuery(dm, query, hierarchyFilters) {\n      var key = this.generateKey(dm.dataSource.url, query);\n      var cachedItems;\n      cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n      var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n\n      if (data != null && !this.isCrudAction && !this.isInsertAction) {\n        return data;\n      }\n\n      this.isCrudAction = null;\n      this.isInsertAction = null;\n      return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(data, ds, query, xhr, request, changes) {\n      if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post') {\n        return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n      }\n\n      data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n      var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n      var obj = {};\n      obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n      var index = obj.keys.indexOf(key);\n\n      if (index !== -1) {\n        obj.results.splice(index, 1);\n        obj.keys.splice(index, 1);\n      }\n\n      obj.results[obj.keys.push(key) - 1] = {\n        keys: key,\n        result: data.result,\n        timeStamp: new Date(),\n        count: data.count\n      };\n\n      while (obj.results.length > this.pageSize) {\n        obj.results.splice(0, 1);\n        obj.keys.splice(0, 1);\n      }\n\n      window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n      return data;\n    }\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n\n  }, {\n    key: \"beforeSend\",\n    value: function beforeSend(dm, request, settings) {\n      if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === 'post') {\n        request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n      }\n\n      if (!dm.dataSource.crossDomain) {\n        request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n      }\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(dm, keyField, value, tableName) {\n      this.isCrudAction = true;\n      return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(dm, data, tableName) {\n      this.isInsertAction = true;\n      return this.cacheAdaptor.insert(dm, data, tableName);\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(dm, keyField, value, tableName) {\n      this.isCrudAction = true;\n      return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n\n  }, {\n    key: \"batchRequest\",\n    value: function batchRequest(dm, changes, e) {\n      return this.cacheAdaptor.batchRequest(dm, changes, e);\n    }\n  }]);\n\n  return CacheAdaptor;\n}(UrlAdaptor);\n/**\n * DataManager is used to manage and manipulate relational data.\n */\n\n\nvar DataManager = /*#__PURE__*/function () {\n  /**\n   * Constructor for DataManager class\n   * @param  {DataOptions|JSON[]} dataSource?\n   * @param  {Query} query?\n   * @param  {AdaptorOptions|string} adaptor?\n   * @hidden\n   */\n  function DataManager(dataSource, query, adaptor) {\n    var _this12 = this;\n\n    _classCallCheck(this, DataManager);\n\n    /** @hidden */\n    this.dateParse = true;\n    /** @hidden */\n\n    this.timeZoneHandling = true;\n    this.requests = [];\n\n    if (!dataSource && !this.dataSource) {\n      dataSource = [];\n    }\n\n    adaptor = adaptor || dataSource.adaptor;\n\n    if (dataSource && dataSource.timeZoneHandling === false) {\n      this.timeZoneHandling = dataSource.timeZoneHandling;\n    }\n\n    var data;\n\n    if (dataSource instanceof Array) {\n      data = {\n        json: dataSource,\n        offline: true\n      };\n    } else if (typeof dataSource === 'object') {\n      if (!dataSource.json) {\n        dataSource.json = [];\n      }\n\n      data = {\n        url: dataSource.url,\n        insertUrl: dataSource.insertUrl,\n        removeUrl: dataSource.removeUrl,\n        updateUrl: dataSource.updateUrl,\n        crudUrl: dataSource.crudUrl,\n        batchUrl: dataSource.batchUrl,\n        json: dataSource.json,\n        headers: dataSource.headers,\n        accept: dataSource.accept,\n        data: dataSource.data,\n        timeTillExpiration: dataSource.timeTillExpiration,\n        cachingPageSize: dataSource.cachingPageSize,\n        enableCaching: dataSource.enableCaching,\n        requestType: dataSource.requestType,\n        key: dataSource.key,\n        crossDomain: dataSource.crossDomain,\n        jsonp: dataSource.jsonp,\n        dataType: dataSource.dataType,\n        offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ? false : dataSource.url ? false : true,\n        requiresFormat: dataSource.requiresFormat\n      };\n    } else {\n      DataUtil.throwError('DataManager: Invalid arguments');\n    }\n\n    if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n      data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n    }\n\n    if (data.dataType === undefined) {\n      data.dataType = 'json';\n    }\n\n    this.dataSource = data;\n    this.defaultQuery = query;\n\n    if (data.url && data.offline && !data.json.length) {\n      this.isDataAvailable = false;\n      this.adaptor = adaptor || new ODataAdaptor();\n      this.dataSource.offline = false;\n      this.ready = this.executeQuery(query || new Query());\n      this.ready.then(function (e) {\n        _this12.dataSource.offline = true;\n        _this12.isDataAvailable = true;\n        data.json = e.result;\n        _this12.adaptor = new JsonAdaptor();\n      });\n    } else {\n      this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n    }\n\n    if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n      data.jsonp = 'callback';\n    }\n\n    this.adaptor = adaptor || this.adaptor;\n\n    if (data.enableCaching) {\n      this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n    }\n\n    return this;\n  }\n  /**\n   * Overrides DataManager's default query with given query.\n   * @param  {Query} query - Defines the new default query.\n   */\n\n\n  _createClass(DataManager, [{\n    key: \"setDefaultQuery\",\n    value: function setDefaultQuery(query) {\n      this.defaultQuery = query;\n      return this;\n    }\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n\n  }, {\n    key: \"executeLocal\",\n    value: function executeLocal(query) {\n      if (!this.defaultQuery && !(query instanceof Query)) {\n        DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n      }\n\n      if (!this.dataSource.json) {\n        DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n      }\n\n      query = query || this.defaultQuery;\n      var result = this.adaptor.processQuery(this, query);\n\n      if (query.subQuery) {\n        var from = query.subQuery.fromTable;\n        var lookup = query.subQuery.lookups;\n        var res = query.isCountRequired ? result.result : result;\n\n        if (lookup && lookup instanceof Array) {\n          DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n        }\n\n        for (var j = 0; j < res.length; j++) {\n          if (res[j][from] instanceof Array) {\n            res[j] = extend({}, {}, res[j]);\n            res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n          }\n        }\n      }\n\n      return this.adaptor.processResponse(result, this, query);\n    }\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n\n  }, {\n    key: \"executeQuery\",\n    value: function executeQuery(query, done, fail, always) {\n      var _this13 = this;\n\n      var makeRequest = 'makeRequest';\n\n      if (typeof query === 'function') {\n        always = fail;\n        fail = done;\n        done = query;\n        query = null;\n      }\n\n      if (!query) {\n        query = this.defaultQuery;\n      }\n\n      if (!(query instanceof Query)) {\n        DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n      }\n\n      var deffered = new Deferred();\n      var args = {\n        query: query\n      };\n\n      if (!this.dataSource.offline && this.dataSource.url !== undefined && this.dataSource.url !== '' || !isNullOrUndefined(this.adaptor[makeRequest]) || this.isCustomDataAdaptor(this.adaptor)) {\n        var result = this.adaptor.processQuery(this, query);\n\n        if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n          this.adaptor[makeRequest](result, deffered, args, query);\n        } else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {\n          this.makeRequest(result, deffered, args, query);\n        } else {\n          args = DataManager.getDeferedArgs(query, result, args);\n          deffered.resolve(args);\n        }\n      } else {\n        DataManager.nextTick(function () {\n          var res = _this13.executeLocal(query);\n\n          args = DataManager.getDeferedArgs(query, res, args);\n          deffered.resolve(args);\n        });\n      }\n\n      if (done || fail) {\n        deffered.promise.then(done, fail);\n      }\n\n      if (always) {\n        deffered.promise.then(always, always);\n      }\n\n      return deffered.promise;\n    }\n  }, {\n    key: \"extendRequest\",\n    value: function extendRequest(url, fnSuccess, fnFail) {\n      return extend({}, {\n        type: 'GET',\n        dataType: this.dataSource.dataType,\n        crossDomain: this.dataSource.crossDomain,\n        jsonp: this.dataSource.jsonp,\n        cache: true,\n        processData: false,\n        onSuccess: fnSuccess,\n        onFailure: fnFail\n      }, url);\n    } // tslint:disable-next-line:max-func-body-length\n\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(url, deffered, args, query) {\n      var _this14 = this;\n\n      var isSelector = !!query.subQuerySelector;\n\n      var fnFail = function fnFail(e) {\n        args.error = e;\n        deffered.reject(args);\n      };\n\n      var process = function process(data, count, xhr, request, actual, aggregates, virtualSelectRecords) {\n        args.xhr = xhr;\n        args.count = count ? parseInt(count.toString(), 10) : 0;\n        args.result = data;\n        args.request = request;\n        args.aggregates = aggregates;\n        args.actual = actual;\n        args.virtualSelectRecords = virtualSelectRecords;\n        deffered.resolve(args);\n      };\n\n      var fnQueryChild = function fnQueryChild(data, selector) {\n        var subDeffer = new Deferred();\n        var childArgs = {\n          parent: args\n        };\n        query.subQuery.isChild = true;\n\n        var subUrl = _this14.adaptor.processQuery(_this14, query.subQuery, data ? _this14.adaptor.processResponse(data) : selector);\n\n        var childReq = _this14.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n\n        if (!isSelector) {\n          subDeffer.then(function (subData) {\n            if (data) {\n              DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n              process(data, subData.count, subData.xhr);\n            }\n          }, fnFail);\n        }\n\n        return childReq;\n      };\n\n      var fnSuccess = function fnSuccess(data, request) {\n        if (_this14.isGraphQLAdaptor(_this14.adaptor)) {\n          if (!isNullOrUndefined(data['errors'])) {\n            return fnFail(data['errors'], request);\n          }\n        }\n\n        if (_this14.isCustomDataAdaptor(_this14.adaptor)) {\n          request = extend({}, _this14.ajaxReqOption, request);\n        }\n\n        if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && _this14.dateParse) {\n          data = DataUtil.parse.parseJson(data);\n        }\n\n        var result = _this14.adaptor.processResponse(data, _this14, query, request.httpRequest, request);\n\n        var count = 0;\n        var aggregates = null;\n        var virtualSelectRecords = 'virtualSelectRecords';\n        var virtualRecords = data[virtualSelectRecords];\n\n        if (query.isCountRequired) {\n          count = result.count;\n          aggregates = result.aggregates;\n          result = result.result;\n        }\n\n        if (!query.subQuery) {\n          process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n          return;\n        }\n\n        if (!isSelector) {\n          fnQueryChild(result, request);\n        }\n      };\n\n      var req = this.extendRequest(url, fnSuccess, fnFail);\n\n      if (!this.isCustomDataAdaptor(this.adaptor)) {\n        var ajax = new Ajax(req);\n\n        ajax.beforeSend = function () {\n          _this14.beforeSend(ajax.httpRequest, ajax);\n        };\n\n        req = ajax.send();\n        req.catch(function (e) {\n          return true;\n        }); // to handle failure remote requests.        \n\n        this.requests.push(ajax);\n      } else {\n        this.ajaxReqOption = req;\n        var request = req;\n        this.adaptor.options.getData({\n          data: request.data,\n          onSuccess: request.onSuccess,\n          onFailure: request.onFailure\n        });\n      }\n\n      if (isSelector) {\n        var promise;\n        var res = query.subQuerySelector.call(this, {\n          query: query.subQuery,\n          parent: query\n        });\n\n        if (res && res.length) {\n          promise = Promise.all([req, fnQueryChild(null, res)]);\n          promise.then(function () {\n            var result = arguments.length <= 0 ? undefined : arguments[0];\n\n            var pResult = _this14.adaptor.processResponse(result[0], _this14, query, _this14.requests[0].httpRequest, _this14.requests[0]);\n\n            var count = 0;\n\n            if (query.isCountRequired) {\n              count = pResult.count;\n              pResult = pResult.result;\n            }\n\n            var cResult = _this14.adaptor.processResponse(result[1], _this14, query.subQuery, _this14.requests[1].httpRequest, _this14.requests[1]);\n\n            count = 0;\n\n            if (query.subQuery.isCountRequired) {\n              count = cResult.count;\n              cResult = cResult.result;\n            }\n\n            DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n            isSelector = false;\n            process(pResult, count, _this14.requests[0].httpRequest);\n          });\n        } else {\n          isSelector = false;\n        }\n      }\n\n      return req;\n    }\n  }, {\n    key: \"beforeSend\",\n    value: function beforeSend(request, settings) {\n      this.adaptor.beforeSend(this, request, settings);\n      var headers = this.dataSource.headers;\n      var props;\n\n      for (var i = 0; headers && i < headers.length; i++) {\n        props = [];\n        var keys = Object.keys(headers[i]);\n\n        for (var _i19 = 0, _keys7 = keys; _i19 < _keys7.length; _i19++) {\n          var prop = _keys7[_i19];\n          props.push(prop);\n          request.setRequestHeader(prop, headers[i][prop]);\n        }\n      }\n    }\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n\n  }, {\n    key: \"saveChanges\",\n    value: function saveChanges(changes, key, tableName, query, original) {\n      var _this15 = this;\n\n      if (tableName instanceof Query) {\n        query = tableName;\n        tableName = null;\n      }\n\n      var args = {\n        url: tableName,\n        key: key || this.dataSource.key\n      };\n      var req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n      var doAjaxRequest = 'doAjaxRequest';\n\n      if (this.dataSource.offline) {\n        return req;\n      }\n\n      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n        return this.adaptor[doAjaxRequest](req);\n      } else if (!this.isCustomDataAdaptor(this.adaptor)) {\n        var deff = new Deferred();\n        var ajax = new Ajax(req);\n\n        ajax.beforeSend = function () {\n          _this15.beforeSend(ajax.httpRequest, ajax);\n        };\n\n        ajax.onSuccess = function (data, request) {\n          if (_this15.isGraphQLAdaptor(_this15.adaptor)) {\n            if (!isNullOrUndefined(data['errors'])) {\n              ajax.onFailure(JSON.stringify(data['errors']));\n            }\n          }\n\n          deff.resolve(_this15.adaptor.processResponse(data, _this15, null, request.httpRequest, request, changes, args));\n        };\n\n        ajax.onFailure = function (e) {\n          deff.reject([{\n            error: e\n          }]);\n        };\n\n        ajax.send().catch(function (e) {\n          return true;\n        }); // to handle the failure requests.        \n\n        return deff.promise;\n      } else {\n        return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);\n      }\n    }\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(data, tableName, query, position) {\n      if (tableName instanceof Query) {\n        query = tableName;\n        tableName = null;\n      }\n\n      var req = this.adaptor.insert(this, data, tableName, query, position);\n      var doAjaxRequest = 'doAjaxRequest';\n\n      if (this.dataSource.offline) {\n        return req;\n      }\n\n      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n        return this.adaptor[doAjaxRequest](req);\n      } else {\n        return this.doAjaxRequest(req, this.adaptor.options.addRecord);\n      }\n    }\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(keyField, value, tableName, query) {\n      if (typeof value === 'object') {\n        value = DataUtil.getObject(keyField, value);\n      }\n\n      if (tableName instanceof Query) {\n        query = tableName;\n        tableName = null;\n      }\n\n      var res = this.adaptor.remove(this, keyField, value, tableName, query);\n      var doAjaxRequest = 'doAjaxRequest';\n\n      if (this.dataSource.offline) {\n        return res;\n      }\n\n      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n        return this.adaptor[doAjaxRequest](res);\n      } else {\n        var remove = this.adaptor.options.deleteRecord;\n        return this.doAjaxRequest(res, remove);\n      }\n    }\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(keyField, value, tableName, query, original) {\n      if (tableName instanceof Query) {\n        query = tableName;\n        tableName = null;\n      }\n\n      var res = this.adaptor.update(this, keyField, value, tableName, query, original);\n      var doAjaxRequest = 'doAjaxRequest';\n\n      if (this.dataSource.offline) {\n        return res;\n      }\n\n      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n        return this.adaptor[doAjaxRequest](res);\n      } else {\n        var update = this.adaptor.options.updateRecord;\n        return this.doAjaxRequest(res, update);\n      }\n    }\n  }, {\n    key: \"isCustomDataAdaptor\",\n    value: function isCustomDataAdaptor(dataSource) {\n      return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'CustomDataAdaptor';\n    }\n  }, {\n    key: \"isGraphQLAdaptor\",\n    value: function isGraphQLAdaptor(dataSource) {\n      return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'GraphQLAdaptor';\n    }\n  }, {\n    key: \"successFunc\",\n    value: function successFunc(record, request) {\n      if (this.isGraphQLAdaptor(this.adaptor)) {\n        var data = JSON.parse(record);\n\n        if (!isNullOrUndefined(data['errors'])) {\n          this.failureFunc(JSON.stringify(data['errors']));\n        }\n      }\n\n      if (this.isCustomDataAdaptor(this.adaptor)) {\n        request = extend({}, this.ajaxReqOption, request);\n      }\n\n      try {\n        DataUtil.parse.parseJson(record);\n      } catch (e) {\n        record = [];\n      }\n\n      record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n      this.ajaxDeffered.resolve(record);\n    }\n  }, {\n    key: \"failureFunc\",\n    value: function failureFunc(e) {\n      this.ajaxDeffered.reject([{\n        error: e\n      }]);\n    }\n  }, {\n    key: \"doAjaxRequest\",\n    value: function doAjaxRequest(res, ajaxFunc) {\n      var _this16 = this;\n\n      res = extend({}, {\n        type: 'POST',\n        contentType: 'application/json; charset=utf-8',\n        processData: false\n      }, res);\n      this.ajaxDeffered = new Deferred();\n\n      if (!this.isCustomDataAdaptor(this.adaptor)) {\n        var ajax = new Ajax(res);\n\n        ajax.beforeSend = function () {\n          _this16.beforeSend(ajax.httpRequest, ajax);\n        };\n\n        ajax.onSuccess = this.successFunc.bind(this);\n        ajax.onFailure = this.failureFunc.bind(this);\n        ajax.send().catch(function (e) {\n          return true;\n        }); // to handle the failure requests.\n      } else {\n        this.ajaxReqOption = res;\n        ajaxFunc.call(this, {\n          data: res.data,\n          onSuccess: this.successFunc.bind(this),\n          onFailure: this.failureFunc.bind(this)\n        });\n      }\n\n      return this.ajaxDeffered.promise;\n    }\n  }], [{\n    key: \"getDeferedArgs\",\n    value: function getDeferedArgs(query, result, args) {\n      if (query.isCountRequired) {\n        args.result = result.result;\n        args.count = result.count;\n        args.aggregates = result.aggregates;\n      } else {\n        args.result = result;\n      }\n\n      return args;\n    }\n  }, {\n    key: \"nextTick\",\n    value: function nextTick(fn) {\n      (window.setImmediate || window.setTimeout)(fn, 0);\n    }\n  }]);\n\n  return DataManager;\n}();\n/**\n * Deferred is used to handle asynchronous operation.\n */\n\n\nvar Deferred = function Deferred() {\n  var _this17 = this;\n\n  _classCallCheck(this, Deferred);\n\n  /**\n   * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n   */\n  this.promise = new Promise(function (resolve, reject) {\n    _this17.resolve = resolve;\n    _this17.reject = reject;\n  });\n  /**\n   * Defines the callback function triggers when the Deferred object is resolved.\n   */\n\n  this.then = this.promise.then.bind(this.promise);\n  /**\n   * Defines the callback function triggers when the Deferred object is rejected.\n   */\n\n  this.catch = this.promise.catch.bind(this.promise);\n};\n/**\n * Data modules\n */\n\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil };","map":{"version":3,"sources":["D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@syncfusion/ej2-data/dist/es6/ej2-data.es2015.js"],"names":["Ajax","extend","getValue","isNullOrUndefined","merge","setValue","Query","from","subQuery","isChild","distincts","queries","key","fKey","fromTable","Array","lookups","expands","sortedColumns","groupedColumns","params","lazyLoad","field","dataManager","done","fail","always","executeQuery","DataUtil","throwError","executeLocal","cloned","slice","subQuerySelector","isCountRequired","tableName","value","push","fn","fields","call","tables","fieldName","operator","ignoreCase","ignoreAccent","toLowerCase","predicate","Predicate","e","searchKey","fieldNames","comparer","fnOperators","isFromGroup","sortByForeignKey","direction","order","sorts","temp","endsWith","replace","fnSort","filterQueries","i","length","j","sortBy","format","pageIndex","pageSize","start","end","nos","query","selectorFn","type","name","filter","q","singles","filtered","indexOf","res","isComplex","processOperator","condition","predicates","apply","combine","record","isAnd","ret","getObject","validate","p","toJson","args","combinePredicates","json","len","fromJSONData","pred","preds","result","consts","GroupGuid","inst","input","substr","fnAscending","fnDescending","x","y","undefined","localeCompare","obj","newObj","jsonArray","newData","extractFields","aggregates","level","groupDs","isLazyLoad","jsonData","guid","indx","items","group","count","childLevels","grouped","groupedArray","records","val","getVal","tempObj","aggs","source","lookup","pKey","grp","fKeyData","prefix","getFieldList","copyObj","keys","Object","prop","nameSpace","splits","split","toString","fromObj","ds","middle","parseInt","left","right","sort","newValue","map","diacritics","join","current","shift","array","index","adaptor","fnName","param1","param2","adp","dm","req","callAdaptorFunction","reqParams","constructor","xhr","request","window","hexs","rand","crypto","arr","Uint8Array","getRandomValues","Math","random","keyVal","castRequired","requiresCompleteRecord","tmp","forEach","data","prepareQuery","sampledata","DataManager","requiresCounts","requiresCount","returnValue","JSON","stringify","select","where","parse","parseJson","predicateList","concat","getPredicate","or","and","search","aggregate","sorted","skip","take","mainPred","childPred","cpre","serverTimezoneOffset","timeZoneHandling","error","Error","message","stack","sum","isNaN","average","min","getItemFromComparer","max","truecount","falsecount","operatorSymbols","odBiOperator","odUniOperator","odv4UniOperator","equal","actual","expected","ignoreDiacritics","notequal","lessthan","greaterthan","lessthanorequal","greaterthanorequal","contains","notnull","isnull","startswith","startsWith","endswith","processSymbols","jsonText","jsonReviver","iterateAndReviveArray","iterateAndReviveJson","test","ms","exec","offSet","dateParse","toTimeZone","Date","isUTC","utcFormat","hrs","mins","setHours","getHours","getMinutes","addSelfOffset","isJson","isGuid","regex","match","replacer","isPlainObject","jsonReplacer","arrayReplacer","d","toJSON","date","jsonDateReplacer","getTimezoneOffset","toUTC","offset","utc","unix","toLocalTime","datefn","timeZone","differenceString","localtimefn","num","norm","floor","abs","getFullYear","getMonth","getDate","getSeconds","consts$1","Adaptor","options","requestType","expand","dataSource","pvt","JsonAdaptor","countFlg","keyCount","page","agg","lazyLoadData","lazyLoadGroup","getAggregate","onDemandGroupInfo","onWhere","formGroupResult","onPage","uid","childLevel","aggQuery","changes","deletedRecordsLen","deletedRecords","addedRecords","insert","changedRecords","update","remove","fnCompare","size","position","splice","keyField","UrlAdaptor","hierarchyFilters","getQueryRequest","filterQueryLists","url","groups","filters","searches","onRange","getFiltersFrom","getModuleName","isNull","getRequestQuery","pvtData","contentType","convertToQueryString","request1","param","selects","onSelect","onSkip","onTake","getResponseHeader","handleTimeZone","requests","action","isExpand","isArray","formRemoteGroupedData","getAggregateResult","childLvl","lvl","getGroupedRecords","hasRecords","childGroupedRecords","original","batchUrl","crudUrl","removeUrl","dataType","changed","added","deleted","table","getAddParams","insertUrl","keyColumn","updateUrl","predicats","pData","aggregateData","isServerGrouping","groupQuery","ODataAdaptor","props","accept","multipartAccept","batch","changeSet","batchPre","contentId","batchContent","changeSetContent","batchChangeSetContentType","updateType","requiresCast","getField","encodeURIComponent","onEachWhere","onComplexPredicate","onPredicate","reverse","settings","setRequestHeader","overrideMimeType","metaCheck","rootUrl","dataUrls","resourceTableName","dataCopy","results","metaData","emptyAndBatch","processBatchResponse","versionCheck","version","oDataCount","requiresFormat","convertObj","localTime","localTimeReplacer","compareAndRemove","initialGuid","getGuid","cid","cSet","generateInsertRequest","generateUpdateRequest","generateDeleteRequest","stat","dateTime","generateBodyContent","org","change","o","method","cIdx","jsonObj","substring","exVal","changeGuid","processResponse","final","valueOf","ODataV4Adaptor","isDate","selected","expanded","exArr","item","sel","exp","close","ex","distinctFields","metaName","dataUrl","dataCount","WebApiAdaptor","location","host","state","datTime","Count","Items","WebMethodAdaptor","processQuery","getData","RemoteSaveAdaptor","prototype","beforeSend","updateKey","urlParams","addParams","CustomDataAdaptor","Function","addRecord","updateRecord","deleteRecord","batchUpdate","GraphQLAdaptor","opt","schema","response","getVariables","getQuery","datamanager","urlQuery","arguments","str","vars","variables","resData","inserted","generateCrudData","bData","crudData","parsed","getMutation","CacheAdaptor","timeStamp","isCrudAction","isInsertAction","cacheAdaptor","guidId","localStorage","setItem","setInterval","getItem","forDel","currentTime","requestTime","removeItem","currentFilter","newQuery","clone","generateKey","cachedItems","crossDomain","batchRequest","offline","headers","timeTillExpiration","cachingPageSize","enableCaching","jsonp","isCors","defaultQuery","isDataAvailable","ready","then","buildHierarchy","using","makeRequest","deffered","Deferred","isCustomDataAdaptor","getDeferedArgs","resolve","nextTick","promise","fnSuccess","fnFail","cache","processData","onSuccess","onFailure","isSelector","reject","process","virtualSelectRecords","fnQueryChild","selector","subDeffer","childArgs","parent","subUrl","childReq","subData","isGraphQLAdaptor","ajaxReqOption","httpRequest","virtualRecords","extendRequest","ajax","send","catch","Promise","all","pResult","cResult","doAjaxRequest","deff","failureFunc","ajaxDeffered","ajaxFunc","successFunc","bind","setImmediate","setTimeout"],"mappings":"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","sourcesContent":["import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nclass Query {\n    /**\n     * Constructor for Query class.\n     * @param  {string|string[]} from?\n     * @hidden\n     */\n    constructor(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        /** @hidden */\n        this.distincts = [];\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        this.lazyLoad = [];\n        return this;\n    }\n    /**\n     * Sets the primary key.\n     * @param  {string} field - Defines the column field.\n     */\n    setKey(field) {\n        this.key = field;\n        return this;\n    }\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    using(dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    }\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    execute(dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    executeLocal(dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Creates deep copy of the Query object.\n     */\n    clone() {\n        let cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        cloned.distincts = this.distincts.slice(0);\n        cloned.lazyLoad = this.lazyLoad.slice(0);\n        return cloned;\n    }\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n    from(tableName) {\n        this.fromTable = tableName;\n        return this;\n    }\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    addParams(key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    }\n    /**\n     * @hidden\n     */\n    distinct(fields) {\n        if (typeof fields === 'string') {\n            this.distincts = [].slice.call([fields], 0);\n        }\n        else {\n            this.distincts = fields.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n    expand(tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n        operator = operator ? (operator).toLowerCase() : null;\n        let predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    }\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        if (!operator || operator === 'none') {\n            operator = 'contains';\n        }\n        let comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                ignoreAccent: ignoreAccent,\n                comparer: comparer\n            }\n        });\n        return this;\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n    sortBy(fieldName, comparer, isFromGroup) {\n        return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     * @param  {string} direction - Defines the sort direction .\n     */\n    sortByForeignKey(fieldName, comparer, isFromGroup, direction) {\n        let order = !isNullOrUndefined(direction) ? direction : 'ascending';\n        let sorts;\n        let temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (let i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (let j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    }\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    sortByDesc(fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    }\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    group(fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    page(pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    range(start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    take(nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    }\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    skip(nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    select(fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    }\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    hierarchy(query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    }\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n    foreignKey(key) {\n        this.fKey = key;\n        return this;\n    }\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    requiresCount() {\n        this.isCountRequired = true;\n        return this;\n    }\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    aggregate(type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    }\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    static filterQueries(queries, name) {\n        return queries.filter((q) => {\n            return q.fn === name;\n        });\n    }\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    static filterQueryLists(queries, singles) {\n        let filtered = queries.filter((q) => {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        let res = {};\n        for (let i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    }\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nclass Predicate {\n    /**\n     * Constructor for Predicate class.\n     * @param  {string|Predicate} field\n     * @param  {string} operator\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\n     * @param  {boolean=false} ignoreCase\n     * @hidden\n     */\n    constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n        /** @hidden */\n        this.ignoreAccent = false;\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.ignoreCase = ignoreCase;\n            this.ignoreAccent = ignoreAccent;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static and(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    }\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    and(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static or(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    }\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    or(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    static fromJson(json) {\n        if (json instanceof Array) {\n            let res = [];\n            for (let i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        let pred = json;\n        return this.fromJSONData(pred);\n    }\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    validate(record) {\n        let predicate = this.predicates ? this.predicates : [];\n        let isAnd;\n        let ret;\n        if (!this.isComplex && this.comparer) {\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n        }\n        isAnd = this.condition === 'and';\n        for (let i = 0; i < predicate.length; i++) {\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    }\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    toJson() {\n        let predicates;\n        let p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (let i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            ignoreAccent: this.ignoreAccent,\n            condition: this.condition,\n            predicates: predicates\n        };\n    }\n    static combinePredicates(predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    }\n    static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    }\n    static fromJSONData(json) {\n        let preds = json.predicates || [];\n        let len = preds.length;\n        let predicates = [];\n        let result;\n        for (let i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    }\n}\n\nconst consts = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Data manager common utility methods.\n * @hidden\n */\nclass DataUtil {\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    static getValue(value, inst) {\n        if (typeof value === 'function') {\n            return value.call(inst || {});\n        }\n        return value;\n    }\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n    static endsWith(input, substr) {\n        return input.slice && input.slice(-substr.length) === substr;\n    }\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n    static startsWith(input, start) {\n        return input.slice(0, start.length) === start;\n    }\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n    static fnSort(order) {\n        order = order ? DataUtil.toLowerCase(order) : 'ascending';\n        if (order === 'ascending') {\n            return this.fnAscending;\n        }\n        return this.fnDescending;\n    }\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnAscending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return -1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y);\n        }\n        if (x === null || x === undefined) {\n            return 1;\n        }\n        return x - y;\n    }\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnDescending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return 1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y) * -1;\n        }\n        if (x === null || x === undefined) {\n            return -1;\n        }\n        return y - x;\n    }\n    static extractFields(obj, fields) {\n        let newObj = {};\n        for (let i = 0; i < fields.length; i++) {\n            newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n        }\n        return newObj;\n    }\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n    static select(jsonArray, fields) {\n        let newData = [];\n        for (let i = 0; i < jsonArray.length; i++) {\n            newData.push(this.extractFields(jsonArray[i], fields));\n        }\n        return newData;\n    }\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n    static group(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {\n        level = level || 1;\n        let jsonData = jsonArray;\n        let guid = 'GroupGuid';\n        if (jsonData.GroupGuid === consts[guid]) {\n            for (let j = 0; j < jsonData.length; j++) {\n                if (!isNullOrUndefined(groupDs)) {\n                    let indx = -1;\n                    let temp = groupDs.filter((e) => { return e.key === jsonData[j].key; });\n                    indx = groupDs.indexOf(temp[0]);\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);\n                    jsonData[j].count = groupDs[indx].count;\n                }\n                else {\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);\n                    jsonData[j].count = jsonData[j].items.length;\n                }\n            }\n            jsonData.childLevels += 1;\n            return jsonData;\n        }\n        let grouped = {};\n        let groupedArray = [];\n        groupedArray.GroupGuid = consts[guid];\n        groupedArray.level = level;\n        groupedArray.childLevels = 0;\n        groupedArray.records = jsonData;\n        for (let i = 0; i < jsonData.length; i++) {\n            let val = this.getVal(jsonData, i, field);\n            if (!isNullOrUndefined(format)) {\n                val = format(val, field);\n            }\n            if (!grouped[val]) {\n                grouped[val] = {\n                    key: val,\n                    count: 0,\n                    items: [],\n                    aggregates: {},\n                    field: field\n                };\n                groupedArray.push(grouped[val]);\n                if (!isNullOrUndefined(groupDs)) {\n                    let tempObj = groupDs.filter((e) => { return e.key === grouped[val].key; });\n                    grouped[val].count = tempObj[0].count;\n                }\n            }\n            grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n            if (!isLazyLoad || (isLazyLoad && aggregates.length)) {\n                grouped[val].items.push(jsonData[i]);\n            }\n        }\n        if (aggregates && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                let res = {};\n                let fn;\n                let aggs = aggregates;\n                for (let j = 0; j < aggregates.length; j++) {\n                    fn = DataUtil.aggregates[aggregates[j].type];\n                    if (!isNullOrUndefined(groupDs)) {\n                        let temp = groupDs.filter((e) => { return e.key === groupedArray[i].key; });\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n                        }\n                    }\n                    else {\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n                        }\n                    }\n                }\n                groupedArray[i].aggregates = res;\n            }\n        }\n        if (isLazyLoad && groupedArray.length && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                groupedArray[i].items = [];\n            }\n        }\n        return jsonData.length && groupedArray || jsonData;\n    }\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n    static buildHierarchy(fKey, from, source, lookup, pKey) {\n        let i;\n        let grp = {};\n        let temp;\n        if (lookup.result) {\n            lookup = lookup.result;\n        }\n        if (lookup.GroupGuid) {\n            this.throwError('DataManager: Do not have support Grouping in hierarchy');\n        }\n        for (i = 0; i < lookup.length; i++) {\n            let fKeyData = this.getObject(fKey, lookup[i]);\n            temp = grp[fKeyData] || (grp[fKeyData] = []);\n            temp.push(lookup[i]);\n        }\n        for (i = 0; i < source.length; i++) {\n            let fKeyData = this.getObject(pKey || fKey, source[i]);\n            source[i][from] = grp[fKeyData];\n        }\n    }\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n    static getFieldList(obj, fields, prefix) {\n        if (prefix === undefined) {\n            prefix = '';\n        }\n        if (fields === undefined || fields === null) {\n            return this.getFieldList(obj, [], prefix);\n        }\n        let copyObj = obj;\n        let keys = Object.keys(obj);\n        for (let prop of keys) {\n            if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n            }\n            else {\n                fields.push(prefix + prop);\n            }\n        }\n        return fields;\n    }\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n    static getObject(nameSpace, from) {\n        if (!nameSpace) {\n            return from;\n        }\n        if (!from) {\n            return undefined;\n        }\n        if (nameSpace.indexOf('.') === -1) {\n            return from[nameSpace];\n        }\n        let value = from;\n        let splits = nameSpace.split('.');\n        for (let i = 0; i < splits.length; i++) {\n            if (value == null) {\n                break;\n            }\n            value = value[splits[i]];\n        }\n        return value;\n    }\n    /**\n     * To set value for the nameSpace in desired object.\n     * @param {string} nameSpace - String value to the get the inner object.\n     * @param {Object} value - Value that you need to set.\n     * @param {Object} obj - Object to get the inner object value.\n     * @return { [key: string]: Object; } | Object\n     * @hidden\n     */\n    static setValue(nameSpace, value, obj) {\n        let keys = nameSpace.toString().split('.');\n        let start = obj || {};\n        let fromObj = start;\n        let i;\n        let length = keys.length;\n        let key;\n        for (i = 0; i < length; i++) {\n            key = keys[i];\n            if (i + 1 === length) {\n                fromObj[key] = value === undefined ? undefined : value;\n            }\n            else if (isNullOrUndefined(fromObj[key])) {\n                fromObj[key] = {};\n            }\n            fromObj = fromObj[key];\n        }\n        return start;\n    }\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n    static sort(ds, field, comparer) {\n        if (ds.length <= 1) {\n            return ds;\n        }\n        let middle = parseInt((ds.length / 2).toString(), 10);\n        let left = ds.slice(0, middle);\n        let right = ds.slice(middle);\n        left = this.sort(left, field, comparer);\n        right = this.sort(right, field, comparer);\n        return this.merge(left, right, field, comparer);\n    }\n    static ignoreDiacritics(value) {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        let result = value.split('');\n        let newValue = result.map((temp) => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n        return newValue.join('');\n    }\n    static merge(left, right, fieldName, comparer) {\n        let result = [];\n        let current;\n        while (left.length > 0 || right.length > 0) {\n            if (left.length > 0 && right.length > 0) {\n                if (comparer) {\n                    current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n                }\n                else {\n                    current = left[0][fieldName] < left[0][fieldName] ? left : right;\n                }\n            }\n            else {\n                current = left.length > 0 ? left : right;\n            }\n            result.push(current.shift());\n        }\n        return result;\n    }\n    static getVal(array, index, field) {\n        return field ? this.getObject(field, array[index]) : array[index];\n    }\n    static toLowerCase(val) {\n        return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : '';\n    }\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n    static callAdaptorFunction(adaptor, fnName, param1, param2) {\n        if (fnName in adaptor) {\n            let res = adaptor[fnName](param1, param2);\n            if (!isNullOrUndefined(res)) {\n                param1 = res;\n            }\n        }\n        return param1;\n    }\n    static getAddParams(adp, dm, query) {\n        let req = {};\n        DataUtil.callAdaptorFunction(adp, 'addParams', {\n            dm: dm,\n            query: query,\n            params: query.params,\n            reqParams: req\n        });\n        return req;\n    }\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n    static isPlainObject(obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n    /**\n     * Returns true when the browser cross origin request.\n     */\n    static isCors() {\n        let xhr = null;\n        let request = 'XMLHttpRequest';\n        try {\n            xhr = new window[request]();\n        }\n        catch (e) {\n            // No exception handling\n        }\n        return !!xhr && ('withCredentials' in xhr);\n    }\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n    static getGuid(prefix) {\n        let hexs = '0123456789abcdef';\n        let rand;\n        return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n            if ('crypto' in window && 'getRandomValues' in crypto) {\n                let arr = new Uint8Array(1);\n                window.crypto.getRandomValues(arr);\n                rand = arr[0] % 16 | 0;\n            }\n            else {\n                rand = Math.random() * 16 | 0;\n            }\n            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n        });\n    }\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n    static isNull(val) {\n        return val === undefined || val === null;\n    }\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n    static getItemFromComparer(array, field, comparer) {\n        let keyVal;\n        let current;\n        let key;\n        let i = 0;\n        let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n        if (array.length) {\n            while (isNullOrUndefined(keyVal) && i < array.length) {\n                keyVal = DataUtil.getVal(array, i, field);\n                key = array[i++];\n            }\n        }\n        for (; i < array.length; i++) {\n            current = DataUtil.getVal(array, i, field);\n            if (isNullOrUndefined(current)) {\n                continue;\n            }\n            if (castRequired) {\n                keyVal = +keyVal;\n                current = +current;\n            }\n            if (comparer(keyVal, current) > 0) {\n                keyVal = current;\n                key = array[i];\n            }\n        }\n        return key;\n    }\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n    static distinct(json, fieldName, requiresCompleteRecord) {\n        requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n        let result = [];\n        let val;\n        let tmp = {};\n        json.forEach((data, index) => {\n            val = typeof (json[index]) === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n            if (!(val in tmp)) {\n                result.push(!requiresCompleteRecord ? val : json[index]);\n                tmp[val] = 1;\n            }\n        });\n        return result;\n    }\n    /**\n     * Process the given records based on the datamanager string.\n     * @param  {string} datamanager\n     * @param  {Object[]} records\n     */\n    static processData(dm, records) {\n        let query = this.prepareQuery(dm);\n        let sampledata = new DataManager(records);\n        if (dm.requiresCounts) {\n            query.requiresCount();\n        }\n        let result = sampledata.executeLocal(query);\n        let returnValue = {\n            result: dm.requiresCounts ? result.result : result,\n            count: result.count,\n            aggregates: JSON.stringify(result.aggregates)\n        };\n        return dm.requiresCounts ? returnValue : result;\n    }\n    static prepareQuery(dm) {\n        let query = new Query();\n        if (dm.select) {\n            query.select(dm.select);\n        }\n        if (dm.where) {\n            let where = DataUtil.parse.parseJson(dm.where);\n            where.filter((pred) => {\n                if (isNullOrUndefined(pred.condition)) {\n                    query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);\n                }\n                else {\n                    let predicateList = [];\n                    if (pred.field) {\n                        predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));\n                    }\n                    else {\n                        predicateList = predicateList.concat(this.getPredicate(pred.predicates));\n                    }\n                    if (pred.condition == 'or') {\n                        query.where(Predicate.or(predicateList));\n                    }\n                    else if (pred.condition == 'and') {\n                        query.where(Predicate.and(predicateList));\n                    }\n                }\n            });\n        }\n        if (dm.search) {\n            let search = DataUtil.parse.parseJson(dm.search);\n            search.filter((e) => query.search(e.key, e.fields, e['operator'], e['ignoreCase'], e['ignoreAccent']));\n        }\n        if (dm.aggregates) {\n            dm.aggregates.filter((e) => query.aggregate(e.type, e.field));\n        }\n        if (dm.sorted) {\n            dm.sorted.filter((e) => query.sortBy(e.name, e.direction));\n        }\n        if (dm.skip) {\n            query.skip(dm.skip);\n        }\n        if (dm.take) {\n            query.take(dm.take);\n        }\n        if (dm.group) {\n            dm.group.filter((grp) => query.group(grp));\n        }\n        return query;\n    }\n    static getPredicate(pred) {\n        let mainPred = [];\n        for (let i = 0; i < pred.length; i++) {\n            let e = pred[i];\n            if (e.field) {\n                mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));\n            }\n            else {\n                let childPred = [];\n                let cpre = this.getPredicate(e.predicates);\n                for (const prop of Object.keys(cpre)) {\n                    childPred.push(cpre[prop]);\n                }\n                mainPred.push(e.condition == 'or' ? Predicate.or(childPred) : Predicate.and(childPred));\n            }\n        }\n        return mainPred;\n    }\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\nDataUtil.throwError = (error) => {\n    try {\n        throw new Error(error);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n};\nDataUtil.aggregates = {\n    /**\n     * Calculate sum of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    sum: (ds, field) => {\n        let result = 0;\n        let val;\n        let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n        for (let i = 0; i < ds.length; i++) {\n            val = DataUtil.getVal(ds, i, field);\n            if (!isNaN(val) && val !== null) {\n                if (castRequired) {\n                    val = +val;\n                }\n                result += val;\n            }\n        }\n        return result;\n    },\n    /**\n     * Calculate average value of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    average: (ds, field) => {\n        return DataUtil.aggregates.sum(ds, field) / ds.length;\n    },\n    /**\n     * Returns the min value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string|Function} field\n     */\n    min: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n    },\n    /**\n     * Returns the max value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     * @returns number\n     */\n    max: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n    },\n    /**\n     * Returns the total number of true value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    truecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n    },\n    /**\n     * Returns the total number of false value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    falsecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n    },\n    /**\n     * Returns the length of the given data.\n     * @param  {Object[]} ds\n     * @param  {string} field?\n     * @returns number\n     */\n    count: (ds, field) => {\n        return ds.length;\n    }\n};\n/**\n * Specifies the Object with filter operators.\n */\nDataUtil.operatorSymbols = {\n    '<': 'lessthan',\n    '>': 'greaterthan',\n    '<=': 'lessthanorequal',\n    '>=': 'greaterthanorequal',\n    '==': 'equal',\n    '!=': 'notequal',\n    '*=': 'contains',\n    '$=': 'endswith',\n    '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\nDataUtil.odBiOperator = {\n    '<': ' lt ',\n    '>': ' gt ',\n    '<=': ' le ',\n    '>=': ' ge ',\n    '==': ' eq ',\n    '!=': ' ne ',\n    'lessthan': ' lt ',\n    'lessthanorequal': ' le ',\n    'greaterthan': ' gt ',\n    'greaterthanorequal': ' ge ',\n    'equal': ' eq ',\n    'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odUniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'substringof',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odv4UniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'contains',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'contains'\n};\nDataUtil.diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03C9': '\\u03C9',\n    '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n    /**\n     * Returns true when the actual input is equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     * @param  {boolean} ignoreAccent?\n     */\n    equal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n        }\n        return actual === expected;\n    },\n    /**\n     * Returns true when the actual input is not equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n    },\n    /**\n     * Returns true when the actual input is less than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n        }\n        if (isNullOrUndefined(actual)) {\n            actual = undefined;\n        }\n        return actual < expected;\n    },\n    /**\n     * Returns true when the actual input is greater than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n        }\n        return actual > expected;\n    },\n    /**\n     * Returns true when the actual input is less than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n        }\n        if (isNullOrUndefined(actual)) {\n            actual = undefined;\n        }\n        return actual <= expected;\n    },\n    /**\n     * Returns true when the actual input is greater than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n        }\n        return actual >= expected;\n    },\n    /**\n     * Returns true when the actual input contains the given string.\n     * @param  {string|number} actual\n     * @param  {string|number} expected\n     * @param  {boolean} ignoreCase?\n     */\n    contains: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n        }\n        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n            actual.toString().indexOf(expected) !== -1;\n    },\n    /**\n     * Returns true when the given input value is not null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    notnull: (actual) => {\n        return actual !== null;\n    },\n    /**\n     * Returns true when the given input value is null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    isnull: (actual) => {\n        return actual === null;\n    },\n    /**\n     * Returns true when the actual input starts with the given string\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.startsWith(actual, expected);\n    },\n    /**\n     * Returns true when the actual input ends with the given string.\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.endsWith(actual, expected);\n    },\n    /**\n     * It will return the filter operator based on the filter symbol.\n     * @param  {string} operator\n     * @hidden\n     */\n    processSymbols: (operator) => {\n        let fnName = DataUtil.operatorSymbols[operator];\n        if (fnName) {\n            let fn = DataUtil.fnOperators[fnName];\n            return fn;\n        }\n        return DataUtil.throwError('Query - Process Operator : Invalid operator');\n    },\n    /**\n     * It will return the valid filter operator based on the specified operators.\n     * @param  {string} operator\n     * @hidden\n     */\n    processOperator: (operator) => {\n        let fn = DataUtil.fnOperators[operator];\n        if (fn) {\n            return fn;\n        }\n        return DataUtil.fnOperators.processSymbols(operator);\n    }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\nDataUtil.parse = {\n    /**\n     * Parse the given string to the plain JavaScript object.\n     * @param  {string|Object|Object[]} jsonText\n     */\n    parseJson: (jsonText) => {\n        if (typeof jsonText === 'string') {\n            jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n        }\n        else if (jsonText instanceof Array) {\n            DataUtil.parse.iterateAndReviveArray(jsonText);\n        }\n        else if (typeof jsonText === 'object' && jsonText !== null) {\n            DataUtil.parse.iterateAndReviveJson(jsonText);\n        }\n        return jsonText;\n    },\n    /**\n     * It will perform on array of values.\n     * @param  {string[]|Object[]} array\n     * @hidden\n     */\n    iterateAndReviveArray: (array) => {\n        for (let i = 0; i < array.length; i++) {\n            if (typeof array[i] === 'object' && array[i] !== null) {\n                DataUtil.parse.iterateAndReviveJson(array[i]);\n            }\n            else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n                array[i] = DataUtil.parse.jsonReviver('', array[i]);\n            }\n            else {\n                array[i] = DataUtil.parse.parseJson(array[i]);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {JSON} json\n     * @hidden\n     */\n    iterateAndReviveJson: (json) => {\n        let value;\n        let keys = Object.keys(json);\n        for (let prop of keys) {\n            if (DataUtil.startsWith(prop, '__')) {\n                continue;\n            }\n            value = json[prop];\n            if (typeof value === 'object') {\n                if (value instanceof Array) {\n                    DataUtil.parse.iterateAndReviveArray(value);\n                }\n                else if (value) {\n                    DataUtil.parse.iterateAndReviveJson(value);\n                }\n            }\n            else {\n                json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {string} field\n     * @param  {string|Date} value\n     * @hidden\n     */\n    jsonReviver: (field, value) => {\n        if (typeof value === 'string') {\n            let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n            let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n            if (ms) {\n                return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n            }\n            else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n                let arr = value.split(/[^0-9.]/);\n                if (isUTC) {\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n                }\n                else {\n                    let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n                    let hrs = parseInt(arr[6], 10);\n                    let mins = parseInt(arr[7], 10);\n                    if (isNaN(hrs) && isNaN(mins)) {\n                        return utcFormat;\n                    }\n                    if (value.indexOf('+') > -1) {\n                        utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n                    }\n                    else {\n                        utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n                    }\n                    value = DataUtil.dateParse\n                        .toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n                }\n                if (DataUtil.serverTimezoneOffset == null) {\n                    value = DataUtil.dateParse.addSelfOffset(value);\n                }\n            }\n        }\n        return value;\n    },\n    /**\n     * Check wheather the given value is JSON or not.\n     * @param  {Object[]} jsonData\n     */\n    isJson: (jsonData) => {\n        if (typeof jsonData[0] === 'string') {\n            return jsonData;\n        }\n        return DataUtil.parse.parseJson(jsonData);\n    },\n    /**\n     * Checks wheather the given value is GUID or not.\n     * @param  {string} value\n     */\n    isGuid: (value) => {\n        let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n        let match = regex.exec(value);\n        return match != null;\n    },\n    /**\n     * The method used to replace the value based on the type.\n     * @param  {Object} value\n     * @param  {boolean} stringify\n     * @hidden\n     */\n    replacer: (value, stringify) => {\n        if (DataUtil.isPlainObject(value)) {\n            return DataUtil.parse.jsonReplacer(value, stringify);\n        }\n        if (value instanceof Array) {\n            return DataUtil.parse.arrayReplacer(value);\n        }\n        if (value instanceof Date) {\n            return DataUtil.parse.jsonReplacer({ val: value }, stringify).val;\n        }\n        return value;\n    },\n    /**\n     * It will replace the JSON value.\n     * @param  {string} key\n     * @param  {Object} val\n     * @hidden\n     */\n    jsonReplacer: (val, stringify) => {\n        let value;\n        let keys = Object.keys(val);\n        for (let prop of keys) {\n            value = val[prop];\n            if (!(value instanceof Date)) {\n                continue;\n            }\n            let d = value;\n            if (DataUtil.serverTimezoneOffset == null) {\n                val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n            }\n            else {\n                d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n                val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Array of value.\n     * @param  {string} key\n     * @param  {Object[]} val\n     * @hidden\n     */\n    arrayReplacer: (val) => {\n        for (let i = 0; i < val.length; i++) {\n            if (DataUtil.isPlainObject(val[i])) {\n                val[i] = DataUtil.parse.jsonReplacer(val[i]);\n            }\n            else if (val[i] instanceof Date) {\n                val[i] = DataUtil.parse.jsonReplacer({ date: val[i] }).date;\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Date object with respective to UTC format value.\n     * @param  {string} key\n     * @param  {any} value\n     * @hidden\n     */\n    /* tslint:disable-next-line:no-any */\n    jsonDateReplacer: (key, value) => {\n        if (key === 'value' && value) {\n            if (typeof value === 'string') {\n                let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n                if (ms) {\n                    value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n                }\n                else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                    let arr = value.split(/[^0-9]/);\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n                }\n            }\n            if (value instanceof Date) {\n                value = DataUtil.dateParse.addSelfOffset(value);\n                if (DataUtil.serverTimezoneOffset === null) {\n                    return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n                }\n                else {\n                    value = DataUtil.dateParse.toTimeZone(value, (((value.getTimezoneOffset() / 60) * 2)\n                        - DataUtil.serverTimezoneOffset), false);\n                    return value.toJSON();\n                }\n            }\n        }\n        return value;\n    }\n};\n/**\n * @hidden\n */\nDataUtil.dateParse = {\n    addSelfOffset: (input) => {\n        return new Date(+input - (input.getTimezoneOffset() * 60000));\n    },\n    toUTC: (input) => {\n        return new Date(+input + (input.getTimezoneOffset() * 60000));\n    },\n    toTimeZone: (input, offset, utc) => {\n        if (offset === null) {\n            return input;\n        }\n        let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n        return new Date(+unix - (offset * 3600000));\n    },\n    toLocalTime: (input) => {\n        let datefn = input;\n        let timeZone = -datefn.getTimezoneOffset();\n        let differenceString = timeZone >= 0 ? '+' : '-';\n        let localtimefn = (num) => {\n            let norm = Math.floor(Math.abs(num));\n            return (norm < 10 ? '0' : '') + norm;\n        };\n        let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) +\n            'T' + localtimefn(datefn.getHours()) +\n            ':' + localtimefn(datefn.getMinutes()) +\n            ':' + localtimefn(datefn.getSeconds()) +\n            differenceString + localtimefn(timeZone / 60) +\n            ':' + localtimefn(timeZone % 60);\n        return val;\n    }\n};\n\nconst consts$1 = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nclass Adaptor {\n    /**\n     * Constructor for Adaptor class\n     * @param  {DataOptions} ds?\n     * @hidden\n     * @returns aggregates\n     */\n    constructor(ds) {\n        // common options for all the adaptors \n        this.options = {\n            from: 'table',\n            requestType: 'json',\n            sortBy: 'sorted',\n            select: 'select',\n            skip: 'skip',\n            group: 'group',\n            take: 'take',\n            search: 'search',\n            count: 'requiresCounts',\n            where: 'where',\n            aggregates: 'aggregates',\n            expand: 'expand'\n        };\n        /**\n         * Specifies the type of adaptor.\n         * @default Adaptor\n         */\n        this.type = Adaptor;\n        this.dataSource = ds;\n        this.pvt = {};\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {Object} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @returns Object\n     */\n    processResponse(data, ds, query, xhr) {\n        return data;\n    }\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nclass JsonAdaptor extends Adaptor {\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    processQuery(dataManager, query) {\n        let result = dataManager.dataSource.json.slice(0);\n        let count = result.length;\n        let countFlg = true;\n        let ret;\n        let key;\n        let lazyLoad = {};\n        let keyCount = 0;\n        let group = [];\n        let page;\n        for (let i = 0; i < query.lazyLoad.length; i++) {\n            keyCount++;\n            lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n        }\n        let agg = {};\n        for (let i = 0; i < query.queries.length; i++) {\n            key = query.queries[i];\n            if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {\n                if (key.fn === 'onGroup') {\n                    group.push(key.e);\n                }\n                if (key.fn === 'onPage') {\n                    page = key.e;\n                }\n                continue;\n            }\n            ret = this[key.fn].call(this, result, key.e, query);\n            if (key.fn === 'onAggregates') {\n                agg[key.e.field + ' - ' + key.e.type] = ret;\n            }\n            else {\n                result = ret !== undefined ? ret : result;\n            }\n            if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n                countFlg = false;\n            }\n            if (countFlg) {\n                count = result.length;\n            }\n        }\n        if (keyCount) {\n            let args = {\n                query: query, lazyLoad: lazyLoad, result: result, group: group, page: page\n            };\n            let lazyLoadData = this.lazyLoadGroup(args);\n            result = lazyLoadData.result;\n            count = lazyLoadData.count;\n        }\n        if (query.isCountRequired) {\n            result = {\n                result: result,\n                count: count,\n                aggregates: agg\n            };\n        }\n        return result;\n    }\n    /**\n     * Perform lazy load grouping in JSON array based on the given query and lazy load details.\n     * @param  {LazyLoadGroupArgs} args\n     */\n    lazyLoadGroup(args) {\n        let count = 0;\n        let agg = this.getAggregate(args.query);\n        let result = args.result;\n        if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {\n            let req = args.lazyLoad.onDemandGroupInfo;\n            for (let i = req.where.length - 1; i >= 0; i--) {\n                result = this.onWhere(result, req.where[i]);\n            }\n            if (args.group.length !== req.level) {\n                let field = args.group[req.level].fieldName;\n                result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            }\n            count = result.length;\n            let data = result;\n            result = result.slice(req.skip);\n            result = result.slice(0, req.take);\n            if (args.group.length !== req.level) {\n                this.formGroupResult(result, data);\n            }\n        }\n        else {\n            let field = args.group[0].fieldName;\n            result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            count = result.length;\n            let data = result;\n            if (args.page) {\n                result = this.onPage(result, args.page, args.query);\n            }\n            this.formGroupResult(result, data);\n        }\n        return { result: result, count: count };\n    }\n    formGroupResult(result, data) {\n        if (result.length && data.length) {\n            let uid = 'GroupGuid';\n            let childLevel = 'childLevels';\n            let level = 'level';\n            let records = 'records';\n            result[uid] = data[uid];\n            result[childLevel] = data[childLevel];\n            result[level] = data[level];\n            result[records] = data[records];\n        }\n        return result;\n    }\n    /**\n     * Separate the aggregate query from the given queries\n     * @param  {Query} query\n     */\n    getAggregate(query) {\n        let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n        let agg = [];\n        if (aggQuery.length) {\n            let tmp;\n            for (let i = 0; i < aggQuery.length; i++) {\n                tmp = aggQuery[i].e;\n                agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });\n            }\n        }\n        return agg;\n    }\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        let i;\n        let deletedRecordsLen = changes.deletedRecords.length;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            this.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            this.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < deletedRecordsLen; i++) {\n            this.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return changes;\n    }\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n    onWhere(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.filter((obj) => {\n            if (e) {\n                return e.validate(obj);\n            }\n        });\n    }\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n    onAggregates(ds, e) {\n        let fn = DataUtil.aggregates[e.type];\n        if (!ds || !fn || ds.length === 0) {\n            return null;\n        }\n        return fn(ds, e.field);\n    }\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n    onSearch(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        if (e.fieldNames.length === 0) {\n            DataUtil.getFieldList(ds[0], e.fieldNames);\n        }\n        return ds.filter((obj) => {\n            for (let j = 0; j < e.fieldNames.length; j++) {\n                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n    onSortBy(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let fnCompare;\n        let field = DataUtil.getValue(e.fieldName, query);\n        if (!field) {\n            return ds.sort(e.comparer);\n        }\n        if (field instanceof Array) {\n            field = field.slice(0);\n            for (let i = field.length - 1; i >= 0; i--) {\n                if (!field[i]) {\n                    continue;\n                }\n                fnCompare = e.comparer;\n                if (DataUtil.endsWith(field[i], ' desc')) {\n                    fnCompare = DataUtil.fnSort('descending');\n                    field[i] = field[i].replace(' desc', '');\n                }\n                ds = DataUtil.sort(ds, field[i], fnCompare);\n            }\n            return ds;\n        }\n        return DataUtil.sort(ds, field, e.comparer);\n    }\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n    onGroup(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let agg = this.getAggregate(query);\n        return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    }\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n    onPage(ds, e, query) {\n        let size = DataUtil.getValue(e.pageSize, query);\n        let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n        let end = start + size;\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(start, end);\n    }\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n    onRange(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    }\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onTake(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(0, DataUtil.getValue(e.nos));\n    }\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onSkip(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.nos));\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n    onSelect(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    }\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n    insert(dm, data, tableName, query, position) {\n        if (isNullOrUndefined(position)) {\n            return dm.dataSource.json.push(data);\n        }\n        else {\n            return dm.dataSource.json.splice(position, 0, data);\n        }\n    }\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    remove(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        if (typeof value === 'object' && !(value instanceof Date)) {\n            value = DataUtil.getObject(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (DataUtil.getObject(keyField, ds[i]) === value) {\n                break;\n            }\n        }\n        return i !== ds.length ? ds.splice(i, 1) : null;\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    update(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        let key;\n        if (!isNullOrUndefined(keyField)) {\n            key = getValue(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (!isNullOrUndefined(keyField) && (getValue(keyField, ds[i])) === key) {\n                break;\n            }\n        }\n        return i < ds.length ? merge(ds[i], value) : null;\n    }\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nclass UrlAdaptor extends Adaptor {\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    // tslint:disable-next-line:max-func-body-length\n    processQuery(dm, query, hierarchyFilters) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let params = query.params;\n        let url = dm.dataSource.url;\n        let temp;\n        let skip;\n        let take = null;\n        let options = this.options;\n        let request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        // calc Paging & Range\n        if ('onPage' in singles) {\n            temp = singles.onPage;\n            skip = DataUtil.getValue(temp.pageIndex, query);\n            take = DataUtil.getValue(temp.pageSize, query);\n            skip = (skip - 1) * take;\n        }\n        else if ('onRange' in singles) {\n            temp = singles.onRange;\n            skip = temp.start;\n            take = temp.end - temp.start;\n        }\n        // Sorting\n        for (let i = 0; i < queries.sorts.length; i++) {\n            temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n            request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', { name: temp, direction: queries.sorts[i].e.direction }, query));\n        }\n        // hierarchy\n        if (hierarchyFilters) {\n            temp = this.getFiltersFrom(hierarchyFilters, query);\n            if (temp) {\n                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n            }\n        }\n        // Filters\n        for (let i = 0; i < queries.filters.length; i++) {\n            let res = DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query);\n            if ((this.getModuleName &&\n                this.getModuleName() === 'ODataV4Adaptor') &&\n                !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {\n                res = \"(\" + res + \")\";\n            }\n            request.filters.push(res);\n            let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n            for (let prop of keys) {\n                if (DataUtil.isNull((request)[prop])) {\n                    delete request[prop];\n                }\n            }\n        }\n        // Searches\n        for (let i = 0; i < queries.searches.length; i++) {\n            temp = queries.searches[i].e;\n            request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n                fields: temp.fieldNames,\n                operator: temp.operator,\n                key: temp.searchKey,\n                ignoreCase: temp.ignoreCase\n            }, query));\n        }\n        // Grouping\n        for (let i = 0; i < queries.groups.length; i++) {\n            request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n        }\n        // aggregates\n        for (let i = 0; i < queries.aggregates.length; i++) {\n            temp = queries.aggregates[i].e;\n            request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });\n        }\n        let req = {};\n        this.getRequestQuery(options, query, singles, request, req);\n        // Params\n        DataUtil.callAdaptorFunction(this, 'addParams', { dm: dm, query: query, params: params, reqParams: req });\n        if (query.lazyLoad.length) {\n            for (let i = 0; i < query.lazyLoad.length; i++) {\n                req[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n            }\n        }\n        // cleanup\n        let keys = Object.keys(req);\n        for (let prop of keys) {\n            if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n                delete req[prop];\n            }\n        }\n        if (!(options.skip in req && options.take in req) && take !== null) {\n            req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n            req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n        }\n        let p = this.pvt;\n        this.pvt = {};\n        if (this.options.requestType === 'json') {\n            return {\n                data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n                url: url,\n                pvtData: p,\n                type: 'POST',\n                contentType: 'application/json; charset=utf-8'\n            };\n        }\n        temp = this.convertToQueryString(req, query, dm);\n        temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n        return {\n            type: 'GET', url: temp.length ? url.replace(/\\/*$/, temp) : url, pvtData: p\n        };\n    }\n    getRequestQuery(options, query, singles, request, request1) {\n        let param = 'param';\n        let req = request1;\n        req[options.from] = query.fromTable;\n        if (options.apply && query.distincts.length) {\n            req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n        }\n        if (!query.distincts.length && options.expand) {\n            req[options.expand] = 'onExpand' in this && 'onSelect' in singles ?\n                DataUtil.callAdaptorFunction(this, 'onExpand', { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;\n        }\n        req[options.select] = 'onSelect' in singles && !query.distincts.length ?\n            DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n        req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n        req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n        req[options.skip] = 'onSkip' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n        req[options.take] = 'onTake' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n        req[options.where] = request.filters.length || request.searches.length ?\n            DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n        req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n        req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n        req[options.aggregates] = request.aggregates.length ?\n            DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n        req[param] = [];\n    }\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n    convertToQueryString(request, query, dm) {\n        return '';\n        // this needs to be overridden\n    }\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n            let handleTimeZone = DataUtil.timeZoneHandling;\n            if (ds && !ds.timeZoneHandling) {\n                DataUtil.timeZoneHandling = false;\n            }\n            data = DataUtil.parse.parseJson(data);\n            DataUtil.timeZoneHandling = handleTimeZone;\n        }\n        let requests = request;\n        let pvt = requests.pvtData || {};\n        let groupDs = data ? data.groupDs : [];\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        let d = JSON.parse(requests.data);\n        if (d && d.action === 'batch' && data && data.addedRecords) {\n            changes.addedRecords = data.addedRecords;\n            return changes;\n        }\n        if (data && data.d) {\n            data = data.d;\n        }\n        let args = {};\n        if (data && 'count' in data) {\n            args.count = data.count;\n        }\n        args.result = data && data.result ? data.result : data;\n        let isExpand = false;\n        if (Array.isArray(data.result) && data.result.length) {\n            let key = 'key';\n            let val = 'value';\n            let level = 'level';\n            if (!isNullOrUndefined(data.result[0][key])) {\n                args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);\n            }\n            if (query && query.lazyLoad.length && pvt.groups.length) {\n                for (let i = 0; i < query.lazyLoad.length; i++) {\n                    if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {\n                        let value = query.lazyLoad[i][val][level];\n                        if (pvt.groups.length === value) {\n                            isExpand = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (!isExpand) {\n            this.getAggregateResult(pvt, data, args, groupDs, query);\n        }\n        return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    formRemoteGroupedData(data, level, childLevel) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {\n                this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);\n            }\n        }\n        let uid = 'GroupGuid';\n        let childLvl = 'childLevels';\n        let lvl = 'level';\n        let records = 'records';\n        data[uid] = consts$1[uid];\n        data[lvl] = level;\n        data[childLvl] = childLevel;\n        data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];\n        return data;\n    }\n    getGroupedRecords(data, hasRecords) {\n        let childGroupedRecords = [];\n        let records = 'records';\n        for (let i = 0; i < data.length; i++) {\n            if (!hasRecords) {\n                for (let j = 0; j < data[i].items.length; j++) {\n                    childGroupedRecords.push(data[i].items[j]);\n                }\n            }\n            else {\n                childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);\n            }\n        }\n        return childGroupedRecords;\n    }\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return e;\n    }\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let url;\n        let key;\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e[url],\n                key: e[key]\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n    beforeSend(dm, request) {\n        // need to extend this method\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n    insert(dm, data, tableName, query) {\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n    remove(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: value,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: value,\n                action: 'update',\n                keyColumn: keyField,\n                key: DataUtil.getObject(keyField, value),\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n    getFiltersFrom(data, query) {\n        let key = query.fKey;\n        let value;\n        let prop = key;\n        let pKey = query.key;\n        let predicats = [];\n        if (typeof data[0] !== 'object') {\n            prop = null;\n        }\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[0] === 'object') {\n                value = DataUtil.getObject(pKey || prop, data[i]);\n            }\n            else {\n                value = data[i];\n            }\n            predicats.push(new Predicate(key, 'equal', value));\n        }\n        return Predicate.or(predicats);\n    }\n    getAggregateResult(pvt, data, args, groupDs, query) {\n        let pData = data;\n        if (data && data.result) {\n            pData = data.result;\n        }\n        if (pvt && pvt.aggregates && pvt.aggregates.length) {\n            let agg = pvt.aggregates;\n            let fn;\n            let aggregateData = pData;\n            let res = {};\n            if (data.aggregate) {\n                aggregateData = data.aggregate;\n            }\n            for (let i = 0; i < agg.length; i++) {\n                fn = DataUtil.aggregates[agg[i].type];\n                if (fn) {\n                    res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n                }\n            }\n            args.aggregates = res;\n        }\n        let key = 'key';\n        let isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);\n        if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {\n            let groups = pvt.groups;\n            for (let i = 0; i < groups.length; i++) {\n                let level = null;\n                if (!isNullOrUndefined(groupDs)) {\n                    groupDs = DataUtil.group(groupDs, groups[i]);\n                }\n                let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n                pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n            }\n            args.result = pData;\n        }\n        return args;\n    }\n    getQueryRequest(query) {\n        let req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = Query.filterQueries(query.queries, 'onGroup');\n        req.filters = Query.filterQueries(query.queries, 'onWhere');\n        req.searches = Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    }\n    addParams(options) {\n        let req = options.reqParams;\n        if (options.params.length) {\n            req.params = {};\n        }\n        for (let tmp of options.params) {\n            if (req[tmp.key]) {\n                throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n            }\n            req[tmp.key] = tmp.value;\n            if (tmp.fn) {\n                req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n            }\n            req.params[tmp.key] = req[tmp.key];\n        }\n    }\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nclass ODataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$inlinecount',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PUT'\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'ODataAdaptor';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let operator;\n        let guid;\n        let val = predicate.value;\n        let type = typeof val;\n        let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n        if (val instanceof Date) {\n            val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n        }\n        if (type === 'string') {\n            val = encodeURIComponent(val);\n            val = '\\'' + val + '\\'';\n            if (requiresCast) {\n                field = 'cast(' + field + ', \\'Edm.String\\')';\n            }\n            if (DataUtil.parse.isGuid(val)) {\n                guid = 'guid';\n            }\n            if (predicate.ignoreCase) {\n                if (!guid) {\n                    field = 'tolower(' + field + ')';\n                }\n                val = val.toLowerCase();\n            }\n        }\n        operator = DataUtil.odBiOperator[predicate.operator];\n        if (operator) {\n            returnValue += field;\n            returnValue += operator;\n            if (guid) {\n                returnValue += guid;\n            }\n            return returnValue + val;\n        }\n        if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n            operator = DataUtil.odv4UniOperator[predicate.operator];\n        }\n        else {\n            operator = DataUtil.odUniOperator[predicate.operator];\n        }\n        if (operator === 'substringof') {\n            let temp = val;\n            val = field;\n            field = temp;\n        }\n        returnValue += operator + '(';\n        returnValue += field + ',';\n        if (guid) {\n            returnValue += guid;\n        }\n        returnValue += val + ')';\n        return returnValue;\n    }\n    addParams(options) {\n        super.addParams(options);\n        delete options.reqParams.params;\n    }\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onComplexPredicate(predicate, query, requiresCast) {\n        let res = [];\n        for (let i = 0; i < predicate.predicates.length; i++) {\n            res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n        }\n        return res.join(' ' + predicate.condition + ' ');\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n    onEachWhere(filter, query, requiresCast) {\n        return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n    onWhere(filters) {\n        if (this.pvt.search) {\n            filters.push(this.onEachWhere(this.pvt.search, null, true));\n        }\n        return filters.join(' and ');\n    }\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        if (e.fields && e.fields.length === 0) {\n            DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n        }\n        let filter = this.pvt.search || [];\n        for (let i = 0; i < e.fields.length; i++) {\n            filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n        }\n        this.pvt.search = filter;\n    }\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        this.pvt.search = Predicate.or(this.pvt.search);\n        return '';\n    }\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n    onEachSort(e) {\n        let res = [];\n        if (e.name instanceof Array) {\n            for (let i = 0; i < e.name.length; i++) {\n                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n            }\n        }\n        else {\n            res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n        return res.join(',');\n    }\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n    onSortBy(e) {\n        return e.reverse().join(',');\n    }\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return [];\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        for (let i = 0; i < e.length; i++) {\n            e[i] = ODataAdaptor.getField(e[i]);\n        }\n        return e.join(',');\n    }\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n        return '';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'allpages' : '';\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.options.multipartAccept);\n            request.setRequestHeader('DataServiceVersion', '2.0');\n            request.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        else {\n            request.setRequestHeader('Accept', this.options.accept);\n        }\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaCheck = 'odata.metadata';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaCheck]) {\n            let dataUrls = data[metaCheck].split('/$metadata#');\n            this.rootUrl = dataUrls[0];\n            this.resourceTableName = dataUrls[1];\n        }\n        let pvtData = 'pvtData';\n        if (!isNullOrUndefined(data.d)) {\n            let dataCopy = ((query && query.isCountRequired) ? data.d.results : data.d);\n            let metaData = '__metadata';\n            if (!isNullOrUndefined(dataCopy)) {\n                for (let i = 0; i < dataCopy.length; i++) {\n                    if (!isNullOrUndefined(dataCopy[i][metaData])) {\n                        delete dataCopy[i][metaData];\n                    }\n                }\n            }\n        }\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        let count = null;\n        let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n        if (query && query.isCountRequired) {\n            let oDataCount = '__count';\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n            if (data.d) {\n                data = data.d;\n            }\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n        }\n        if (version === 3 && data.value) {\n            data = data.value;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        if (version < 3 && data.results) {\n            data = data.results;\n        }\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n    convertToQueryString(request, query, dm) {\n        let res = [];\n        let table = 'table';\n        let tableName = request[table] || '';\n        let format = '$format';\n        delete request[table];\n        if (dm.dataSource.requiresFormat) {\n            request[format] = 'json';\n        }\n        let keys = Object.keys(request);\n        for (let prop of keys) {\n            res.push(prop + '=' + request[prop]);\n        }\n        res = res.join('&');\n        if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n            return res;\n        }\n        return res.length ? tableName + '?' + res : tableName || '';\n    }\n    localTimeReplacer(key, convertObj) {\n        for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n            if ((convertObj[prop] instanceof Date)) {\n                convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n            }\n        }\n        return convertObj;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n            data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        let url;\n        if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n            url = `('${value}')`;\n        }\n        else {\n            url = `(${value})`;\n        }\n        return {\n            type: 'DELETE',\n            url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n        };\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n    update(dm, keyField, value, tableName, query, original) {\n        if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n            value = this.compareAndRemove(value, original, keyField);\n        }\n        let url;\n        if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n            url = `('${value[keyField]}')`;\n        }\n        else {\n            url = `(${value[keyField]})`;\n        }\n        return {\n            type: this.options.updateType,\n            url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n            data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n            accept: this.options.accept\n        };\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch :\n            dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let args = {\n            url: e.url,\n            key: e.key,\n            cid: 1,\n            cSet: DataUtil.getGuid(this.options.changeSet)\n        };\n        let req = '--' + initialGuid + '\\n';\n        req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n        this.pvt.changeSet = 0;\n        req += this.generateInsertRequest(changes.addedRecords, args, dm);\n        req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n        req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n        req += args.cSet + '--\\n';\n        req += '--' + initialGuid + '--';\n        return {\n            type: 'POST',\n            url: url,\n            dataType: 'json',\n            contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n            data: req\n        };\n    }\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n    generateDeleteRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'DELETE ',\n            'url': (data, i, key) => {\n                let url = DataUtil.getObject(key, data[i]);\n                if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                    return '(' + url + ')';\n                }\n                else if (url instanceof Date) {\n                    let dateTime = data[i][key];\n                    return '(' + dateTime.toJSON() + ')';\n                }\n                else {\n                    return `('${url}')`;\n                }\n            },\n            'data': (data, i) => ''\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req + '\\n';\n    }\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateInsertRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'POST ',\n            'url': (data, i, key) => '',\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateUpdateRequest(arr, e, dm, org) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        arr.forEach((change) => change = this.compareAndRemove(change, org.filter((o) => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n        let stat = {\n            'method': this.options.updateType + ' ',\n            'url': (data, i, key) => {\n                if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n                    return '(' + data[i][key] + ')';\n                }\n                else if (data[i][key] instanceof Date) {\n                    let date = data[i][key];\n                    return '(' + date.toJSON() + ')';\n                }\n                else {\n                    return `('${data[i][key]}')`;\n                }\n            },\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    static getField(prop) {\n        return prop.replace(/\\./g, '/');\n    }\n    generateBodyContent(arr, e, stat, dm) {\n        let req = '';\n        for (let i = 0; i < arr.length; i++) {\n            req += '\\n' + e.cSet + '\\n';\n            req += this.options.changeSetContent + '\\n\\n';\n            req += stat.method;\n            if (stat.method === 'POST ') {\n                req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n                req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'DELETE ') {\n                req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            req += 'Accept: ' + this.options.accept + '\\n';\n            req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n            req += this.options.batchChangeSetContentType + '\\n';\n            if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n                req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n                delete arr[i]['@odata.etag'];\n            }\n            else {\n                req += '\\n';\n            }\n            req += stat.data(arr, i);\n        }\n        return req;\n    }\n    processBatchResponse(data, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n            let guid = xhr.getResponseHeader('Content-Type');\n            let cIdx;\n            let jsonObj;\n            let d = data + '';\n            guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n            d = d.split(guid);\n            if (d.length < 2) {\n                return {};\n            }\n            d = d[1];\n            let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n            if (exVal) {\n                d.replace(exVal[0], '');\n            }\n            let changeGuid = exVal ? exVal[1] : '';\n            d = d.split(changeGuid);\n            for (let i = d.length; i > -1; i--) {\n                if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n                    continue;\n                }\n                cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n                if (changes.addedRecords[cIdx]) {\n                    jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n                    extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n                }\n            }\n            return changes;\n        }\n        return null;\n    }\n    compareAndRemove(data, original, key) {\n        if (isNullOrUndefined(original)) {\n            return data;\n        }\n        Object.keys(data).forEach((prop) => {\n            if (prop !== key && prop !== '@odata.etag') {\n                if (DataUtil.isPlainObject(data[prop])) {\n                    this.compareAndRemove(data[prop], original[prop]);\n                    let final = Object.keys(data[prop]).filter((data) => data !== '@odata.etag');\n                    if (final.length === 0) {\n                        delete data[prop];\n                    }\n                }\n                else if (data[prop] === original[prop]) {\n                    delete data[prop];\n                }\n                else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n                    delete data[prop];\n                }\n            }\n        });\n        return data;\n    }\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nclass ODataV4Adaptor extends ODataAdaptor {\n    constructor(props) {\n        super(props);\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json, text/javascript, */*; q=0.01',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$count',\n            search: '$search',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PATCH',\n            localTime: false,\n            apply: '$apply'\n        });\n        extend(this.options, props || {});\n    }\n    /**\n     * @hidden\n     */\n    getModuleName() {\n        return 'ODataV4Adaptor';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'true' : '';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let val = predicate.value;\n        let isDate = val instanceof Date;\n        if (query instanceof Query) {\n            let queries = this.getQueryRequest(query);\n            for (let i = 0; i < queries.filters.length; i++) {\n                if (queries.filters[i].e.key === predicate.value) {\n                    requiresCast = true;\n                }\n            }\n        }\n        returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n        if (isDate) {\n            returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n        }\n        if (DataUtil.parse.isGuid(val)) {\n            returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n        }\n        return returnValue;\n    }\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        let search = this.pvt.searches || [];\n        search.push(e.key);\n        this.pvt.searches = search;\n    }\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        return this.pvt.searches.join(' OR ');\n    }\n    /**\n     * Returns the expand query string.\n     * @param  {string} e\n     */\n    onExpand(e) {\n        let selected = {};\n        let expanded = {};\n        let expands = e.expands.slice();\n        let exArr = [];\n        let selects = e.selects.filter((item) => item.indexOf('.') > -1);\n        selects.forEach((select) => {\n            let splits = select.split('.');\n            if (!(splits[0] in selected)) {\n                selected[splits[0]] = [];\n            }\n            if (splits.length == 2) {\n                selected[splits[0]].push('$select=' + splits[1]);\n            }\n            else {\n                let sel = '$select=' + splits[splits.length - 1];\n                let exp = '';\n                let close = '';\n                for (let i = 1; i < splits.length - 1; i++) {\n                    exp = exp + '$expand=' + splits[i] + '(';\n                    close = close + ')';\n                }\n                selected[splits[0]].push(exp + sel + close);\n            }\n        });\n        //Auto expand from select query\n        Object.keys(selected).forEach((expand) => {\n            if ((expands.indexOf(expand) === -1)) {\n                expands.push(expand);\n            }\n        });\n        expands.forEach((expand) => {\n            expanded[expand] = expand in selected ? `${expand}(${selected[expand].join(';')})` : expand;\n        });\n        Object.keys(expanded).forEach((ex) => exArr.push(expanded[ex]));\n        return exArr.join(',');\n    }\n    /**\n     * Returns the groupby query string.\n     * @param  {string} e\n     */\n    onDistinct(distinctFields) {\n        let fields = distinctFields.map((field) => ODataAdaptor.getField(field)).join(',');\n        return `groupby((${fields}))`;\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        return super.onSelect(e.filter((item) => item.indexOf('.') === -1));\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n            request.setRequestHeader('Prefer', 'return=representation');\n        }\n        request.setRequestHeader('Accept', this.options.accept);\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaName = '@odata.context';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaName]) {\n            let dataUrl = data[metaName].split('/$metadata#');\n            this.rootUrl = dataUrl[0];\n            this.resourceTableName = dataUrl[1];\n        }\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let count = null;\n        let dataCount = '@odata.count';\n        if (query && query.isCountRequired) {\n            if (dataCount in data) {\n                count = data[dataCount];\n            }\n        }\n        data = !isNullOrUndefined(data.value) ? data.value : data;\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: count, aggregates: args.aggregates };\n    }\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nclass WebApiAdaptor extends ODataAdaptor {\n    getModuleName() {\n        return 'WebApiAdaptor';\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.url,\n            data: JSON.stringify(data)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url + '/' + value,\n            data: JSON.stringify(value)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url,\n            data: JSON.stringify(value)\n        };\n    }\n    batchRequest(dm, changes, e) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let req = [];\n        //insertion\n        for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n            changes.addedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': 'POST ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //updation \n        for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n            changes.changedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': this.options.updateType + ' ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //deletion\n        for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n            changes.deletedRecords.forEach((j, d) => {\n                let state = {\n                    'mtd': 'DELETE ',\n                    'url': (data, i, key) => {\n                        let url = DataUtil.getObject(key, data[i]);\n                        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                            return '/' + url;\n                        }\n                        else if (url instanceof Date) {\n                            let datTime = data[i][key];\n                            return '/' + datTime.toJSON();\n                        }\n                        else {\n                            return `/'${url}'`;\n                        }\n                    },\n                    'data': (data, i) => ''\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url)\n                    + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        req.push('--' + initialGuid + '--', '');\n        return {\n            type: 'POST',\n            url: url,\n            contentType: 'multipart/mixed; boundary=' + initialGuid,\n            data: req.join('\\r\\n')\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let count = null;\n        let args = {};\n        if (request && request.type.toLowerCase() !== 'post') {\n            let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n            let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n            if (query && query.isCountRequired) {\n                if (!DataUtil.isNull(data.Count)) {\n                    count = data.Count;\n                }\n            }\n            if (version < 3 && data.Items) {\n                data = data.Items;\n            }\n            args.count = count;\n            args.result = data;\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        args.result = args.result || data;\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nclass WebMethodAdaptor extends UrlAdaptor {\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n        let getData = 'data';\n        let data = DataUtil.parse.parseJson(obj[getData]);\n        let result = {};\n        let value = 'value';\n        if (data.param) {\n            for (let i = 0; i < data.param.length; i++) {\n                let param = data.param[i];\n                let key = Object.keys(param)[0];\n                result[key] = param[key];\n            }\n        }\n        result[value] = data;\n        let pvtData = 'pvtData';\n        let url = 'url';\n        return {\n            data: JSON.stringify(result),\n            url: obj[url],\n            pvtData: obj[pvtData],\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8'\n        };\n    }\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nclass RemoteSaveAdaptor extends JsonAdaptor {\n    /**\n     * @hidden\n     */\n    constructor() {\n        super();\n        setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n    }\n    insert(dm, data, tableName, query, position) {\n        this.pvt.position = position;\n        this.updateType = 'add';\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    remove(dm, keyField, val, tableName, query) {\n        super.remove(dm, keyField, val);\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: val,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    update(dm, keyField, val, tableName, query) {\n        this.updateType = 'update';\n        this.updateKey = keyField;\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: val,\n                action: 'update',\n                keyColumn: keyField,\n                key: val[keyField],\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    processResponse(data, ds, query, xhr, request, changes, e) {\n        let i;\n        let newData = request ? JSON.parse(request.data) : data;\n        data = newData.action === 'batch' ? DataUtil.parse.parseJson(data) : data;\n        if (this.updateType === 'add') {\n            super.insert(ds, data, null, null, this.pvt.position);\n        }\n        if (this.updateType === 'update') {\n            super.update(ds, this.updateKey, data);\n        }\n        this.updateType = undefined;\n        if (data.added) {\n            for (i = 0; i < data.added.length; i++) {\n                super.insert(ds, data.added[i]);\n            }\n        }\n        if (data.changed) {\n            for (i = 0; i < data.changed.length; i++) {\n                super.update(ds, e.key, data.changed[i]);\n            }\n        }\n        if (data.deleted) {\n            for (i = 0; i < data.deleted.length; i++) {\n                super.remove(ds, e.key, data.deleted[i]);\n            }\n        }\n        return data;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e.url,\n                key: e.key\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    addParams(options) {\n        let urlParams = new UrlAdaptor();\n        urlParams.addParams(options);\n    }\n}\n/**\n * Ajax Adaptor that is extended from URL Adaptor, is used for handle data operations with user defined functions.\n * @hidden\n */\nclass CustomDataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            getData: new Function(),\n            addRecord: new Function(),\n            updateRecord: new Function(),\n            deleteRecord: new Function(),\n            batchUpdate: new Function()\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'CustomDataAdaptor';\n    }\n}\n/**\n * The GraphqlAdaptor that is extended from URL Adaptor, is used for retrieving data from the Graphql server.\n * It interacts with the Graphql server with all the DataManager Queries and performs CRUD operations.\n * @hidden\n */\nclass GraphQLAdaptor extends UrlAdaptor {\n    getModuleName() {\n        return 'GraphQLAdaptor';\n    }\n    constructor(options) {\n        super();\n        this.opt = options;\n        this.schema = this.opt.response;\n        this.query = this.opt.query;\n        this.getVariables = this.opt.getVariables ? this.opt.getVariables : () => { };\n        this.getQuery = () => this.query;\n    }\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     */\n    processQuery(datamanager, query) {\n        let urlQuery = super.processQuery.apply(this, arguments);\n        let dm = JSON.parse(urlQuery.data);\n        // constructing GraphQL parameters\n        let keys = ['skip', 'take', 'sorted', 'table', 'select', 'where',\n            'search', 'requiresCounts', 'aggregates', 'params'];\n        let temp = {};\n        let str = 'searchwhereparams';\n        keys.filter((e) => {\n            temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];\n        });\n        let vars = this.getVariables() || {};\n        vars['datamanager'] = temp;\n        let data = JSON.stringify({\n            query: this.getQuery(),\n            variables: vars\n        });\n        urlQuery.data = data;\n        return urlQuery;\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @returns DataResult\n     */\n    processResponse(resData, ds, query, xhr, request) {\n        const res = resData;\n        let count;\n        let aggregates;\n        let result = getValue(this.schema.result, res.data);\n        if (this.schema.count) {\n            count = getValue(this.schema.count, res.data);\n        }\n        if (this.schema.aggregates) {\n            aggregates = getValue(this.schema.aggregates, res.data);\n            aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;\n        }\n        let pvt = request.pvtData || {};\n        let args = { result: result, aggregates: aggregates };\n        let data = args;\n        if (pvt && pvt.groups && pvt.groups.length) {\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        return !isNullOrUndefined(count) ? { result: args.result, count: count, aggregates: aggregates } : args.result;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     */\n    insert() {\n        let inserted = super.insert.apply(this, arguments);\n        return this.generateCrudData(inserted, 'insert');\n    }\n    /**\n     * Prepare and returns request body which is used to update a new record in the table.\n     */\n    update() {\n        let inserted = super.update.apply(this, arguments);\n        return this.generateCrudData(inserted, 'update');\n    }\n    /**\n     * Prepare and returns request body which is used to remove a new record in the table.\n     */\n    remove() {\n        let inserted = super.remove.apply(this, arguments);\n        return this.generateCrudData(inserted, 'remove');\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     * @param  {Query} query\n     * @param  {Object} original\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let batch = super.batchRequest.apply(this, arguments);\n        let bData = JSON.parse(batch.data);\n        bData.key = e.key;\n        batch.data = JSON.stringify(bData);\n        return this.generateCrudData(batch, 'batch');\n    }\n    generateCrudData(crudData, action) {\n        let parsed = JSON.parse(crudData.data);\n        crudData.data = JSON.stringify({\n            query: this.opt.getMutation(action),\n            variables: parsed\n        });\n        return crudData;\n    }\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nclass CacheAdaptor extends UrlAdaptor {\n    /**\n     * Constructor for CacheAdaptor class.\n     * @param  {CacheAdaptor} adaptor?\n     * @param  {number} timeStamp?\n     * @param  {number} pageSize?\n     * @hidden\n     */\n    constructor(adaptor, timeStamp, pageSize) {\n        super();\n        this.isCrudAction = false;\n        this.isInsertAction = false;\n        if (!isNullOrUndefined(adaptor)) {\n            this.cacheAdaptor = adaptor;\n        }\n        this.pageSize = pageSize;\n        this.guidId = DataUtil.getGuid('cacheAdaptor');\n        let obj = { keys: [], results: [] };\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        let guid = this.guidId;\n        if (!isNullOrUndefined(timeStamp)) {\n            setInterval(() => {\n                let data;\n                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n                let forDel = [];\n                for (let i = 0; i < data.results.length; i++) {\n                    let currentTime = +new Date();\n                    let requestTime = +new Date(data.results[i].timeStamp);\n                    data.results[i].timeStamp = currentTime - requestTime;\n                    if (currentTime - requestTime > timeStamp) {\n                        forDel.push(i);\n                    }\n                }\n                for (let i = 0; i < forDel.length; i++) {\n                    data.results.splice(forDel[i], 1);\n                    data.keys.splice(forDel[i], 1);\n                }\n                window.localStorage.removeItem(guid);\n                window.localStorage.setItem(guid, JSON.stringify(data));\n            }, timeStamp);\n        }\n    }\n    /**\n     * It will generate the key based on the URL when we send a request to server.\n     * @param  {string} url\n     * @param  {Query} query?\n     * @hidden\n     */\n    generateKey(url, query) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let key = url;\n        let page = 'onPage';\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        queries.sorts.forEach((obj) => {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach((obj) => {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach((obj) => {\n            key += obj.e.searchKey;\n        });\n        for (let filter = 0; filter < queries.filters.length; filter++) {\n            let currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                let newQuery = query.clone();\n                newQuery.queries = [];\n                for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        return key;\n    }\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let key = this.generateKey(dm.dataSource.url, query);\n        let cachedItems;\n        cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null && !this.isCrudAction && !this.isInsertAction) {\n            return data;\n        }\n        this.isCrudAction = null;\n        this.isInsertAction = null;\n        return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (this.isInsertAction || (request && this.cacheAdaptor.options.batch &&\n            DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post')) {\n            return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n        }\n        data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n        let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n        let obj = {};\n        obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let index = obj.keys.indexOf(key);\n        if (index !== -1) {\n            obj.results.splice(index, 1);\n            obj.keys.splice(index, 1);\n        }\n        obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count };\n        while (obj.results.length > this.pageSize) {\n            obj.results.splice(0, 1);\n            obj.keys.splice(0, 1);\n        }\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        return data;\n    }\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch)\n            && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n        }\n        if (!dm.dataSource.crossDomain) {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n        }\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        this.isInsertAction = true;\n        return this.cacheAdaptor.insert(dm, data, tableName);\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        return this.cacheAdaptor.batchRequest(dm, changes, e);\n    }\n}\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nclass DataManager {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    constructor(dataSource, query, adaptor) {\n        /** @hidden */\n        this.dateParse = true;\n        /** @hidden */\n        this.timeZoneHandling = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        if (dataSource && dataSource.timeZoneHandling === false) {\n            this.timeZoneHandling = dataSource.timeZoneHandling;\n        }\n        let data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ?\n                        false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then((e) => {\n                this.dataSource.offline = true;\n                this.isDataAvailable = true;\n                data.json = e.result;\n                this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    setDefaultQuery(query) {\n        this.defaultQuery = query;\n        return this;\n    }\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    executeLocal(query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        let result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            let from = query.subQuery.fromTable;\n            let lookup = query.subQuery.lookups;\n            let res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (let j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    }\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    executeQuery(query, done, fail, always) {\n        let makeRequest = 'makeRequest';\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        let deffered = new Deferred();\n        let args = { query: query };\n        if (!this.dataSource.offline && (this.dataSource.url !== undefined && this.dataSource.url !== '')\n            || (!isNullOrUndefined(this.adaptor[makeRequest])) || this.isCustomDataAdaptor(this.adaptor)) {\n            let result = this.adaptor.processQuery(this, query);\n            if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n                this.adaptor[makeRequest](result, deffered, args, query);\n            }\n            else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {\n                this.makeRequest(result, deffered, args, query);\n            }\n            else {\n                args = DataManager.getDeferedArgs(query, result, args);\n                deffered.resolve(args);\n            }\n        }\n        else {\n            DataManager.nextTick(() => {\n                let res = this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        if (done || fail) {\n            deffered.promise.then(done, fail);\n        }\n        if (always) {\n            deffered.promise.then(always, always);\n        }\n        return deffered.promise;\n    }\n    static getDeferedArgs(query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    }\n    static nextTick(fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    }\n    extendRequest(url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    }\n    // tslint:disable-next-line:max-func-body-length\n    makeRequest(url, deffered, args, query) {\n        let isSelector = !!query.subQuerySelector;\n        let fnFail = (e) => {\n            args.error = e;\n            deffered.reject(args);\n        };\n        let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        let fnQueryChild = (data, selector) => {\n            let subDeffer = new Deferred();\n            let childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n            let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then((subData) => {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        let fnSuccess = (data, request) => {\n            if (this.isGraphQLAdaptor(this.adaptor)) {\n                if (!isNullOrUndefined(data['errors'])) {\n                    return fnFail(data['errors'], request);\n                }\n            }\n            if (this.isCustomDataAdaptor(this.adaptor)) {\n                request = extend({}, this.ajaxReqOption, request);\n            }\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n            let count = 0;\n            let aggregates = null;\n            let virtualSelectRecords = 'virtualSelectRecords';\n            let virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        let req = this.extendRequest(url, fnSuccess, fnFail);\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            req = ajax.send();\n            req.catch((e) => true); // to handle failure remote requests.        \n            this.requests.push(ajax);\n        }\n        else {\n            this.ajaxReqOption = req;\n            let request = req;\n            this.adaptor.options.getData({\n                data: request.data,\n                onSuccess: request.onSuccess, onFailure: request.onFailure\n            });\n        }\n        if (isSelector) {\n            let promise;\n            let res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then((...args) => {\n                    let result = args[0];\n                    let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n                    let count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    }\n    beforeSend(request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        let headers = this.dataSource.headers;\n        let props;\n        for (let i = 0; headers && i < headers.length; i++) {\n            props = [];\n            let keys = Object.keys(headers[i]);\n            for (let prop of keys) {\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    }\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    saveChanges(changes, key, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let deff = new Deferred();\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = (data, request) => {\n                if (this.isGraphQLAdaptor(this.adaptor)) {\n                    if (!isNullOrUndefined(data['errors'])) {\n                        ajax.onFailure(JSON.stringify(data['errors']));\n                    }\n                }\n                deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n            };\n            ajax.onFailure = (e) => {\n                deff.reject([{ error: e }]);\n            };\n            ajax.send().catch((e) => true); // to handle the failure requests.        \n            return deff.promise;\n        }\n        else {\n            return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);\n        }\n    }\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    insert(data, tableName, query, position) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let req = this.adaptor.insert(this, data, tableName, query, position);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            return this.doAjaxRequest(req, this.adaptor.options.addRecord);\n        }\n    }\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    remove(keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = DataUtil.getObject(keyField, value);\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.remove(this, keyField, value, tableName, query);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            let remove = this.adaptor.options.deleteRecord;\n            return this.doAjaxRequest(res, remove);\n        }\n    }\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    update(keyField, value, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            let update = this.adaptor.options.updateRecord;\n            return this.doAjaxRequest(res, update);\n        }\n    }\n    isCustomDataAdaptor(dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'CustomDataAdaptor';\n    }\n    isGraphQLAdaptor(dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'GraphQLAdaptor';\n    }\n    successFunc(record, request) {\n        if (this.isGraphQLAdaptor(this.adaptor)) {\n            let data = JSON.parse(record);\n            if (!isNullOrUndefined(data['errors'])) {\n                this.failureFunc(JSON.stringify(data['errors']));\n            }\n        }\n        if (this.isCustomDataAdaptor(this.adaptor)) {\n            request = extend({}, this.ajaxReqOption, request);\n        }\n        try {\n            DataUtil.parse.parseJson(record);\n        }\n        catch (e) {\n            record = [];\n        }\n        record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n        this.ajaxDeffered.resolve(record);\n    }\n    ;\n    failureFunc(e) {\n        this.ajaxDeffered.reject([{ error: e }]);\n    }\n    ;\n    doAjaxRequest(res, ajaxFunc) {\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        this.ajaxDeffered = new Deferred();\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let ajax = new Ajax(res);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = this.successFunc.bind(this);\n            ajax.onFailure = this.failureFunc.bind(this);\n            ajax.send().catch((e) => true); // to handle the failure requests.\n        }\n        else {\n            this.ajaxReqOption = res;\n            ajaxFunc.call(this, {\n                data: res.data, onSuccess: this.successFunc.bind(this),\n                onFailure: this.failureFunc.bind(this)\n            });\n        }\n        return this.ajaxDeffered.promise;\n    }\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n    constructor() {\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n}\n\n/**\n * Data modules\n */\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil };\n"]},"metadata":{},"sourceType":"module"}