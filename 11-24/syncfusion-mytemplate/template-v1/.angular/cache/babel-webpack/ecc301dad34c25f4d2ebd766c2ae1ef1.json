{"ast":null,"code":"import _createClass from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createForOfIteratorHelper from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _assertThisInitialized from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _classCallCheck from \"D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ZipArchive, ZipArchiveItem } from '@syncfusion/ej2-compression';\nimport { Internationalization, isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * CellStyle class\n * @private\n */\n\nvar CellStyle = function CellStyle() {\n  _classCallCheck(this, CellStyle);\n\n  this.numFmtId = 0;\n  this.backColor = 'none';\n  this.fontName = 'Calibri';\n  this.fontSize = 10.5;\n  this.fontColor = '#000000';\n  this.italic = false;\n  this.bold = false;\n  this.underline = false;\n  this.wrapText = false;\n  this.hAlign = 'general';\n  this.vAlign = 'bottom';\n  this.indent = 0;\n  this.rotation = 0;\n  this.numberFormat = 'GENERAL';\n  this.type = 'datetime';\n  this.borders = new Borders();\n  this.isGlobalStyle = false;\n};\n/**\n * Font Class\n * @private\n */\n\n\nvar Font = function Font() {\n  _classCallCheck(this, Font);\n\n  this.sz = 10.5;\n  this.name = 'Calibri';\n  this.u = false;\n  this.b = false;\n  this.i = false;\n  this.color = 'FF000000';\n};\n/**\n * CellXfs class\n * @private\n */\n\n\nvar CellXfs = function CellXfs() {\n  _classCallCheck(this, CellXfs);\n};\n/**\n * Alignment class\n * @private\n */\n\n\nvar Alignment = function Alignment() {\n  _classCallCheck(this, Alignment);\n};\n/**\n * CellStyleXfs class\n * @private\n */\n\n\nvar CellStyleXfs = function CellStyleXfs() {\n  _classCallCheck(this, CellStyleXfs);\n};\n/**\n * CellStyles class\n * @private\n */\n\n\nvar CellStyles = function CellStyles() {\n  _classCallCheck(this, CellStyles);\n\n  this.name = 'Normal';\n  this.xfId = 0;\n};\n/**\n * NumFmt class\n * @private\n */\n\n\nvar NumFmt = function NumFmt(id, code) {\n  _classCallCheck(this, NumFmt);\n\n  this.numFmtId = id;\n  this.formatCode = code;\n};\n/**\n * Border class\n * @private\n */\n\n\nvar Border = function Border(mLine, mColor) {\n  _classCallCheck(this, Border);\n\n  this.lineStyle = mLine;\n  this.color = mColor;\n};\n/**\n * Borders class\n * @private\n */\n\n\nvar Borders = function Borders() {\n  _classCallCheck(this, Borders);\n\n  this.left = new Border('none', '#FFFFFF');\n  this.right = new Border('none', '#FFFFFF');\n  this.top = new Border('none', '#FFFFFF');\n  this.bottom = new Border('none', '#FFFFFF');\n  this.all = new Border('none', '#FFFFFF');\n};\n/**\n * Worksheet class\n * @private\n */\n\n\nvar Cell = function Cell() {\n  _classCallCheck(this, Cell);\n};\n/**\n * Cells class\n * @private\n */\n\n\nvar Cells = /*#__PURE__*/function (_Array) {\n  _inherits(Cells, _Array);\n\n  var _super = _createSuper(Cells);\n\n  function Cells() {\n    var _this;\n\n    _classCallCheck(this, Cells);\n\n    _this = _super.apply(this, arguments);\n\n    _this.add = function (cell) {\n      var inserted = false;\n      var count = 0;\n\n      var _iterator = _createForOfIteratorHelper(_assertThisInitialized(_this)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n\n          if (c.index === cell.index) {\n            _this[count] = cell;\n            inserted = true;\n          }\n\n          count++;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!inserted) {\n        _this.push(cell);\n      }\n    };\n\n    return _this;\n  }\n\n  return Cells;\n}( /*#__PURE__*/_wrapNativeSuper(Array));\n/**\n * Column class\n * @private\n */\n\n\nvar Column = function Column() {\n  _classCallCheck(this, Column);\n};\n/**\n * Row class\n * @private\n */\n\n\nvar Row = function Row() {\n  _classCallCheck(this, Row);\n};\n/**\n * Rows class\n * @private\n */\n\n\nvar Rows = /*#__PURE__*/function (_Array2) {\n  _inherits(Rows, _Array2);\n\n  var _super2 = _createSuper(Rows);\n\n  function Rows() {\n    var _this2;\n\n    _classCallCheck(this, Rows);\n\n    _this2 = _super2.apply(this, arguments);\n\n    _this2.add = function (row) {\n      _this2.push(row);\n    };\n\n    return _this2;\n  }\n\n  return Rows;\n}( /*#__PURE__*/_wrapNativeSuper(Array));\n/**\n * Worksheets class\n * @private\n */\n\n\nvar Worksheets = /*#__PURE__*/function (_Array3) {\n  _inherits(Worksheets, _Array3);\n\n  var _super3 = _createSuper(Worksheets);\n\n  function Worksheets() {\n    _classCallCheck(this, Worksheets);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return Worksheets;\n}( /*#__PURE__*/_wrapNativeSuper(Array));\n/**\n * Worksheet class\n * @private\n */\n\n\nvar Worksheet = function Worksheet() {\n  _classCallCheck(this, Worksheet);\n\n  this.isSummaryRowBelow = true;\n  this.showGridLines = true;\n  this.enableRtl = false;\n};\n/**\n * Hyperlink class\n * @private\n */\n\n\nvar HyperLink = function HyperLink() {\n  _classCallCheck(this, HyperLink);\n};\n/**\n * Grouping class\n * @private\n */\n\n\nvar Grouping = function Grouping() {\n  _classCallCheck(this, Grouping);\n};\n/**\n * FreezePane class\n * @private\n */\n\n\nvar FreezePane = function FreezePane() {\n  _classCallCheck(this, FreezePane);\n};\n/**\n * MergeCell\n * @private\n */\n\n\nvar MergeCell = function MergeCell() {\n  _classCallCheck(this, MergeCell);\n};\n/**\n * MergeCells class\n * @private\n */\n\n\nvar MergeCells = /*#__PURE__*/function (_Array4) {\n  _inherits(MergeCells, _Array4);\n\n  var _super4 = _createSuper(MergeCells);\n\n  function MergeCells() {\n    var _this3;\n\n    _classCallCheck(this, MergeCells);\n\n    _this3 = _super4.apply(this, arguments);\n\n    _this3.add = function (mergeCell) {\n      var inserted = false;\n      var count = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(_assertThisInitialized(_this3)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var mCell = _step2.value;\n\n          if (MergeCells.isIntersecting(mCell, mergeCell)) {\n            var intersectingCell = new MergeCell();\n            intersectingCell.x = Math.min(mCell.x, mergeCell.x);\n            intersectingCell.y = Math.min(mCell.Y, mergeCell.y);\n            intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);\n            intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);\n            intersectingCell.ref = _this3[count].ref.split(':')[0] + ':' + mergeCell.ref.split(':')[1];\n            _this3[count] = intersectingCell;\n            mergeCell = intersectingCell;\n            inserted = true;\n          }\n\n          count++;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (!inserted) {\n        _this3.push(mergeCell);\n      }\n\n      return mergeCell;\n    };\n\n    return _this3;\n  }\n\n  _createClass(MergeCells, null, [{\n    key: \"isIntersecting\",\n    value: function isIntersecting(base, compare) {\n      return base.x <= compare.x + compare.width && compare.x <= base.x + base.width && base.y <= compare.y + compare.height && compare.y <= base.y + base.height;\n    }\n  }]);\n\n  return MergeCells;\n}( /*#__PURE__*/_wrapNativeSuper(Array));\n/**\n * Image class\n * @private\n */\n\n\nvar Image = function Image() {\n  _classCallCheck(this, Image);\n}; // import { IValueFormatter } from '../base/interface';\n\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\n\n\nvar ValueFormatter = /*#__PURE__*/function () {\n  function ValueFormatter(cultureName) {\n    _classCallCheck(this, ValueFormatter);\n\n    this.intl = new Internationalization(); // if (!isNullOrUndefined(cultureName)) {\n    //     this.intl.culture = cultureName;\n    // }\n  }\n\n  _createClass(ValueFormatter, [{\n    key: \"getFormatFunction\",\n    value: function getFormatFunction(format, isServerRendered) {\n      if (format.type) {\n        if (isServerRendered) {\n          format.isServerRendered = true;\n        }\n\n        return this.intl.getDateFormat(format);\n      } else {\n        return this.intl.getNumberFormat(format);\n      }\n    } // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n    //     if ((<DateFormatOptions>format).type) {\n    //         return this.intl.getDateParser(<DateFormatOptions>format);\n    //     } else {\n    //         return this.intl.getNumberParser(<DateFormatOptions>format);\n    //     }\n    // }\n    // public fromView(value: string, format: Function, type?: string): string | number | Date {\n    //     if (type === 'date' || type === 'datetime' || type === 'number') {\n    //         return format(value);\n    //     } else {\n    //         return value;\n    //     }\n    // }\n\n  }, {\n    key: \"toView\",\n    value: function toView(value, format) {\n      var result = value;\n\n      if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n        result = format(value);\n      }\n\n      return result;\n    } // public setCulture(cultureName: string): void {\n    //     if (!isNullOrUndefined(cultureName)) {\n    //         setCulture(cultureName);\n    //     }\n    // }\n\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"displayText\",\n    value: function displayText(value, format, isServerRendered) {\n      return this.toView(value, this.getFormatFunction(format, isServerRendered));\n    }\n  }]);\n\n  return ValueFormatter;\n}();\n/**\n * CsvHelper class\n * @private\n */\n\n\nvar CsvHelper = /*#__PURE__*/function () {\n  /* tslint:disable:no-any */\n  function CsvHelper(json, separator) {\n    _classCallCheck(this, CsvHelper);\n\n    this.csvStr = '';\n\n    if (separator === null || separator === undefined) {\n      this.separator = ',';\n    } else {\n      this.separator = separator;\n    }\n\n    this.formatter = new ValueFormatter();\n    this.isMicrosoftBrowser = !!navigator.msSaveBlob;\n\n    if (json.isServerRendered !== null && json.isServerRendered !== undefined) {\n      this.isServerRendered = json.isServerRendered;\n    }\n\n    if (json.styles !== null && json.styles !== undefined) {\n      this.globalStyles = new Map();\n\n      for (var i = 0; i < json.styles.length; i++) {\n        if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {\n          this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);\n        }\n      }\n    } // Parses Worksheets data to DOM.        \n\n\n    if (json.worksheets !== null && json.worksheets !== undefined) {\n      this.parseWorksheet(json.worksheets[0]);\n    } //this.csvStr = 'a1,a2,a3\\nb1,b2,b3';\n\n  }\n\n  _createClass(CsvHelper, [{\n    key: \"parseWorksheet\",\n    value: function parseWorksheet(json) {\n      //Rows\n      if (json.rows !== null && json.rows !== undefined) {\n        this.parseRows(json.rows);\n      }\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parseRows\",\n    value: function parseRows(rows) {\n      var count = 1;\n\n      var _iterator3 = _createForOfIteratorHelper(rows),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var row = _step3.value;\n\n          //Row index\n          if (row.index !== null && row.index !== undefined) {\n            while (count < row.index) {\n              this.csvStr += '\\n';\n              count++;\n            }\n\n            this.parseRow(row);\n          } else {\n            throw Error('Row index is missing.');\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parseRow\",\n    value: function parseRow(row) {\n      if (row.cells !== null && row.cells !== undefined) {\n        var count = 1;\n\n        var _iterator4 = _createForOfIteratorHelper(row.cells),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var cell = _step4.value;\n\n            //cell index\n            if (cell.index !== null && cell.index !== undefined) {\n              while (count < cell.index) {\n                this.csvStr += this.separator;\n                count++;\n              }\n\n              this.parseCell(cell);\n            } else {\n              throw Error('Cell index is missing.');\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parseCell\",\n    value: function parseCell(cell) {\n      var csv = this.csvStr;\n\n      if (cell.value !== undefined) {\n        if (cell.value instanceof Date) {\n          if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n            /* tslint:disable-next-line:max-line-length */\n            try {\n              csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n                type: 'dateTime',\n                skeleton: cell.style.numberFormat\n              }, this.isServerRendered));\n            } catch (error) {\n              /* tslint:disable-next-line:max-line-length */\n              csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n                type: 'dateTime',\n                format: cell.style.numberFormat\n              }, this.isServerRendered));\n            }\n          } else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n            /* tslint:disable-next-line:max-line-length */\n            try {\n              csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n                type: 'dateTime',\n                skeleton: this.globalStyles.get(cell.style.name)\n              }, this.isServerRendered));\n            } catch (error) {\n              /* tslint:disable-next-line:max-line-length */\n              csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n                type: 'dateTime',\n                format: this.globalStyles.get(cell.style.name)\n              }, this.isServerRendered));\n            }\n          } else {\n            csv += cell.value;\n          }\n        } else if (typeof cell.value === 'boolean') {\n          csv += cell.value ? 'TRUE' : 'FALSE';\n        } else if (typeof cell.value === 'number') {\n          if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n            /* tslint:disable-next-line:max-line-length */\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              format: cell.style.numberFormat\n            }, this.isServerRendered));\n          } else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n            /* tslint:disable-next-line:max-line-length */\n            csv += this.parseCellValue(this.formatter.displayText(cell.value, {\n              format: this.globalStyles.get(cell.style.name)\n            }, this.isServerRendered));\n          } else {\n            csv += cell.value;\n          }\n        } else {\n          csv += this.parseCellValue(cell.value);\n        }\n      }\n\n      this.csvStr = csv;\n    }\n  }, {\n    key: \"parseCellValue\",\n    value: function parseCellValue(value) {\n      var val = '';\n      var length = value.length;\n\n      for (var start = 0; start < length; start++) {\n        if (value[start] === '\\\"') {\n          val += value[start].replace('\\\"', '\\\"\\\"');\n        } else {\n          val += value[start];\n        }\n      }\n\n      value = val;\n\n      if (value.indexOf(this.separator) !== -1 || value.indexOf('\\n') !== -1) {\n        return value = '\\\"' + value + '\\\"';\n      } else {\n        return value;\n      }\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     */\n\n  }, {\n    key: \"save\",\n    value: function save(fileName) {\n      this.buffer = new Blob([\"\\uFEFF\" + this.csvStr], {\n        type: 'text/csv;charset=UTF-8'\n      });\n\n      if (this.isMicrosoftBrowser) {\n        navigator.msSaveBlob(this.buffer, fileName);\n      } else {\n        var dataUrl = window.URL.createObjectURL(this.buffer);\n        var dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n        dwlLink.download = fileName;\n        dwlLink.href = dataUrl;\n        var event = document.createEvent('MouseEvent');\n        event.initEvent('click', true, true);\n        dwlLink.dispatchEvent(event);\n        setTimeout(function () {\n          window.URL.revokeObjectURL(dataUrl);\n        });\n      }\n    }\n  }, {\n    key: \"saveAsBlob\",\n    value: function saveAsBlob() {\n      return new Blob([\"\\uFEFF\" + this.csvStr], {\n        type: 'text/csv;charset=UTF-8'\n      });\n    }\n  }]);\n\n  return CsvHelper;\n}();\n/**\n * BlobHelper class\n * @private\n */\n\n\nvar BlobHelper = /*#__PURE__*/function () {\n  function BlobHelper() {\n    _classCallCheck(this, BlobHelper);\n\n    /* tslint:disable:no-any */\n    this.parts = [];\n  }\n  /* tslint:disable:no-any */\n\n\n  _createClass(BlobHelper, [{\n    key: \"append\",\n    value: function append(part) {\n      this.parts.push(part);\n      this.blob = undefined; // Invalidate the blob\n    }\n  }, {\n    key: \"getBlob\",\n    value: function getBlob() {\n      return new Blob(this.parts, {\n        type: 'text/plain'\n      });\n    }\n  }]);\n\n  return BlobHelper;\n}();\n/**\n * AutoFilters class\n * @private\n */\n\n\nvar AutoFilters = function AutoFilters() {\n  _classCallCheck(this, AutoFilters);\n};\n/**\n * Workbook class\n */\n\n\nvar Workbook = /*#__PURE__*/function () {\n  /* tslint:disable:no-any */\n  function Workbook(json, saveType, culture, currencyString, separator) {\n    _classCallCheck(this, Workbook);\n\n    this.sharedStringCount = 0;\n    this.unitsProportions = [96 / 75.0, 96 / 300.0, 96, 96 / 25.4, 96 / 2.54, 1, 96 / 72.0, 96 / 72.0 / 12700];\n    /* tslint:disable:no-any */\n\n    this.hyperlinkStyle = {\n      fontColor: '#0000FF',\n      underline: true\n    };\n\n    if (culture !== undefined) {\n      this.culture = culture;\n    } else {\n      this.culture = 'en-US';\n    }\n\n    if (currencyString !== undefined) {\n      this.currency = currencyString;\n    } else {\n      this.currency = 'USD';\n    }\n\n    this.intl = new Internationalization(this.culture);\n    this.mSaveType = saveType;\n\n    if (saveType === 'xlsx') {\n      this.mArchive = new ZipArchive();\n      this.sharedString = [];\n      this.mFonts = [];\n      this.mBorders = [];\n      this.mStyles = [];\n      this.printTitles = new Map();\n      this.cellStyles = new Map();\n      this.mNumFmt = new Map();\n      this.mFills = new Map();\n      this.mStyles.push(new CellStyle());\n      this.mFonts.push(new Font());\n      /* tslint:disable */\n\n      this.cellStyles.set('Normal', new CellStyles());\n      /* tslint:enable */\n\n      this.mCellXfs = [];\n      this.mCellStyleXfs = [];\n      this.drawingCount = 0;\n      this.imageCount = 0;\n\n      if (json.styles !== null && json.styles !== undefined) {\n        /* tslint:disable-next-line:no-any */\n        this.globalStyles = new Map();\n\n        for (var i = 0; i < json.styles.length; i++) {\n          if (json.styles[i].name !== undefined) {\n            if (!this.cellStyles.has(json.styles[i].name)) {\n              var cellStyle = new CellStyle();\n              cellStyle.isGlobalStyle = true;\n              this.parserCellStyle(json.styles[i], cellStyle, 'none');\n              var cellStylesIn = new CellStyles();\n              cellStylesIn.name = cellStyle.name;\n              cellStylesIn.xfId = cellStyle.index - 1;\n              this.cellStyles.set(cellStylesIn.name, cellStylesIn);\n              /* tslint:disable-next-line:no-any */\n\n              var tFormat = {};\n\n              if (json.styles[i].numberFormat !== undefined) {\n                tFormat.format = json.styles[i].numberFormat;\n              }\n\n              if (json.styles[i].type !== undefined) {\n                tFormat.type = json.styles[i].type;\n              } else {\n                tFormat.type = 'datetime';\n              }\n\n              if (tFormat.format !== undefined) {\n                this.globalStyles.set(json.styles[i].name, tFormat);\n              }\n            } else {\n              throw Error('Style name ' + json.styles[i].name + ' is already existed');\n            }\n          }\n        }\n      } // Parses Worksheets data to DOM.        \n\n\n      if (json.worksheets !== null && json.worksheets !== undefined) {\n        this.parserWorksheets(json.worksheets);\n      } else {\n        throw Error('Worksheet is expected.');\n      } // Parses the BuiltInProperties data to DOM.        \n\n\n      if (json.builtInProperties !== null && json.builtInProperties !== undefined) {\n        this.builtInProperties = new BuiltInProperties();\n        this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties);\n      }\n    } else {\n      this.csvHelper = new CsvHelper(json, separator);\n    }\n  }\n  /* tslint:disable:no-any */\n\n\n  _createClass(Workbook, [{\n    key: \"parserBuiltInProperties\",\n    value: function parserBuiltInProperties(jsonBuiltInProperties, builtInProperties) {\n      //Author\n      if (jsonBuiltInProperties.author !== null && jsonBuiltInProperties.author !== undefined) {\n        builtInProperties.author = jsonBuiltInProperties.author;\n      } //Comments\n\n\n      if (jsonBuiltInProperties.comments !== null && jsonBuiltInProperties.comments !== undefined) {\n        builtInProperties.comments = jsonBuiltInProperties.comments;\n      } //Category\n\n\n      if (jsonBuiltInProperties.category !== null && jsonBuiltInProperties.category !== undefined) {\n        builtInProperties.category = jsonBuiltInProperties.category;\n      } //Company\n\n\n      if (jsonBuiltInProperties.company !== null && jsonBuiltInProperties.company !== undefined) {\n        builtInProperties.company = jsonBuiltInProperties.company;\n      } //Manager\n\n\n      if (jsonBuiltInProperties.manager !== null && jsonBuiltInProperties.manager !== undefined) {\n        builtInProperties.manager = jsonBuiltInProperties.manager;\n      } //Subject\n\n\n      if (jsonBuiltInProperties.subject !== null && jsonBuiltInProperties.subject !== undefined) {\n        builtInProperties.subject = jsonBuiltInProperties.subject;\n      } //Title\n\n\n      if (jsonBuiltInProperties.title !== null && jsonBuiltInProperties.title !== undefined) {\n        builtInProperties.title = jsonBuiltInProperties.title;\n      } //Creation date\n\n\n      if (jsonBuiltInProperties.createdDate !== null && jsonBuiltInProperties.createdDate !== undefined) {\n        builtInProperties.createdDate = jsonBuiltInProperties.createdDate;\n      } //Modified date\n\n\n      if (jsonBuiltInProperties.modifiedDate !== null && jsonBuiltInProperties.modifiedDate !== undefined) {\n        builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate;\n      } //Tags\n\n\n      if (jsonBuiltInProperties.tags !== null && jsonBuiltInProperties.tags !== undefined) {\n        builtInProperties.tags = jsonBuiltInProperties.tags;\n      } //Status\n\n\n      if (jsonBuiltInProperties.status !== null && jsonBuiltInProperties.status !== undefined) {\n        builtInProperties.status = jsonBuiltInProperties.status;\n      }\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parserWorksheets\",\n    value: function parserWorksheets(json) {\n      this.worksheets = new Worksheets();\n      var length = json.length;\n\n      for (var i = 0; i < length; i++) {\n        var jsonSheet = json[i];\n        var sheet = new Worksheet();\n        this.mergeCells = new MergeCells();\n        this.mergedCellsStyle = new Map();\n        this.mHyperLinks = []; //Name\n\n        if (jsonSheet.name !== null && jsonSheet.name !== undefined) {\n          sheet.name = jsonSheet.name;\n        } else {\n          sheet.name = 'Sheet' + (i + 1).toString();\n        }\n\n        if (jsonSheet.enableRtl !== null && jsonSheet.enableRtl !== undefined) {\n          sheet.enableRtl = jsonSheet.enableRtl;\n        }\n\n        sheet.index = i + 1; //Columns\n\n        if (jsonSheet.columns !== null && jsonSheet.columns !== undefined) {\n          this.parserColumns(jsonSheet.columns, sheet);\n        } //Rows\n\n\n        if (jsonSheet.rows !== null && jsonSheet.rows !== undefined) {\n          this.parserRows(jsonSheet.rows, sheet);\n        } //showGridLines\n\n\n        if (jsonSheet.showGridLines !== null && jsonSheet.showGridLines !== undefined) {\n          sheet.showGridLines = jsonSheet.showGridLines;\n        } //FreezePanes\n\n\n        if (jsonSheet.freeze !== null && jsonSheet.freeze !== undefined) {\n          this.parserFreezePanes(jsonSheet.freeze, sheet);\n        } //Print Title\n\n\n        if (jsonSheet.printTitle !== null && jsonSheet.printTitle !== undefined) {\n          this.parserPrintTitle(jsonSheet.printTitle, sheet);\n        }\n\n        if (jsonSheet.pageSetup !== undefined) {\n          if (jsonSheet.pageSetup.isSummaryRowBelow !== undefined) {\n            sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow;\n          }\n        }\n\n        if (jsonSheet.images !== undefined) {\n          this.parserImages(jsonSheet.images, sheet);\n        }\n\n        if (jsonSheet.autoFilters !== null && jsonSheet.autoFilters !== undefined) {\n          this.parseFilters(jsonSheet.autoFilters, sheet);\n        }\n\n        sheet.index = i + 1;\n        sheet.mergeCells = this.mergeCells;\n        sheet.hyperLinks = this.mHyperLinks;\n        this.worksheets.push(sheet);\n      }\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"mergeOptions\",\n    value: function mergeOptions(fromJson, toJson) {\n      /* tslint:disable:no-any */\n      var result = {};\n      this.applyProperties(fromJson, result);\n      this.applyProperties(toJson, result);\n      return result;\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"applyProperties\",\n    value: function applyProperties(sourceJson, destJson) {\n      var keys = Object.keys(sourceJson);\n\n      for (var index = 0; index < keys.length; index++) {\n        if (keys[index] !== 'name') {\n          destJson[keys[index]] = sourceJson[keys[index]];\n        }\n      }\n    }\n  }, {\n    key: \"getCellName\",\n    value: function getCellName(row, column) {\n      return this.getColumnName(column) + row.toString();\n    }\n  }, {\n    key: \"getColumnName\",\n    value: function getColumnName(col) {\n      col--;\n      var strColumnName = '';\n\n      do {\n        var iCurrentDigit = col % 26;\n        col = col / 26 - 1;\n        strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;\n      } while (col >= 0);\n\n      return strColumnName;\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parserPrintTitle\",\n    value: function parserPrintTitle(json, sheet) {\n      var printTitleName = '';\n      var titleRowName;\n\n      if (json.fromRow !== null && json.fromRow !== undefined) {\n        var fromRow = json.fromRow;\n        var toRow;\n\n        if (json.toRow !== null && json.toRow !== undefined) {\n          toRow = json.toRow;\n        } else {\n          toRow = json.fromRow;\n        }\n\n        titleRowName = '$' + fromRow + ':$' + toRow;\n      }\n\n      var titleColName;\n\n      if (json.fromColumn !== null && json.fromColumn !== undefined) {\n        var fromColumn = json.fromColumn;\n        var toColumn;\n\n        if (json.toColumn !== null && json.toColumn !== undefined) {\n          toColumn = json.toColumn;\n        } else {\n          toColumn = json.fromColumn;\n        }\n\n        titleColName = '$' + this.getColumnName(fromColumn) + ':$' + this.getColumnName(toColumn);\n      }\n\n      if (titleRowName !== undefined) {\n        printTitleName += sheet.name + '!' + titleRowName;\n      }\n\n      if (titleColName !== undefined && titleRowName !== undefined) {\n        printTitleName += ',' + (sheet.name + '!' + titleColName);\n      } else if (titleColName !== undefined) {\n        printTitleName += sheet.name + '!' + titleColName;\n      }\n\n      if (printTitleName !== '') {\n        this.printTitles.set(sheet.index - 1, printTitleName);\n      }\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parserFreezePanes\",\n    value: function parserFreezePanes(json, sheet) {\n      sheet.freezePanes = new FreezePane();\n\n      if (json.row !== null && json.row !== undefined) {\n        sheet.freezePanes.row = json.row;\n      } else {\n        sheet.freezePanes.row = 0;\n      }\n\n      if (json.column !== null && json.column !== undefined) {\n        sheet.freezePanes.column = json.column;\n      } else {\n        sheet.freezePanes.column = 0;\n      }\n\n      sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parserColumns\",\n    value: function parserColumns(json, sheet) {\n      var columnsLength = json.length;\n      sheet.columns = [];\n\n      for (var column = 0; column < columnsLength; column++) {\n        var col = new Column();\n\n        if (json[column].index !== null && json[column].index !== undefined) {\n          col.index = json[column].index;\n        } else {\n          throw Error('Column index is missing.');\n        }\n\n        if (json[column].width !== null && json[column].width !== undefined) {\n          col.width = json[column].width;\n        }\n\n        sheet.columns.push(col);\n      }\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parserRows\",\n    value: function parserRows(json, sheet) {\n      var rowsLength = json.length;\n      sheet.rows = new Rows();\n      var rowId = 0;\n\n      for (var r = 0; r < rowsLength; r++) {\n        var row = this.parserRow(json[r], rowId);\n        rowId = row.index;\n        sheet.rows.add(row);\n      }\n\n      this.insertMergedCellsStyle(sheet);\n    }\n  }, {\n    key: \"insertMergedCellsStyle\",\n    value: function insertMergedCellsStyle(sheet) {\n      var _this4 = this;\n\n      if (this.mergeCells.length > 0) {\n        this.mergedCellsStyle.forEach(function (value, key) {\n          var row = sheet.rows.filter(function (item) {\n            return item.index === value.y;\n          })[0];\n\n          if (!isNullOrUndefined(row)) {\n            var cell = row.cells.filter(function (item) {\n              return item.index === value.x;\n            })[0];\n\n            if (!isNullOrUndefined(cell)) {\n              cell.styleIndex = value.styleIndex;\n            } else {\n              var cells = row.cells.filter(function (item) {\n                return item.index <= value.x;\n              });\n              var insertIndex = 0;\n\n              if (cells.length > 0) {\n                insertIndex = row.cells.indexOf(cells[cells.length - 1]) + 1;\n              }\n\n              row.cells.splice(insertIndex, 0, _this4.createCell(value, key));\n            }\n          } else {\n            var rows = sheet.rows.filter(function (item) {\n              return item.index <= value.y;\n            });\n            var rowToInsert = new Row();\n            rowToInsert.index = value.y;\n            rowToInsert.cells = new Cells();\n            rowToInsert.cells.add(_this4.createCell(value, key));\n            var _insertIndex = 0;\n\n            if (rows.length > 0) {\n              _insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1;\n            }\n\n            sheet.rows.splice(_insertIndex, 0, rowToInsert);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"createCell\",\n    value: function createCell(value, key) {\n      var cellToInsert = new Cell();\n      cellToInsert.refName = key;\n      cellToInsert.index = value.x;\n      cellToInsert.cellStyle = new CellStyle();\n      cellToInsert.styleIndex = value.styleIndex;\n      return cellToInsert;\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parserRow\",\n    value: function parserRow(json, rowIndex) {\n      var row = new Row(); //Row Height\n\n      if (json.height !== null && json.height !== undefined) {\n        row.height = json.height;\n      } //Row index\n\n\n      if (json.index !== null && json.index !== undefined) {\n        row.index = json.index;\n      } else {\n        throw Error('Row index is missing.');\n      }\n\n      if (json.grouping !== null && json.grouping !== undefined) {\n        this.parseGrouping(json.grouping, row);\n      }\n\n      this.parseCells(json.cells, row);\n      return row;\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parseGrouping\",\n    value: function parseGrouping(json, row) {\n      row.grouping = new Grouping();\n\n      if (json.outlineLevel !== undefined) {\n        row.grouping.outlineLevel = json.outlineLevel;\n      }\n\n      if (json.isCollapsed !== undefined) {\n        row.grouping.isCollapsed = json.isCollapsed;\n      }\n\n      if (json.isHidden !== undefined) {\n        row.grouping.isHidden = json.isHidden;\n      }\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parseCells\",\n    value: function parseCells(json, row) {\n      row.cells = new Cells();\n      var cellsLength = json !== undefined ? json.length : 0;\n      var spanMin = 1;\n      var spanMax = 1;\n\n      for (var cellId = 0; cellId < cellsLength; cellId++) {\n        /* tslint:disable:no-any */\n        var jsonCell = json[cellId];\n        var cell = new Cell(); //cell index\n\n        if (jsonCell.index !== null && jsonCell.index !== undefined) {\n          cell.index = jsonCell.index;\n        } else {\n          throw Error('Cell index is missing.');\n        }\n\n        if (cell.index < spanMin) {\n          spanMin = cell.index;\n        } else if (cell.index > spanMax) {\n          spanMax = cell.index;\n        } //Update the Cell name\n\n\n        cell.refName = this.getCellName(row.index, cell.index); //Row span\n\n        if (jsonCell.rowSpan !== null && jsonCell.rowSpan !== undefined) {\n          cell.rowSpan = jsonCell.rowSpan - 1;\n        } else {\n          cell.rowSpan = 0;\n        } //Column span\n\n\n        if (jsonCell.colSpan !== null && jsonCell.colSpan !== undefined) {\n          cell.colSpan = jsonCell.colSpan - 1;\n        } else {\n          cell.colSpan = 0;\n        } //Hyperlink\n\n\n        if (jsonCell.hyperlink !== null && jsonCell.hyperlink !== undefined) {\n          var hyperLink = new HyperLink();\n\n          if (jsonCell.hyperlink.target !== undefined) {\n            hyperLink.target = jsonCell.hyperlink.target;\n\n            if (jsonCell.hyperlink.displayText !== undefined) {\n              cell.value = jsonCell.hyperlink.displayText;\n            } else {\n              cell.value = jsonCell.hyperlink.target;\n            }\n\n            cell.type = this.getCellValueType(cell.value);\n            hyperLink.ref = cell.refName;\n            hyperLink.rId = this.mHyperLinks.length + 1;\n            this.mHyperLinks.push(hyperLink);\n            cell.cellStyle = new CellStyle();\n            /* tslint:disable-next-line:max-line-length */\n\n            this.parserCellStyle(jsonCell.style !== undefined ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle, cell.cellStyle, 'string');\n            cell.styleIndex = cell.cellStyle.index;\n          }\n        } // formulas\n\n\n        if (jsonCell.formula !== null && jsonCell.formula !== undefined) {\n          cell.formula = jsonCell.formula;\n          cell.type = 'formula';\n        } //Cell value\n\n\n        if (jsonCell.value !== null && jsonCell.value !== undefined) {\n          if (cell.formula !== undefined) {\n            cell.value = 0;\n          } else {\n            cell.value = jsonCell.value;\n            cell.type = this.getCellValueType(cell.value);\n          }\n        }\n\n        if (jsonCell.style !== null && jsonCell.style !== undefined && cell.styleIndex === undefined) {\n          cell.cellStyle = new CellStyle();\n\n          if (cell.value instanceof Date) {\n            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14);\n          } else {\n            this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type);\n          }\n\n          cell.styleIndex = cell.cellStyle.index;\n        } else if (cell.value instanceof Date) {\n          cell.cellStyle = new CellStyle();\n          this.parserCellStyle({}, cell.cellStyle, cell.type, 14);\n          cell.styleIndex = cell.cellStyle.index;\n        }\n\n        this.parseCellType(cell);\n        this.mergeCells = this.processMergeCells(cell, row.index, this.mergeCells);\n        row.cells.add(cell);\n      }\n\n      row.spans = spanMin + ':' + spanMax;\n    }\n  }, {\n    key: \"GetColors\",\n    value: function GetColors() {\n      var colors;\n      colors = new Map();\n      /* tslint:disable */\n\n      colors.set('WHITE', 'FFFFFFFF');\n      /* tslint:disable */\n\n      colors.set('SILVER', 'FFC0C0C0');\n      /* tslint:disable */\n\n      colors.set('GRAY', 'FF808080');\n      /* tslint:disable */\n\n      colors.set('BLACK', 'FF000000');\n      /* tslint:disable */\n\n      colors.set('RED', 'FFFF0000');\n      /* tslint:disable */\n\n      colors.set('MAROON', 'FF800000');\n      /* tslint:disable */\n\n      colors.set('YELLOW', 'FFFFFF00');\n      /* tslint:disable */\n\n      colors.set('OLIVE', 'FF808000');\n      /* tslint:disable */\n\n      colors.set('LIME', 'FF00FF00');\n      /* tslint:disable */\n\n      colors.set('GREEN', 'FF008000');\n      /* tslint:disable */\n\n      colors.set('AQUA', 'FF00FFFF');\n      /* tslint:disable */\n\n      colors.set('TEAL', 'FF008080');\n      /* tslint:disable */\n\n      colors.set('BLUE', 'FF0000FF');\n      /* tslint:disable */\n\n      colors.set('NAVY', 'FF000080');\n      /* tslint:disable */\n\n      colors.set('FUCHSIA', 'FFFF00FF');\n      /* tslint:disable */\n\n      colors.set('PURPLE', 'FF800080');\n      return colors;\n    }\n  }, {\n    key: \"processColor\",\n    value: function processColor(colorVal) {\n      if (colorVal.indexOf('#') === 0) {\n        return colorVal.replace('#', 'FF');\n      }\n\n      colorVal = colorVal.toUpperCase();\n      this.rgbColors = this.GetColors();\n\n      if (this.rgbColors.has(colorVal)) {\n        colorVal = this.rgbColors.get(colorVal);\n      } else {\n        colorVal = 'FF000000';\n      }\n\n      return colorVal;\n    }\n  }, {\n    key: \"processCellValue\",\n    value: function processCellValue(value, cell) {\n      var cellValue = value;\n\n      if (value.indexOf(\"<font\") !== -1 || value.indexOf(\"<a href\") !== -1 || value.indexOf(\"<b>\") !== -1 || value.indexOf(\"<i>\") !== -1 || value.indexOf(\"<u>\") !== -1) {\n        var processedVal = '';\n        var startindex = value.indexOf('<', 0);\n        var endIndex = value.indexOf('>', startindex + 1);\n\n        if (startindex >= 0 && endIndex >= 0) {\n          if (startindex !== 0) {\n            processedVal += '<r><t xml:space=\"preserve\">' + value.substring(0, startindex) + '</t></r>';\n          }\n\n          while (startindex >= 0 && endIndex >= 0) {\n            endIndex = value.indexOf('>', startindex + 1);\n\n            if (endIndex >= 0) {\n              var subString = value.substring(startindex + 1, endIndex);\n              startindex = value.indexOf('<', endIndex + 1);\n\n              if (startindex < 0) {\n                startindex = cellValue.length;\n              }\n\n              var text = cellValue.substring(endIndex + 1, startindex);\n\n              if (text.length !== 0) {\n                var subSplit = subString.split(' ');\n\n                if (subSplit.length > 0) {\n                  processedVal += '<r><rPr>';\n                }\n\n                if (subSplit.length > 1) {\n                  var _iterator5 = _createForOfIteratorHelper(subSplit),\n                      _step5;\n\n                  try {\n                    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                      var element = _step5.value;\n                      var start = element.trim().substring(0, 5);\n\n                      switch (start) {\n                        case 'size=':\n                          processedVal += '<sz val=\"' + element.substring(6, element.length - 1) + '\"/>';\n                          break;\n\n                        case 'face=':\n                          processedVal += '<rFont val=\"' + element.substring(6, element.length - 1) + '\"/>';\n                          break;\n\n                        case 'color':\n                          processedVal += '<color rgb=\"' + this.processColor(element.substring(7, element.length - 1)) + '\"/>';\n                          break;\n\n                        case 'href=':\n                          var hyperLink = new HyperLink();\n                          hyperLink.target = element.substring(6, element.length - 1).trim();\n                          hyperLink.ref = cell.refName;\n                          hyperLink.rId = this.mHyperLinks.length + 1;\n                          this.mHyperLinks.push(hyperLink);\n                          processedVal += '<color rgb=\"FF0000FF\"/><u/><b/>';\n                          break;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator5.e(err);\n                  } finally {\n                    _iterator5.f();\n                  }\n                } else if (subSplit.length === 1) {\n                  var style = subSplit[0].trim();\n\n                  switch (style) {\n                    case 'b':\n                      processedVal += '<b/>';\n                      break;\n\n                    case 'i':\n                      processedVal += '<i/>';\n                      break;\n\n                    case 'u':\n                      processedVal += '<u/>';\n                      break;\n                  }\n                }\n\n                processedVal += '</rPr><t xml:space=\"preserve\">' + text + '</t></r>';\n              }\n            }\n          }\n\n          if (processedVal === '') {\n            return cellValue;\n          }\n\n          return processedVal;\n        } else {\n          return cellValue;\n        }\n      } else {\n        return cellValue;\n      }\n    }\n  }, {\n    key: \"applyGlobalStyle\",\n    value: function applyGlobalStyle(json, cellStyle) {\n      if (this.cellStyles.has(json.name)) {\n        cellStyle.index = this.mStyles.filter(function (a) {\n          return a.name === json.name;\n        })[0].index;\n        cellStyle.name = json.name;\n      }\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parserCellStyle\",\n    value: function parserCellStyle(json, cellStyle, cellType, defStyleIndex) {\n      //name\n      if (json.name !== null && json.name !== undefined) {\n        if (cellStyle.isGlobalStyle) {\n          cellStyle.name = json.name;\n        } else {\n          this.applyGlobalStyle(json, cellStyle);\n          return;\n        }\n      } //background color\n\n\n      if (json.backColor !== null && json.backColor !== undefined) {\n        cellStyle.backColor = json.backColor;\n      } //borders\n      //leftBorder\n\n\n      cellStyle.borders = new Borders(); //AllBorder\n\n      if (json.borders !== null && json.borders !== undefined) {\n        this.parserBorder(json.borders, cellStyle.borders.all);\n      } //leftborder\n\n\n      if (json.leftBorder !== null && json.leftBorder !== undefined) {\n        this.parserBorder(json.leftBorder, cellStyle.borders.left);\n      } //rightBorder\n\n\n      if (json.rightBorder !== null && json.rightBorder !== undefined) {\n        this.parserBorder(json.rightBorder, cellStyle.borders.right);\n      } //topBorder\n\n\n      if (json.topBorder !== null && json.topBorder !== undefined) {\n        this.parserBorder(json.topBorder, cellStyle.borders.top);\n      } //bottomBorder\n\n\n      if (json.bottomBorder !== null && json.bottomBorder !== undefined) {\n        this.parserBorder(json.bottomBorder, cellStyle.borders.bottom);\n      } //fontName\n\n\n      if (json.fontName !== null && json.fontName !== undefined) {\n        cellStyle.fontName = json.fontName;\n      } //fontSize\n\n\n      if (json.fontSize !== null && json.fontSize !== undefined) {\n        cellStyle.fontSize = json.fontSize;\n      } //fontColor\n\n\n      if (json.fontColor !== null && json.fontColor !== undefined) {\n        cellStyle.fontColor = json.fontColor;\n      } //italic\n\n\n      if (json.italic !== null && json.italic !== undefined) {\n        cellStyle.italic = json.italic;\n      } //bold\n\n\n      if (json.bold !== null && json.bold !== undefined) {\n        cellStyle.bold = json.bold;\n      } //hAlign\n\n\n      if (json.hAlign !== null && json.hAlign !== undefined) {\n        cellStyle.hAlign = json.hAlign.toLowerCase();\n      } //indent\n\n\n      if (json.indent !== null && json.indent !== undefined) {\n        cellStyle.indent = json.indent;\n\n        if (!(cellStyle.hAlign === 'left' || cellStyle.hAlign === 'right')) {\n          cellStyle.hAlign = 'left';\n        }\n      }\n\n      if (json.rotation !== null && json.rotation !== undefined) {\n        cellStyle.rotation = json.rotation;\n      } //vAlign\n\n\n      if (json.vAlign !== null && json.vAlign !== undefined) {\n        cellStyle.vAlign = json.vAlign.toLowerCase();\n      } //underline\n\n\n      if (json.underline !== null && json.underline !== undefined) {\n        cellStyle.underline = json.underline;\n      } //wrapText\n\n\n      if (json.wrapText !== null && json.wrapText !== undefined) {\n        cellStyle.wrapText = json.wrapText;\n      } //numberFormat\n\n\n      if (json.numberFormat !== null && json.numberFormat !== undefined) {\n        if (json.type !== null && json.type !== undefined) {\n          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type);\n        } else {\n          cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType);\n        }\n      } else if (defStyleIndex !== undefined) {\n        cellStyle.numFmtId = 14;\n        cellStyle.numberFormat = 'GENERAL';\n      } else {\n        cellStyle.numberFormat = 'GENERAL';\n      }\n\n      cellStyle.index = this.processCellStyle(cellStyle);\n    }\n  }, {\n    key: \"switchNumberFormat\",\n    value: function switchNumberFormat(numberFormat, type) {\n      var format = this.getNumberFormat(numberFormat, type);\n\n      if (format !== numberFormat) {\n        var numFmt = this.mNumFmt.get(numberFormat);\n\n        if (numFmt !== undefined) {\n          numFmt.formatCode = format;\n\n          if (this.mNumFmt.has(format)) {\n            var _iterator6 = _createForOfIteratorHelper(this.mCellStyleXfs),\n                _step6;\n\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var cellStyleXfs = _step6.value;\n\n                if (cellStyleXfs.numFmtId === numFmt.numFmtId) {\n                  cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n                }\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n\n            var _iterator7 = _createForOfIteratorHelper(this.mCellXfs),\n                _step7;\n\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var cellXfs = _step7.value;\n\n                if (cellXfs.numFmtId === numFmt.numFmtId) {\n                  cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n                }\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getNumberFormat\",\n    value: function getNumberFormat(numberFormat, type) {\n      var returnFormat;\n\n      switch (type) {\n        case 'number':\n          try {\n            returnFormat = this.intl.getNumberPattern({\n              format: numberFormat,\n              currency: this.currency,\n              useGrouping: true\n            }, true);\n          } catch (error) {\n            returnFormat = numberFormat;\n          }\n\n          break;\n\n        case 'datetime':\n          try {\n            returnFormat = this.intl.getDatePattern({\n              skeleton: numberFormat,\n              type: 'dateTime'\n            }, true);\n          } catch (error) {\n            try {\n              returnFormat = this.intl.getDatePattern({\n                format: numberFormat,\n                type: 'dateTime'\n              }, true);\n            } catch (error) {\n              returnFormat = numberFormat;\n            }\n          }\n\n          break;\n\n        case 'date':\n          try {\n            returnFormat = this.intl.getDatePattern({\n              skeleton: numberFormat,\n              type: 'date'\n            }, true);\n          } catch (error) {\n            try {\n              returnFormat = this.intl.getDatePattern({\n                format: numberFormat,\n                type: 'date'\n              }, true);\n            } catch (error) {\n              returnFormat = numberFormat;\n            }\n          }\n\n          break;\n\n        case 'time':\n          try {\n            returnFormat = this.intl.getDatePattern({\n              skeleton: numberFormat,\n              type: 'time'\n            }, true);\n          } catch (error) {\n            try {\n              returnFormat = this.intl.getDatePattern({\n                format: numberFormat,\n                type: 'time'\n              }, true);\n            } catch (error) {\n              returnFormat = numberFormat;\n            }\n          }\n\n          break;\n\n        default:\n          returnFormat = numberFormat;\n          break;\n      }\n\n      return returnFormat;\n    }\n    /* tslint:disable:no-any */\n\n  }, {\n    key: \"parserBorder\",\n    value: function parserBorder(json, border) {\n      if (json.color !== null && json.color !== undefined) {\n        border.color = json.color;\n      } else {\n        border.color = '#000000';\n      }\n\n      if (json.lineStyle !== null && json.lineStyle !== undefined) {\n        border.lineStyle = json.lineStyle;\n      } else {\n        border.lineStyle = 'thin';\n      }\n    }\n  }, {\n    key: \"processCellStyle\",\n    value: function processCellStyle(style) {\n      if (style.isGlobalStyle) {\n        this.processNumFormatId(style);\n        this.mStyles.push(style);\n        return this.mStyles.length;\n      } else {\n        var compareResult = this.compareStyle(style);\n\n        if (!compareResult.result) {\n          this.processNumFormatId(style);\n          this.mStyles.push(style);\n          return this.mStyles.length;\n        } else {\n          //Return the index of the already existing style.\n          return compareResult.index;\n        }\n      }\n    }\n  }, {\n    key: \"processNumFormatId\",\n    value: function processNumFormatId(style) {\n      if (style.numberFormat !== 'GENERAL' && !this.mNumFmt.has(style.numberFormat)) {\n        var id = this.mNumFmt.size + 164;\n        this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n      }\n    }\n  }, {\n    key: \"isNewFont\",\n    value: function isNewFont(toCompareStyle) {\n      var result = false;\n      var index = 0;\n\n      var _iterator8 = _createForOfIteratorHelper(this.mFonts),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var font = _step8.value;\n          index++;\n          var fontColor = undefined;\n\n          if (toCompareStyle.fontColor !== undefined) {\n            fontColor = 'FF' + toCompareStyle.fontColor.replace('#', '');\n          }\n\n          result = font.color === fontColor && font.b === toCompareStyle.bold && font.i === toCompareStyle.italic && font.u === toCompareStyle.underline && font.name === toCompareStyle.fontName && font.sz === toCompareStyle.fontSize;\n\n          if (result) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      index = index - 1;\n      return {\n        index: index,\n        result: result\n      };\n    }\n  }, {\n    key: \"isNewBorder\",\n    value: function isNewBorder(toCompareStyle) {\n      var bStyle = new CellStyle();\n\n      if (this.isAllBorder(toCompareStyle.borders)) {\n        return bStyle.borders.all.color === toCompareStyle.borders.all.color && bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle;\n      } else {\n        return bStyle.borders.left.color === toCompareStyle.borders.left.color && bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && bStyle.borders.right.color === toCompareStyle.borders.right.color && bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && bStyle.borders.top.color === toCompareStyle.borders.top.color && bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;\n      }\n    }\n  }, {\n    key: \"isAllBorder\",\n    value: function isAllBorder(toCompareBorder) {\n      var allBorderStyle = new CellStyle();\n      return allBorderStyle.borders.all.color !== toCompareBorder.all.color && allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;\n    }\n  }, {\n    key: \"compareStyle\",\n    value: function compareStyle(toCompareStyle) {\n      var result = true;\n      var index = 0;\n\n      var _iterator9 = _createForOfIteratorHelper(this.mStyles),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var baseStyle = _step9.value;\n          result = baseStyle.isGlobalStyle ? false : baseStyle.backColor === toCompareStyle.backColor && baseStyle.bold === toCompareStyle.bold && baseStyle.numFmtId === toCompareStyle.numFmtId && baseStyle.numberFormat === toCompareStyle.numberFormat && baseStyle.type === toCompareStyle.type && baseStyle.fontColor === toCompareStyle.fontColor && baseStyle.fontName === toCompareStyle.fontName && baseStyle.fontSize === toCompareStyle.fontSize && baseStyle.hAlign === toCompareStyle.hAlign && baseStyle.italic === toCompareStyle.italic && baseStyle.underline === toCompareStyle.underline && baseStyle.vAlign === toCompareStyle.vAlign && baseStyle.indent === toCompareStyle.indent && baseStyle.rotation === toCompareStyle.rotation && baseStyle.wrapText === toCompareStyle.wrapText && baseStyle.borders.all.color === toCompareStyle.borders.all.color && baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle && baseStyle.borders.left.color === toCompareStyle.borders.left.color && baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && baseStyle.borders.right.color === toCompareStyle.borders.right.color && baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && baseStyle.borders.top.color === toCompareStyle.borders.top.color && baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;\n\n          if (result) {\n            index = baseStyle.index;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return {\n        index: index,\n        result: result\n      };\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(array, item) {\n      var index = array.indexOf(item);\n      return index > -1 && index < array.length;\n    }\n  }, {\n    key: \"getCellValueType\",\n    value: function getCellValueType(value) {\n      if (value instanceof Date) {\n        return 'datetime';\n      } else if (typeof value === 'boolean') {\n        return 'boolean';\n      } else if (typeof value === 'number') {\n        return 'number';\n      } else {\n        return 'string';\n      }\n    }\n  }, {\n    key: \"parseCellType\",\n    value: function parseCellType(cell) {\n      var type = cell.type;\n      var saveType;\n      var value = cell.value;\n\n      switch (type) {\n        case 'datetime':\n          value = this.toOADate(value);\n\n          if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n            if (this.globalStyles.has(cell.cellStyle.name)) {\n              var _value = this.globalStyles.get(cell.cellStyle.name);\n\n              this.switchNumberFormat(_value.format, _value.type);\n            }\n          }\n\n          saveType = 'n';\n          break;\n        //TODO: Update the number format index and style\n\n        case 'boolean':\n          value = value ? 1 : 0;\n          saveType = 'b';\n          break;\n\n        case 'number':\n          saveType = 'n';\n\n          if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n            if (this.globalStyles.has(cell.cellStyle.name)) {\n              this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, 'number');\n            }\n          }\n\n          break;\n\n        case 'string':\n          this.sharedStringCount++;\n          saveType = 's';\n          var sstvalue = this.processCellValue(value, cell);\n\n          if (!this.contains(this.sharedString, sstvalue)) {\n            this.sharedString.push(sstvalue);\n          }\n\n          value = this.sharedString.indexOf(sstvalue);\n          break;\n\n        default:\n          break;\n      }\n\n      cell.saveType = saveType;\n      cell.value = value;\n    }\n  }, {\n    key: \"parserImages\",\n    value: function parserImages(json, sheet) {\n      var imagesLength = json.length;\n      sheet.images = [];\n\n      for (var p = 0; p < imagesLength; p++) {\n        var image = this.parserImage(json[p]);\n        sheet.images.push(image);\n      }\n    }\n  }, {\n    key: \"parseFilters\",\n    value: function parseFilters(json, sheet) {\n      sheet.autoFilters = new AutoFilters();\n      if (json.row !== null && json.row !== undefined) sheet.autoFilters.row = json.row;else throw new Error('Argument Null Exception: row null or empty');\n      if (json.lastRow !== null && json.lastRow !== undefined) sheet.autoFilters.lastRow = json.lastRow;else throw new Error('Argument Null Exception: lastRow cannot be null or empty');\n      if (json.column !== null && json.column !== undefined) sheet.autoFilters.column = json.column;else throw new Error('Argument Null Exception: column cannot be null or empty');\n      if (json.lastColumn !== null && json.row !== undefined) sheet.autoFilters.lastColumn = json.lastColumn;else throw new Error('Argument Null Exception: lastColumn cannot be null or empty');\n    }\n  }, {\n    key: \"parserImage\",\n    value: function parserImage(json) {\n      var image = new Image();\n\n      if (json.image !== null && json.image !== undefined) {\n        image.image = json.image;\n      }\n\n      if (json.row !== null && json.row !== undefined) {\n        image.row = json.row;\n      }\n\n      if (json.column !== null && json.column !== undefined) {\n        image.column = json.column;\n      }\n\n      if (json.lastRow !== null && json.lastRow !== undefined) {\n        image.lastRow = json.lastRow;\n      }\n\n      if (json.lastColumn !== null && json.lastColumn !== undefined) {\n        image.lastColumn = json.lastColumn;\n      }\n\n      if (json.width !== null && json.width !== undefined) {\n        image.width = json.width;\n      }\n\n      if (json.height !== null && json.height !== undefined) {\n        image.height = json.height;\n      }\n\n      if (json.horizontalFlip !== null && json.horizontalFlip !== undefined) {\n        image.horizontalFlip = json.horizontalFlip;\n      }\n\n      if (json.verticalFlip !== null && json.verticalFlip !== undefined) {\n        image.verticalFlip = json.verticalFlip;\n      }\n\n      if (json.rotation !== null && json.rotation !== undefined) {\n        image.rotation = json.rotation;\n      }\n\n      return image;\n    }\n  }, {\n    key: \"saveAsBlob\",\n    value: function saveAsBlob(blobSaveType) {\n      var _this5 = this;\n\n      switch (blobSaveType) {\n        case 'text/csv':\n          return new Promise(function (resolve, reject) {\n            var obj = {};\n            obj.blobData = _this5.csvHelper.saveAsBlob();\n            resolve(obj);\n          });\n\n        default:\n          return new Promise(function (resolve, reject) {\n            _this5.saveInternal();\n\n            _this5.mArchive.saveAsBlob().then(function (blob) {\n              var obj = {};\n              obj.blobData = new Blob([blob], {\n                type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n              });\n              resolve(obj);\n            });\n          });\n      }\n    }\n  }, {\n    key: \"save\",\n    value: function save(fileName, proxyUrl) {\n      var _this6 = this;\n\n      if (fileName === null || fileName === undefined || fileName === '') {\n        throw new Error('Argument Null Exception: fileName cannot be null or empty');\n      }\n\n      var xlsxMatch = fileName.match('.xlsx$');\n      var csvMatch = fileName.match('.csv$');\n\n      if (xlsxMatch !== null && xlsxMatch[0] === '.' + this.mSaveType) {\n        this.saveInternal();\n        this.mArchive.save(fileName).then(function () {\n          _this6.mArchive.destroy();\n        });\n      } else if (csvMatch !== null && csvMatch[0] === '.' + this.mSaveType) {\n        this.csvHelper.save(fileName);\n      } else {\n        throw Error('Save type and file extension is different.');\n      }\n    }\n  }, {\n    key: \"saveInternal\",\n    value: function saveInternal() {\n      this.saveWorkbook();\n      this.saveWorksheets();\n      this.saveSharedString();\n      this.saveStyles();\n      this.saveApp(this.builtInProperties);\n      this.saveCore(this.builtInProperties);\n      this.saveContentType();\n      this.saveTopLevelRelation();\n      this.saveWorkbookRelation();\n    }\n  }, {\n    key: \"saveWorkbook\",\n    value: function saveWorkbook() {\n      /* tslint:disable-next-line:max-line-length */\n      var workbookTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><workbook xmlns:r = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns= \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"><workbookPr codeName=\"ThisWorkbook\" defaultThemeVersion= \"153222\"/><bookViews><workbookView activeTab=\"0\"/></bookViews>';\n      var sheets = '<sheets>';\n      var length = this.worksheets.length;\n\n      for (var i = 0; i < length; i++) {\n        /* tslint:disable-next-line:max-line-length */\n        var sheetName = this.worksheets[i].name;\n        sheetName = sheetName.replace(\"&\", \"&amp;\");\n        sheetName = sheetName.replace(\"<\", \"&lt;\");\n        sheetName = sheetName.replace(\">\", \"&gt;\");\n        sheetName = sheetName.replace(\"\\\"\", \"&quot;\");\n        sheets += '<sheet name=\"' + sheetName + '\" sheetId=\"' + (i + 1).toString() + '\" r:id =\"rId' + (i + 1).toString() + '\" />';\n      }\n\n      sheets += '</sheets>';\n      workbookTemp += sheets;\n\n      if (this.printTitles.size > 0) {\n        var printTitle = '<definedNames>';\n        this.printTitles.forEach(function (value, key) {\n          printTitle += '<definedName name=\"_xlnm.Print_Titles\" localSheetId=\"' + key + '\">' + value + '</definedName>';\n        });\n        printTitle += '</definedNames>';\n        workbookTemp += printTitle;\n      }\n\n      this.addToArchive(workbookTemp + '</workbook>', 'xl/workbook.xml');\n    }\n  }, {\n    key: \"saveWorksheets\",\n    value: function saveWorksheets() {\n      var length = this.worksheets.length;\n\n      for (var i = 0; i < length; i++) {\n        this.saveWorksheet(this.worksheets[i], i);\n      }\n    }\n  }, {\n    key: \"saveWorksheet\",\n    value: function saveWorksheet(sheet, index) {\n      var sheetBlob = new BlobHelper();\n      /* tslint:disable-next-line:max-line-length */\n\n      var sheetString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><worksheet xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n\n      if (!sheet.isSummaryRowBelow) {\n        sheetString += '<sheetPr>' + '<outlinePr ' + 'summaryBelow=\"0\" >' + '</outlinePr>' + '</sheetPr>';\n      } else {\n        sheetString += '<sheetPr />';\n      }\n\n      sheetString += this.saveSheetView(sheet);\n\n      if (sheet.columns !== undefined) {\n        var colString = '<cols>';\n\n        var _iterator10 = _createForOfIteratorHelper(sheet.columns),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var column = _step10.value;\n\n            /* tslint:disable-next-line:max-line-length */\n            if (column.width !== undefined) {\n              colString += '<col min=\"' + column.index + '\" max=\"' + column.index + '\" width=\"' + this.pixelsToColumnWidth(column.width) + '\" customWidth=\"1\" />';\n            } else {\n              colString += '<col min=\"' + column.index + '\" max=\"' + column.index + '\" width=\"' + '8.43' + '\" customWidth=\"1\" />';\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        sheetString += colString + '</cols>';\n      }\n\n      sheetString += '<sheetData>';\n      sheetBlob.append(sheetString);\n      sheetString = '';\n\n      if (sheet.rows !== undefined) {\n        var _iterator11 = _createForOfIteratorHelper(sheet.rows),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var row = _step11.value;\n            var rowString = '<row r=\"' + row.index + '\" ';\n\n            if (!isNullOrUndefined(row.spans)) {\n              rowString += 'spans=\"' + row.spans + '\" ';\n            }\n\n            if (row.height !== undefined) {\n              rowString += 'ht=\"' + this.pixelsToRowHeight(row.height) + '\" customHeight=\"1\" ';\n            }\n\n            if (row.grouping !== undefined) {\n              if (row.grouping.isHidden) {\n                rowString += 'hidden=\"1\" ';\n              }\n\n              if (row.grouping.outlineLevel !== undefined) {\n                rowString += 'outlineLevel=\"' + row.grouping.outlineLevel + '\" ';\n              }\n\n              if (row.grouping.isCollapsed) {\n                rowString += 'collapsed=\"1\" ';\n              }\n            }\n\n            rowString += '>';\n\n            var _iterator12 = _createForOfIteratorHelper(row.cells),\n                _step12;\n\n            try {\n              for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                var cell = _step12.value;\n\n                if (cell !== undefined && (cell.value !== undefined || cell.cellStyle !== undefined)) {\n                  rowString += '<c r=\"' + cell.refName + '\" ';\n\n                  if (cell.saveType !== undefined) {\n                    rowString += 't=\"' + cell.saveType + '\" ';\n                  }\n\n                  if (cell.styleIndex !== undefined) {\n                    rowString += 's=\"' + cell.styleIndex + '\" ';\n                  }\n\n                  rowString += ' >';\n\n                  if (cell.formula !== undefined) {\n                    rowString += '<f>' + cell.formula + '</f>';\n                  }\n\n                  if (cell.value !== undefined) {\n                    rowString += '<v>' + cell.value + '</v></c>';\n                  } else {\n                    rowString += '</c>';\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator12.e(err);\n            } finally {\n              _iterator12.f();\n            }\n\n            rowString += '</row>';\n            sheetBlob.append(rowString);\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      }\n\n      sheetString += '</sheetData>';\n      /* tslint:disable-next-line:max-line-length */\n\n      if (sheet.autoFilters !== null && sheet.autoFilters !== undefined) sheetString += '<autoFilter ref=\"' + this.getCellName(sheet.autoFilters.row, sheet.autoFilters.column) + ':' + this.getCellName(sheet.autoFilters.lastRow, sheet.autoFilters.lastColumn) + '\"/>';\n\n      if (sheet.mergeCells.length > 0) {\n        sheetString += '<mergeCells count=\"' + sheet.mergeCells.length + '\">';\n\n        var _iterator13 = _createForOfIteratorHelper(sheet.mergeCells),\n            _step13;\n\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var mCell = _step13.value;\n            sheetString += '<mergeCell ref=\"' + mCell.ref + '\" />';\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n\n        sheetString += '</mergeCells>';\n      }\n\n      if (sheet.hyperLinks.length > 0) {\n        sheetString += '<hyperlinks>';\n\n        var _iterator14 = _createForOfIteratorHelper(sheet.hyperLinks),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var hLink = _step14.value;\n            sheetString += '<hyperlink ref=\"' + hLink.ref + '\" r:id=\"rId' + hLink.rId + '\" />';\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n\n        sheetString += '</hyperlinks>';\n      }\n      /* tslint:disable-next-line:max-line-length */\n\n\n      sheetString += '<pageMargins left=\"0.75\" right=\"0.75\" top=\"1\" bottom=\"1\" header=\"0.5\" footer=\"0.5\" /><headerFooter scaleWithDoc=\"1\" alignWithMargins=\"0\" differentFirst=\"0\" differentOddEven=\"0\" />';\n\n      if (sheet.images != undefined && sheet.images.length > 0) {\n        this.drawingCount++;\n        this.saveDrawings(sheet, sheet.index);\n        sheetString += '<drawing r:id=\"rId' + (sheet.hyperLinks.length + 1) + '\"/>';\n      }\n\n      this.addToArchive(this.saveSheetRelations(sheet), 'xl/worksheets/_rels/sheet' + sheet.index + '.xml.rels');\n      sheetBlob.append(sheetString + '</worksheet>');\n      this.addToArchive(sheetBlob.getBlob(), 'xl/worksheets' + '/sheet' + (index + 1) + '.xml');\n    }\n  }, {\n    key: \"saveDrawings\",\n    value: function saveDrawings(sheet, index) {\n      var drawings = new BlobHelper();\n      /* tslint:disable-next-line:max-line-length */\n\n      var sheetDrawingString = '<xdr:wsDr xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\" xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">';\n\n      if (sheet.images !== undefined) {\n        var imgId = 0;\n\n        var _iterator15 = _createForOfIteratorHelper(sheet.images),\n            _step15;\n\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var pic = _step15.value;\n\n            if (pic.height !== undefined && pic.width !== undefined) {\n              this.updatelastRowOffset(sheet, pic);\n              this.updatelastColumnOffSet(sheet, pic);\n            } else if (pic.lastRow !== undefined && pic.lastColumn !== undefined) {\n              pic.lastRowOffset = 0;\n              pic.lastColOffset = 0;\n            }\n\n            imgId++;\n            sheetDrawingString += '<xdr:twoCellAnchor editAs=\"oneCell\">';\n            sheetDrawingString += '<xdr:from><xdr:col>'; //col\n\n            sheetDrawingString += pic.column - 1;\n            sheetDrawingString += '</xdr:col><xdr:colOff>'; //colOff\n\n            sheetDrawingString += 0;\n            sheetDrawingString += '</xdr:colOff><xdr:row>'; //row\n\n            sheetDrawingString += pic.row - 1;\n            sheetDrawingString += '</xdr:row><xdr:rowOff>'; //rowOff\n\n            sheetDrawingString += 0;\n            sheetDrawingString += '</xdr:rowOff></xdr:from>';\n            sheetDrawingString += '<xdr:to><xdr:col>'; //col\n\n            sheetDrawingString += pic.lastColumn;\n            sheetDrawingString += '</xdr:col><xdr:colOff>'; //colOff\n\n            sheetDrawingString += pic.lastColOffset;\n            sheetDrawingString += '</xdr:colOff><xdr:row>'; //row\n\n            sheetDrawingString += pic.lastRow;\n            sheetDrawingString += '</xdr:row><xdr:rowOff>'; //rowOff\n\n            sheetDrawingString += pic.lastRowOffset;\n            sheetDrawingString += '</xdr:rowOff></xdr:to>';\n            sheetDrawingString += '<xdr:pic>';\n            sheetDrawingString += '<xdr:nvPicPr>';\n            sheetDrawingString += '<xdr:cNvPr id=\"' + imgId + '\" name=\"Picture ' + imgId + '\"> </xdr:cNvPr>';\n            sheetDrawingString += '<xdr:cNvPicPr><a:picLocks noChangeAspect=\"1\"/></xdr:cNvPicPr> </xdr:nvPicPr>';\n            sheetDrawingString += '<xdr:blipFill>';\n            /* tslint:disable-next-line:max-line-length */\n\n            sheetDrawingString += '<a:blip xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" r:embed=\"rId' + imgId + '\" cstate=\"print\">';\n            sheetDrawingString += '</a:blip><a:stretch><a:fillRect /></a:stretch></xdr:blipFill>';\n            sheetDrawingString += '<xdr:spPr>';\n            sheetDrawingString += '<a:xfrm';\n\n            if (pic.rotation != undefined && pic.rotation <= 3600 && pic.rotation >= -3600) {\n              sheetDrawingString += ' rot=\"' + pic.rotation * 60000 + '\"';\n            }\n\n            if (pic.verticalFlip != undefined && pic.verticalFlip != false) {\n              sheetDrawingString += ' flipV=\"1\"';\n            }\n\n            if (pic.horizontalFlip != undefined && pic.horizontalFlip != false) {\n              sheetDrawingString += ' flipH=\"1\"';\n            }\n\n            sheetDrawingString += '/>';\n            sheetDrawingString += '<a:prstGeom prst=\"rect\"><a:avLst /></a:prstGeom></xdr:spPr>';\n            sheetDrawingString += '</xdr:pic><xdr:clientData /></xdr:twoCellAnchor>';\n            var imageData = this.convertBase64toImage(pic.image);\n            this.imageCount += 1;\n            this.addToArchive(imageData, 'xl/media/image' + this.imageCount + '.png');\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n\n        drawings.append(sheetDrawingString);\n        drawings.append('</xdr:wsDr>');\n        this.saveDrawingRelations(sheet);\n        this.addToArchive(drawings.getBlob(), 'xl/drawings/drawing' + this.drawingCount + '.xml');\n      }\n    }\n  }, {\n    key: \"updatelastRowOffset\",\n    value: function updatelastRowOffset(sheet, picture) {\n      var iCurHeight = picture.height;\n      var iCurRow = picture.row;\n      var iCurOffset = 0;\n\n      while (iCurHeight >= 0) {\n        var iRowHeight = 0;\n        if (sheet.rows !== undefined && sheet.rows[iCurRow - 1] !== undefined) iRowHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === undefined ? 15 : sheet.rows[iCurRow - 1].height);else iRowHeight = this.convertToPixels(15);\n        var iSpaceInCell = iRowHeight - iCurOffset * iRowHeight / 256;\n\n        if (iSpaceInCell > iCurHeight) {\n          picture.lastRow = iCurRow;\n          picture.lastRowOffset = iCurOffset + iCurHeight * 256 / iRowHeight;\n          var rowHiddenHeight = 0;\n          if (sheet.rows !== undefined && sheet.rows[iCurRow - 1] !== undefined) rowHiddenHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === undefined ? 15 : sheet.rows[iCurRow - 1].height);else rowHiddenHeight = this.convertToPixels(15);\n          picture.lastRowOffset = rowHiddenHeight * picture.lastRowOffset / 256;\n          picture.lastRowOffset = Math.round(picture.lastRowOffset / this.unitsProportions[7]);\n          break;\n        } else {\n          iCurHeight -= iSpaceInCell;\n          iCurRow++;\n          iCurOffset = 0;\n        }\n      }\n    }\n  }, {\n    key: \"updatelastColumnOffSet\",\n    value: function updatelastColumnOffSet(sheet, picture) {\n      var iCurWidth = picture.width;\n      var iCurCol = picture.column;\n      var iCurOffset = 0;\n\n      while (iCurWidth >= 0) {\n        var iColWidth = 0;\n        if (sheet.columns !== undefined && sheet.columns[iCurCol - 1] !== undefined) iColWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === undefined ? 8.43 : sheet.columns[iCurCol - 1].width);else iColWidth = this.ColumnWidthToPixels(8.43);\n        var iSpaceInCell = iColWidth - iCurOffset * iColWidth / 1024;\n\n        if (iSpaceInCell > iCurWidth) {\n          picture.lastColumn = iCurCol;\n          picture.lastColOffset = iCurOffset + iCurWidth * 1024 / iColWidth;\n          var colHiddenWidth = 0;\n          if (sheet.columns !== undefined && sheet.columns[iCurCol - 1] !== undefined) colHiddenWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === undefined ? 8.43 : sheet.columns[iCurCol].width);else colHiddenWidth = this.ColumnWidthToPixels(8.43);\n          picture.lastColOffset = colHiddenWidth * picture.lastColOffset / 1024;\n          picture.lastColOffset = Math.round(picture.lastColOffset / this.unitsProportions[7]);\n          break;\n        } else {\n          iCurWidth -= iSpaceInCell;\n          iCurCol++;\n          iCurOffset = 0;\n        }\n      }\n    }\n  }, {\n    key: \"convertToPixels\",\n    value: function convertToPixels(value) {\n      return value * this.unitsProportions[6];\n    }\n  }, {\n    key: \"convertBase64toImage\",\n    value: function convertBase64toImage(img) {\n      var byteStr = window.atob(img);\n      var buffer = new ArrayBuffer(byteStr.length);\n      var data = new Uint8Array(buffer);\n\n      for (var i = 0; i < byteStr.length; i++) {\n        data[i] = byteStr.charCodeAt(i);\n      }\n\n      var blob = new Blob([data], {\n        type: 'image/png'\n      });\n      return blob;\n    }\n  }, {\n    key: \"saveDrawingRelations\",\n    value: function saveDrawingRelations(sheet) {\n      /* tslint:disable-next-line:max-line-length */\n      var drawingRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n      var length = sheet.images.length;\n      var id = this.imageCount - sheet.images.length;\n\n      for (var i = 1; i <= length; i++) {\n        id++;\n        /* tslint:disable-next-line:max-line-length */\n\n        drawingRelation += '<Relationship Id=\"rId' + i + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"../media/image' + id + '.png\" />';\n      }\n\n      this.addToArchive(drawingRelation + '</Relationships>', 'xl/drawings/_rels/drawing' + this.drawingCount + '.xml.rels');\n    }\n  }, {\n    key: \"pixelsToColumnWidth\",\n    value: function pixelsToColumnWidth(pixels) {\n      var dDigitWidth = 7;\n      var val = pixels > dDigitWidth + 5 ? this.trunc((pixels - 5) / dDigitWidth * 100 + 0.5) / 100 : pixels / (dDigitWidth + 5);\n      return val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256.0 / 256.0 : val * (dDigitWidth + 5) / dDigitWidth * 256.0 / 256.0;\n    }\n  }, {\n    key: \"ColumnWidthToPixels\",\n    value: function ColumnWidthToPixels(val) {\n      var dDigitWidth = 7;\n      var fileWidth = val > 1 ? (val * dDigitWidth + 5) / dDigitWidth * 256.0 / 256.0 : val * (dDigitWidth + 5) / dDigitWidth * 256.0 / 256.0;\n      return this.trunc((256 * fileWidth + this.trunc(128 / dDigitWidth)) / 256 * dDigitWidth);\n    }\n  }, {\n    key: \"trunc\",\n    value: function trunc(x) {\n      var n = x - x % 1;\n      return n === 0 && (x < 0 || x === 0 && 1 / x !== 1 / 0) ? -0 : n;\n    }\n  }, {\n    key: \"pixelsToRowHeight\",\n    value: function pixelsToRowHeight(pixels) {\n      return pixels * this.unitsProportions[5] / this.unitsProportions[6];\n    }\n  }, {\n    key: \"saveSheetRelations\",\n    value: function saveSheetRelations(sheet) {\n      /* tslint:disable-next-line:max-line-length */\n      var relStr = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n\n      var _iterator16 = _createForOfIteratorHelper(sheet.hyperLinks),\n          _step16;\n\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var hLink = _step16.value;\n\n          /* tslint:disable-next-line:max-line-length */\n          relStr += '<Relationship Id=\"rId' + hLink.rId + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\" Target=\"' + hLink.target + '\" TargetMode=\"External\" />';\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n\n      if (sheet.images != undefined && sheet.images.length > 0) {\n        /* tslint:disable-next-line:max-line-length */\n        relStr += '<Relationship Id=\"rId' + (sheet.hyperLinks.length + 1) + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing\" Target=\"../drawings/drawing' + this.drawingCount + '.xml\" />';\n      }\n\n      relStr += '</Relationships>';\n      return relStr;\n    }\n  }, {\n    key: \"saveSheetView\",\n    value: function saveSheetView(sheet) {\n      var paneString = '<sheetViews><sheetView workbookViewId=\"0\" ';\n\n      if (sheet.enableRtl === true) {\n        paneString += 'rightToLeft=\"1\"';\n      }\n\n      if (sheet.showGridLines === false) {\n        paneString += 'showGridLines=\"0\" >';\n      } else {\n        paneString += '>';\n      }\n\n      if (sheet.freezePanes !== undefined) {\n        paneString += '<pane state=\"frozen\"' + ' topLeftCell=\"' + sheet.freezePanes.leftCell + '\" ';\n\n        if (sheet.freezePanes.row !== 0) {\n          paneString += 'ySplit=\"' + sheet.freezePanes.row + '\" ';\n        }\n\n        if (sheet.freezePanes.column !== 0) {\n          paneString += 'xSplit=\"' + sheet.freezePanes.column + '\" ';\n        }\n\n        paneString += '/>';\n      }\n\n      paneString += '</sheetView></sheetViews > ';\n      return paneString;\n    }\n  }, {\n    key: \"saveSharedString\",\n    value: function saveSharedString() {\n      var length = this.sharedString.length;\n\n      if (length > 0) {\n        /* tslint:disable-next-line:max-line-length */\n        var sstStart = '<?xml version=\"1.0\" encoding=\"utf-8\"?><sst uniqueCount=\"' + length + '\" count=\"' + this.sharedStringCount + '\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n        var si = '';\n\n        for (var i = 0; i < length; i++) {\n          if (this.sharedString[i].indexOf('<r>') !== 0) {\n            si += '<si><t>';\n            si += this.processString(this.sharedString[i]);\n            si += '</t></si>';\n          } else {\n            si += '<si>';\n            si += this.sharedString[i];\n            si += '</si>';\n          }\n        }\n\n        si += '</sst>';\n        this.addToArchive(sstStart + si, 'xl/sharedStrings.xml');\n      }\n    }\n  }, {\n    key: \"processString\",\n    value: function processString(value) {\n      if (value.indexOf('&') !== -1) {\n        value = value.replace(/&/g, '&amp;');\n      }\n\n      if (value.indexOf('<') !== -1) {\n        value = value.replace(/</g, '&lt;');\n      }\n\n      if (value.indexOf('>') !== -1) {\n        value = value.replace(/>/g, '&gt;');\n      }\n\n      return value;\n    }\n  }, {\n    key: \"saveStyles\",\n    value: function saveStyles() {\n      this.updateCellXfsStyleXfs();\n      /* tslint:disable-next-line:max-line-length */\n\n      var styleTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><styleSheet xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n      styleTemp += this.saveNumberFormats();\n      styleTemp += this.saveFonts();\n      styleTemp += this.saveFills();\n      styleTemp += this.saveBorders();\n      styleTemp += this.saveCellStyleXfs();\n      styleTemp += this.saveCellXfs();\n      styleTemp += this.saveCellStyles();\n      this.addToArchive(styleTemp + '</styleSheet>', 'xl/styles.xml');\n    }\n  }, {\n    key: \"updateCellXfsStyleXfs\",\n    value: function updateCellXfsStyleXfs() {\n      var _iterator17 = _createForOfIteratorHelper(this.mStyles),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var style = _step17.value;\n          var cellXfs = undefined;\n\n          if (style.isGlobalStyle) {\n            cellXfs = new CellStyleXfs();\n            cellXfs.xfId = style.index - 1;\n          } else {\n            cellXfs = new CellXfs();\n            cellXfs.xfId = 0;\n          } //Add font\n\n\n          var compareFontResult = this.isNewFont(style);\n\n          if (!compareFontResult.result) {\n            var font = new Font();\n            font.b = style.bold;\n            font.i = style.italic;\n            font.name = style.fontName;\n            font.sz = style.fontSize;\n            font.u = style.underline;\n            font.color = 'FF' + style.fontColor.replace('#', '');\n            this.mFonts.push(font);\n            cellXfs.fontId = this.mFonts.length - 1;\n          } else {\n            cellXfs.fontId = compareFontResult.index;\n          } //Add fill\n\n\n          if (style.backColor !== 'none') {\n            var backColor = 'FF' + style.backColor.replace('#', '');\n\n            if (this.mFills.has(backColor)) {\n              var fillId = this.mFills.get(backColor);\n              cellXfs.fillId = fillId;\n            } else {\n              var _fillId = this.mFills.size + 2;\n\n              this.mFills.set(backColor, _fillId);\n              cellXfs.fillId = _fillId;\n            }\n          } else {\n            cellXfs.fillId = 0;\n          } //Add border            \n\n\n          if (!this.isNewBorder(style)) {\n            this.mBorders.push(style.borders);\n            cellXfs.borderId = this.mBorders.length;\n          } else {\n            cellXfs.borderId = 0;\n          } //Add Number Format            \n\n\n          if (style.numberFormat !== 'GENERAL') {\n            if (this.mNumFmt.has(style.numberFormat)) {\n              var numFmt = this.mNumFmt.get(style.numberFormat);\n              cellXfs.numFmtId = numFmt.numFmtId;\n            } else {\n              var id = this.mNumFmt.size + 164;\n              this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n              cellXfs.numFmtId = id;\n            }\n          } else {\n            if (style.numberFormat === 'GENERAL' && style.numFmtId === 14) {\n              cellXfs.numFmtId = 14;\n            } else {\n              cellXfs.numFmtId = 0;\n            }\n          } //Add alignment            \n\n\n          if (!style.isGlobalStyle) {\n            cellXfs.applyAlignment = 1;\n          }\n\n          cellXfs.alignment = new Alignment();\n          cellXfs.alignment.indent = style.indent;\n          cellXfs.alignment.horizontal = style.hAlign;\n          cellXfs.alignment.vertical = style.vAlign;\n          cellXfs.alignment.wrapText = style.wrapText ? 1 : 0;\n          cellXfs.alignment.rotation = style.rotation;\n\n          if (style.isGlobalStyle) {\n            this.mCellStyleXfs.push(cellXfs);\n            this.mCellXfs.push(cellXfs);\n          } else {\n            //Add cellxfs\n            this.mCellXfs.push(cellXfs);\n          }\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n    }\n  }, {\n    key: \"saveNumberFormats\",\n    value: function saveNumberFormats() {\n      if (this.mNumFmt.size >= 1) {\n        var numFmtStyle = '<numFmts count=\"' + this.mNumFmt.size + '\">';\n        this.mNumFmt.forEach(function (value, key) {\n          numFmtStyle += '<numFmt numFmtId=\"' + value.numFmtId + '\" formatCode=\"' + value.formatCode.replace(/\"/g, '&quot;') + '\" />';\n        });\n        return numFmtStyle += '</numFmts>';\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"saveFonts\",\n    value: function saveFonts() {\n      /* tslint:disable-next-line:max-line-length */\n      var fontStyle = '<fonts count=\"' + this.mFonts.length + '\">';\n\n      if (this.mFonts.length >= 1) {\n        var _iterator18 = _createForOfIteratorHelper(this.mFonts),\n            _step18;\n\n        try {\n          for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n            var font = _step18.value;\n            fontStyle += '<font>';\n\n            if (font.b) {\n              fontStyle += '<b />';\n            }\n\n            if (font.i) {\n              fontStyle += '<i />';\n            }\n\n            if (font.u) {\n              fontStyle += '<u />';\n            }\n\n            fontStyle += '<sz val=\"' + font.sz + '\" />';\n            fontStyle += '<color rgb=\"' + font.color + '\" />';\n            fontStyle += '<name val=\"' + font.name + '\" /></font>';\n          }\n        } catch (err) {\n          _iterator18.e(err);\n        } finally {\n          _iterator18.f();\n        }\n      }\n\n      return fontStyle + '</fonts>';\n    }\n  }, {\n    key: \"saveFills\",\n    value: function saveFills() {\n      /* tslint:disable-next-line:max-line-length */\n      var fillsStyle = '<fills count=\"' + (this.mFills.size + 2) + '\"><fill><patternFill patternType=\"none\"></patternFill></fill><fill><patternFill patternType=\"gray125\"></patternFill></fill>';\n\n      if (this.mFills.size >= 1) {\n        this.mFills.forEach(function (value, key) {\n          /* tslint:disable-next-line:max-line-length */\n          fillsStyle += '<fill><patternFill patternType=\"solid\"><fgColor rgb=\"' + key + '\" /><bgColor rgb=\"FFFFFFFF\" /></patternFill></fill>';\n        });\n      }\n\n      return fillsStyle + '</fills>';\n    }\n  }, {\n    key: \"saveBorders\",\n    value: function saveBorders() {\n      /* tslint:disable-next-line:max-line-length */\n      var bordersStyle = '<borders count=\"' + (this.mBorders.length + 1) + '\"><border><left /><right /><top /><bottom /><diagonal /></border>';\n\n      if (this.mBorders.length >= 1) {\n        var _iterator19 = _createForOfIteratorHelper(this.mBorders),\n            _step19;\n\n        try {\n          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n            var borders = _step19.value;\n\n            if (this.isAllBorder(borders)) {\n              var color = borders.all.color.replace('#', '');\n              var lineStyle = borders.all.lineStyle;\n              /* tslint:disable-next-line:max-line-length */\n\n              bordersStyle += '<border><left style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></left><right style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></right><top style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></top><bottom style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></bottom></border>';\n            } else {\n              /* tslint:disable-next-line:max-line-length */\n              bordersStyle += '<border><left style=\"' + borders.left.lineStyle + '\"><color rgb=\"FF' + borders.left.color.replace('#', '') + '\" /></left><right style=\"' + borders.right.lineStyle + '\"><color rgb=\"FF' + borders.right.color.replace('#', '') + '\" /></right><top style=\"' + borders.top.lineStyle + '\"><color rgb=\"FF' + borders.top.color.replace('#', '') + '\" /></top><bottom style=\"' + borders.bottom.lineStyle + '\"><color rgb=\"FF' + borders.bottom.color.replace('#', '') + '\" /></bottom></border>';\n            }\n          }\n        } catch (err) {\n          _iterator19.e(err);\n        } finally {\n          _iterator19.f();\n        }\n      }\n\n      return bordersStyle + '</borders>';\n    }\n  }, {\n    key: \"saveCellStyles\",\n    value: function saveCellStyles() {\n      var _this7 = this;\n\n      var cellStyleString = '<cellStyles  count=\"' + this.cellStyles.size + '\">';\n      this.cellStyles.forEach(function (value, key) {\n        cellStyleString += '<cellStyle name=\"' + key + '\" xfId=\"' + _this7.cellStyles.get(key).xfId + '\"';\n\n        if (key === 'Normal') {\n          cellStyleString += ' builtinId=\"0\"';\n        }\n\n        cellStyleString += ' />';\n      });\n      return cellStyleString += '</cellStyles>';\n    }\n  }, {\n    key: \"saveCellStyleXfs\",\n    value: function saveCellStyleXfs() {\n      /* tslint:disable-next-line:max-line-length */\n      var cellXfsStyle = '<cellStyleXfs count=\"' + (this.mCellStyleXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" />';\n\n      if (this.mCellStyleXfs.length >= 1) {\n        var _iterator20 = _createForOfIteratorHelper(this.mCellStyleXfs),\n            _step20;\n\n        try {\n          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n            var cellStyleXf = _step20.value;\n\n            /* tslint:disable-next-line:max-line-length */\n            cellXfsStyle += '<xf numFmtId=\"' + cellStyleXf.numFmtId + '\" fontId=\"' + cellStyleXf.fontId + '\" fillId=\"' + cellStyleXf.fillId + '\" borderId=\"' + cellStyleXf.borderId + '\" ';\n\n            if (cellStyleXf.alignment !== undefined) {\n              cellXfsStyle += '>' + this.saveAlignment(cellStyleXf) + '</xf>';\n            } else {\n              cellXfsStyle += ' />';\n            }\n          }\n        } catch (err) {\n          _iterator20.e(err);\n        } finally {\n          _iterator20.f();\n        }\n      }\n\n      return cellXfsStyle + '</cellStyleXfs>';\n    }\n  }, {\n    key: \"saveCellXfs\",\n    value: function saveCellXfs() {\n      /* tslint:disable-next-line:max-line-length */\n      var cellXfsStyle = '<cellXfs count=\"' + (this.mCellXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" />';\n\n      if (this.mCellXfs.length >= 1) {\n        var _iterator21 = _createForOfIteratorHelper(this.mCellXfs),\n            _step21;\n\n        try {\n          for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n            var cellXf = _step21.value;\n\n            /* tslint:disable-next-line:max-line-length */\n            cellXfsStyle += '<xf numFmtId=\"' + cellXf.numFmtId + '\" fontId=\"' + cellXf.fontId + '\" fillId=\"' + cellXf.fillId + '\" borderId=\"' + cellXf.borderId + '\" xfId=\"' + cellXf.xfId + '\" ';\n\n            if (cellXf.applyAlignment === 1) {\n              cellXfsStyle += 'applyAlignment=\"1\"';\n            }\n\n            cellXfsStyle += '>' + this.saveAlignment(cellXf) + '</xf>';\n          }\n        } catch (err) {\n          _iterator21.e(err);\n        } finally {\n          _iterator21.f();\n        }\n      }\n\n      return cellXfsStyle + '</cellXfs>';\n    }\n  }, {\n    key: \"saveAlignment\",\n    value: function saveAlignment(cellXf) {\n      var alignString = '<alignment ';\n\n      if (cellXf.alignment.horizontal !== undefined) {\n        alignString += 'horizontal=\"' + cellXf.alignment.horizontal + '\" ';\n      }\n\n      if (cellXf.alignment.indent !== undefined && cellXf.alignment.indent !== 0) {\n        alignString += 'indent=\"' + cellXf.alignment.indent + '\" ';\n      } else if (cellXf.alignment.rotation !== undefined && cellXf.alignment.rotation !== 0) {\n        alignString += 'textRotation=\"' + cellXf.alignment.rotation + '\" ';\n      }\n\n      if (cellXf.alignment.vertical !== undefined) {\n        alignString += 'vertical=\"' + cellXf.alignment.vertical + '\" ';\n      }\n\n      alignString += 'wrapText=\"' + cellXf.alignment.wrapText + '\" />';\n      return alignString;\n    }\n  }, {\n    key: \"saveApp\",\n    value: function saveApp(builtInProperties) {\n      /* tslint:disable-next-line:max-line-length */\n      var appString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\"><Application>Essential XlsIO</Application>';\n\n      if (builtInProperties !== undefined) {\n        if (builtInProperties.manager !== undefined) {\n          appString += '<Manager>' + builtInProperties.manager + '</Manager>';\n        }\n\n        if (builtInProperties.company !== undefined) {\n          appString += '<Company>' + builtInProperties.company + '</Company>';\n        }\n      }\n\n      this.addToArchive(appString + '</Properties>', 'docProps/app.xml');\n    }\n  }, {\n    key: \"saveCore\",\n    value: function saveCore(builtInProperties) {\n      var createdDate = new Date();\n      /* tslint:disable-next-line:max-line-length */\n\n      var coreString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><cp:coreProperties xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\">';\n\n      if (this.builtInProperties !== undefined) {\n        if (builtInProperties.author !== undefined) {\n          coreString += '<dc:creator>' + builtInProperties.author + '</dc:creator>';\n        }\n\n        if (builtInProperties.subject !== undefined) {\n          coreString += '<dc:subject>' + builtInProperties.subject + '</dc:subject>';\n        }\n\n        if (builtInProperties.category !== undefined) {\n          coreString += '<cp:category>' + builtInProperties.category + '</cp:category>';\n        }\n\n        if (builtInProperties.comments !== undefined) {\n          coreString += '<dc:description>' + builtInProperties.comments + '</dc:description>';\n        }\n\n        if (builtInProperties.title !== undefined) {\n          coreString += '<dc:title>' + builtInProperties.title + '</dc:title>';\n        }\n\n        if (builtInProperties.tags !== undefined) {\n          coreString += '<cp:keywords>' + builtInProperties.tags + '</cp:keywords>';\n        }\n\n        if (builtInProperties.status !== undefined) {\n          coreString += '<cp:contentStatus>' + builtInProperties.status + '</cp:contentStatus>';\n        }\n\n        if (builtInProperties.createdDate !== undefined) {\n          /* tslint:disable-next-line:max-line-length */\n          coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.createdDate.toISOString() + '</dcterms:created>';\n        } else {\n          coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n        }\n\n        if (builtInProperties.modifiedDate !== undefined) {\n          /* tslint:disable-next-line:max-line-length */\n          coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.modifiedDate.toISOString() + '</dcterms:modified>';\n        } else {\n          coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n        }\n      } else {\n        coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n        coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n      }\n      /* tslint:disable-next-line:max-line-length */\n\n\n      coreString += '</cp:coreProperties>';\n      this.addToArchive(coreString, 'docProps/core.xml');\n    }\n  }, {\n    key: \"saveTopLevelRelation\",\n    value: function saveTopLevelRelation() {\n      /* tslint:disable-next-line:max-line-length */\n      var topRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\" /><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\" /><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\" /></Relationships>';\n      this.addToArchive(topRelation, '_rels/.rels');\n    }\n  }, {\n    key: \"saveWorkbookRelation\",\n    value: function saveWorkbookRelation() {\n      /* tslint:disable-next-line:max-line-length */\n      var wbRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n      var length = this.worksheets.length;\n      var count = 0;\n\n      for (var i = 0; i < length; i++, count++) {\n        /* tslint:disable-next-line:max-line-length */\n        wbRelation += '<Relationship Id=\"rId' + (i + 1).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet' + (i + 1).toString() + '.xml\" />';\n      }\n      /* tslint:disable-next-line:max-line-length */\n\n\n      wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\" />';\n\n      if (this.sharedStringCount > 0) {\n        /* tslint:disable-next-line:max-line-length */\n        wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n      }\n\n      this.addToArchive(wbRelation + '</Relationships>', 'xl/_rels/workbook.xml.rels');\n    }\n  }, {\n    key: \"saveContentType\",\n    value: function saveContentType() {\n      /* tslint:disable-next-line:max-line-length */\n      var contentTypeString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\"><Default Extension=\"xml\" ContentType=\"application/xml\" /><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /><Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\" /><Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\" />';\n      var sheetsOverride = '';\n      var length = this.worksheets.length;\n\n      for (var i = 0; i < length; i++) {\n        /* tslint:disable-next-line:max-line-length */\n        sheetsOverride += '<Override PartName=\"/xl/worksheets/sheet' + (i + 1).toString() + '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />';\n\n        if (this.worksheets[i].images != undefined && this.worksheets[i].images.length > 0) {\n          /* tslint:disable-next-line:max-line-length */\n          sheetsOverride += '<Override PartName=\"/xl/drawings/drawing' + (i + 1).toString() + '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.drawing+xml\" />';\n        }\n      }\n\n      if (this.imageCount > 0) sheetsOverride += '<Default Extension=\"png\" ContentType=\"image/png\" />';\n\n      if (this.sharedStringCount > 0) {\n        /* tslint:disable-next-line:max-line-length */\n        contentTypeString += '<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" />';\n      }\n\n      this.addToArchive(contentTypeString + sheetsOverride + '</Types>', '[Content_Types].xml');\n    }\n  }, {\n    key: \"addToArchive\",\n    value: function addToArchive(xmlString, itemName) {\n      if (typeof xmlString === 'string') {\n        var blob = new Blob([xmlString], {\n          type: 'text/plain'\n        });\n        var archiveItem = new ZipArchiveItem(blob, itemName);\n        this.mArchive.addItem(archiveItem);\n      } else {\n        var _archiveItem = new ZipArchiveItem(xmlString, itemName);\n\n        this.mArchive.addItem(_archiveItem);\n      }\n    }\n  }, {\n    key: \"processMergeCells\",\n    value: function processMergeCells(cell, rowIndex, mergeCells) {\n      if (cell.rowSpan !== 0 || cell.colSpan !== 0) {\n        var mCell = new MergeCell();\n        mCell.x = cell.index;\n        mCell.width = cell.colSpan;\n        mCell.y = rowIndex;\n        mCell.height = cell.rowSpan;\n        var startCell = this.getCellName(mCell.y, mCell.x);\n        var endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);\n        mCell.ref = startCell + ':' + endCell;\n        var mergedCell = mergeCells.add(mCell);\n        var start = {\n          x: mCell.x,\n          y: mCell.y\n        };\n        var end = {\n          x: cell.index + mCell.width,\n          y: rowIndex + mCell.height\n        };\n        this.updatedMergedCellStyles(start, end, cell);\n      }\n\n      return mergeCells;\n    }\n  }, {\n    key: \"updatedMergedCellStyles\",\n    value: function updatedMergedCellStyles(sCell, eCell, cell) {\n      for (var x = sCell.x; x <= eCell.x; x++) {\n        for (var y = sCell.y; y <= eCell.y; y++) {\n          this.mergedCellsStyle.set(this.getCellName(y, x), {\n            x: x,\n            y: y,\n            styleIndex: cell.styleIndex\n          });\n        }\n      }\n    }\n    /**\n     * Returns the tick count corresponding to the given year, month, and day.\n     * @param year number value of year\n     * @param month number value of month\n     * @param day number value of day\n     */\n\n  }, {\n    key: \"dateToTicks\",\n    value: function dateToTicks(year, month, day) {\n      var ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n      var daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n      var daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n\n      if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {\n        var days = this.isLeapYear(year) ? daysToMonth366 : daysToMonth365;\n        var y = year - 1;\n        var n = y * 365 + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + days[month - 1] + day - 1;\n        return n * ticksPerDay;\n      }\n\n      throw new Error('Not a valid date');\n    }\n    /**\n     * Return the tick count corresponding to the given hour, minute, second.\n     * @param hour number value of hour\n     * @param minute number value if minute\n     * @param second number value of second\n     */\n\n  }, {\n    key: \"timeToTicks\",\n    value: function timeToTicks(hour, minute, second) {\n      if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {\n        var totalSeconds = hour * 3600 + minute * 60 + second;\n        return totalSeconds * 10000 * 1000;\n      }\n\n      throw new Error('Not valid time');\n    }\n    /**\n     * Checks if given year is a leap year.\n     * @param year Year value.\n     */\n\n  }, {\n    key: \"isLeapYear\",\n    value: function isLeapYear(year) {\n      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    }\n    /**\n     * Converts `DateTime` to the equivalent OLE Automation date.\n     */\n\n  }, {\n    key: \"toOADate\",\n    value: function toOADate(date) {\n      var ticks = 0;\n      /* tslint:disable-next-line:max-line-length */\n\n      ticks = this.dateToTicks(date.getFullYear(), date.getMonth() + 1, date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds());\n\n      if (ticks === 0) {\n        return 0.0;\n      }\n\n      var ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n      var daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;\n      var doubleDateOffset = daysTo1899 * ticksPerDay;\n      var oaDateMinAsTicks = ((365 * 4 + 1) * 25 - 1 - 365) * ticksPerDay;\n\n      if (ticks < oaDateMinAsTicks) {\n        throw new Error('Arg_OleAutDateInvalid');\n      }\n\n      var millisPerDay = 1000 * 60 * 60 * 24;\n      return (ticks - doubleDateOffset) / 10000 / millisPerDay;\n    }\n  }]);\n\n  return Workbook;\n}();\n/**\n * BuiltInProperties Class\n * @private\n */\n\n\nvar BuiltInProperties = function BuiltInProperties() {\n  _classCallCheck(this, BuiltInProperties);\n};\n/**\n * index class\n */\n\n\nexport { CellStyle, Font, CellXfs, Alignment, CellStyleXfs, CellStyles, NumFmt, Border, Borders, Cell, Cells, Column, Row, Rows, Workbook, BuiltInProperties, Worksheet, HyperLink, Grouping, FreezePane, MergeCell, MergeCells, Worksheets, CsvHelper, ValueFormatter, BlobHelper };","map":{"version":3,"sources":["D:/angularStarter/11-24/syncfusion-mytemplate/template-v1/node_modules/@syncfusion/ej2-excel-export/dist/es6/ej2-excel-export.es2015.js"],"names":["ZipArchive","ZipArchiveItem","Internationalization","isNullOrUndefined","CellStyle","numFmtId","backColor","fontName","fontSize","fontColor","italic","bold","underline","wrapText","hAlign","vAlign","indent","rotation","numberFormat","type","borders","Borders","isGlobalStyle","Font","sz","name","u","b","i","color","CellXfs","Alignment","CellStyleXfs","CellStyles","xfId","NumFmt","id","code","formatCode","Border","mLine","mColor","lineStyle","left","right","top","bottom","all","Cell","Cells","arguments","add","cell","inserted","count","c","index","push","Array","Column","Row","Rows","row","Worksheets","Worksheet","isSummaryRowBelow","showGridLines","enableRtl","HyperLink","Grouping","FreezePane","MergeCell","MergeCells","mergeCell","mCell","isIntersecting","intersectingCell","x","Math","min","y","Y","width","max","Width","X","height","Height","ref","split","base","compare","Image","ValueFormatter","cultureName","intl","format","isServerRendered","getDateFormat","getNumberFormat","value","result","toView","getFormatFunction","CsvHelper","json","separator","csvStr","undefined","formatter","isMicrosoftBrowser","navigator","msSaveBlob","styles","globalStyles","Map","length","set","worksheets","parseWorksheet","rows","parseRows","parseRow","Error","cells","parseCell","csv","Date","style","parseCellValue","displayText","skeleton","error","has","get","val","start","replace","indexOf","fileName","buffer","Blob","dataUrl","window","URL","createObjectURL","dwlLink","document","createElementNS","download","href","event","createEvent","initEvent","dispatchEvent","setTimeout","revokeObjectURL","BlobHelper","parts","part","blob","AutoFilters","Workbook","saveType","culture","currencyString","sharedStringCount","unitsProportions","hyperlinkStyle","currency","mSaveType","mArchive","sharedString","mFonts","mBorders","mStyles","printTitles","cellStyles","mNumFmt","mFills","mCellXfs","mCellStyleXfs","drawingCount","imageCount","cellStyle","parserCellStyle","cellStylesIn","tFormat","parserWorksheets","builtInProperties","BuiltInProperties","parserBuiltInProperties","csvHelper","jsonBuiltInProperties","author","comments","category","company","manager","subject","title","createdDate","modifiedDate","tags","status","jsonSheet","sheet","mergeCells","mergedCellsStyle","mHyperLinks","toString","columns","parserColumns","parserRows","freeze","parserFreezePanes","printTitle","parserPrintTitle","pageSetup","images","parserImages","autoFilters","parseFilters","hyperLinks","fromJson","toJson","applyProperties","sourceJson","destJson","keys","Object","column","getColumnName","col","strColumnName","iCurrentDigit","String","fromCharCode","printTitleName","titleRowName","fromRow","toRow","titleColName","fromColumn","toColumn","freezePanes","leftCell","getCellName","columnsLength","rowsLength","rowId","r","parserRow","insertMergedCellsStyle","forEach","key","filter","item","styleIndex","insertIndex","splice","createCell","rowToInsert","cellToInsert","refName","rowIndex","grouping","parseGrouping","parseCells","outlineLevel","isCollapsed","isHidden","cellsLength","spanMin","spanMax","cellId","jsonCell","rowSpan","colSpan","hyperlink","hyperLink","target","getCellValueType","rId","mergeOptions","formula","parseCellType","processMergeCells","spans","colors","colorVal","toUpperCase","rgbColors","GetColors","cellValue","processedVal","startindex","endIndex","substring","subString","text","subSplit","element","trim","processColor","a","cellType","defStyleIndex","applyGlobalStyle","parserBorder","leftBorder","rightBorder","topBorder","bottomBorder","toLowerCase","processCellStyle","numFmt","cellStyleXfs","cellXfs","returnFormat","getNumberPattern","useGrouping","getDatePattern","border","processNumFormatId","compareResult","compareStyle","size","toCompareStyle","font","bStyle","isAllBorder","toCompareBorder","allBorderStyle","baseStyle","array","toOADate","switchNumberFormat","sstvalue","processCellValue","contains","imagesLength","p","image","parserImage","lastRow","lastColumn","horizontalFlip","verticalFlip","blobSaveType","Promise","resolve","reject","obj","blobData","saveAsBlob","saveInternal","then","proxyUrl","xlsxMatch","match","csvMatch","save","destroy","saveWorkbook","saveWorksheets","saveSharedString","saveStyles","saveApp","saveCore","saveContentType","saveTopLevelRelation","saveWorkbookRelation","workbookTemp","sheets","sheetName","addToArchive","saveWorksheet","sheetBlob","sheetString","saveSheetView","colString","pixelsToColumnWidth","append","rowString","pixelsToRowHeight","hLink","saveDrawings","saveSheetRelations","getBlob","drawings","sheetDrawingString","imgId","pic","updatelastRowOffset","updatelastColumnOffSet","lastRowOffset","lastColOffset","imageData","convertBase64toImage","saveDrawingRelations","picture","iCurHeight","iCurRow","iCurOffset","iRowHeight","convertToPixels","iSpaceInCell","rowHiddenHeight","round","iCurWidth","iCurCol","iColWidth","ColumnWidthToPixels","colHiddenWidth","img","byteStr","atob","ArrayBuffer","data","Uint8Array","charCodeAt","drawingRelation","pixels","dDigitWidth","trunc","fileWidth","n","relStr","paneString","sstStart","si","processString","updateCellXfsStyleXfs","styleTemp","saveNumberFormats","saveFonts","saveFills","saveBorders","saveCellStyleXfs","saveCellXfs","saveCellStyles","compareFontResult","isNewFont","fontId","fillId","isNewBorder","borderId","applyAlignment","alignment","horizontal","vertical","numFmtStyle","fontStyle","fillsStyle","bordersStyle","cellStyleString","cellXfsStyle","cellStyleXf","saveAlignment","cellXf","alignString","appString","coreString","toISOString","topRelation","wbRelation","contentTypeString","sheetsOverride","xmlString","itemName","archiveItem","addItem","startCell","endCell","mergedCell","end","updatedMergedCellStyles","sCell","eCell","year","month","day","ticksPerDay","daysToMonth365","daysToMonth366","days","isLeapYear","hour","minute","second","totalSeconds","date","ticks","dateToTicks","getFullYear","getMonth","getDate","timeToTicks","getHours","getMinutes","getSeconds","daysTo1899","doubleDateOffset","oaDateMinAsTicks","millisPerDay"],"mappings":"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","sourcesContent":["import { ZipArchive, ZipArchiveItem } from '@syncfusion/ej2-compression';\nimport { Internationalization, isNullOrUndefined } from '@syncfusion/ej2-base';\n\n/**\n * CellStyle class\n * @private\n */\nclass CellStyle {\n    constructor() {\n        this.numFmtId = 0;\n        this.backColor = 'none';\n        this.fontName = 'Calibri';\n        this.fontSize = 10.5;\n        this.fontColor = '#000000';\n        this.italic = false;\n        this.bold = false;\n        this.underline = false;\n        this.wrapText = false;\n        this.hAlign = 'general';\n        this.vAlign = 'bottom';\n        this.indent = 0;\n        this.rotation = 0;\n        this.numberFormat = 'GENERAL';\n        this.type = 'datetime';\n        this.borders = new Borders();\n        this.isGlobalStyle = false;\n    }\n}\n/**\n * Font Class\n * @private\n */\nclass Font {\n    constructor() {\n        this.sz = 10.5;\n        this.name = 'Calibri';\n        this.u = false;\n        this.b = false;\n        this.i = false;\n        this.color = 'FF000000';\n    }\n}\n/**\n * CellXfs class\n * @private\n */\nclass CellXfs {\n}\n/**\n * Alignment class\n * @private\n */\nclass Alignment {\n}\n/**\n * CellStyleXfs class\n * @private\n */\nclass CellStyleXfs {\n}\n/**\n * CellStyles class\n * @private\n */\nclass CellStyles {\n    constructor() {\n        this.name = 'Normal';\n        this.xfId = 0;\n    }\n}\n/**\n * NumFmt class\n * @private\n */\nclass NumFmt {\n    constructor(id, code) {\n        this.numFmtId = id;\n        this.formatCode = code;\n    }\n}\n/**\n * Border class\n * @private\n */\nclass Border {\n    constructor(mLine, mColor) {\n        this.lineStyle = mLine;\n        this.color = mColor;\n    }\n}\n/**\n * Borders class\n * @private\n */\nclass Borders {\n    constructor() {\n        this.left = new Border('none', '#FFFFFF');\n        this.right = new Border('none', '#FFFFFF');\n        this.top = new Border('none', '#FFFFFF');\n        this.bottom = new Border('none', '#FFFFFF');\n        this.all = new Border('none', '#FFFFFF');\n    }\n}\n\n/**\n * Worksheet class\n * @private\n */\nclass Cell {\n}\n/**\n * Cells class\n * @private\n */\nclass Cells extends Array {\n    constructor() {\n        super(...arguments);\n        this.add = (cell) => {\n            let inserted = false;\n            let count = 0;\n            for (let c of this) {\n                if (c.index === cell.index) {\n                    this[count] = cell;\n                    inserted = true;\n                }\n                count++;\n            }\n            if (!inserted) {\n                this.push(cell);\n            }\n        };\n    }\n}\n\n/**\n * Column class\n * @private\n */\nclass Column {\n}\n\n/**\n * Row class\n * @private\n */\nclass Row {\n}\n/**\n * Rows class\n * @private\n */\nclass Rows extends Array {\n    constructor() {\n        super(...arguments);\n        this.add = (row) => {\n            this.push(row);\n        };\n    }\n}\n\n/**\n * Worksheets class\n * @private\n */\nclass Worksheets extends Array {\n}\n\n/**\n * Worksheet class\n * @private\n */\nclass Worksheet {\n    constructor() {\n        this.isSummaryRowBelow = true;\n        this.showGridLines = true;\n        this.enableRtl = false;\n    }\n}\n/**\n * Hyperlink class\n * @private\n */\nclass HyperLink {\n}\n/**\n * Grouping class\n * @private\n */\nclass Grouping {\n}\n/**\n * FreezePane class\n * @private\n */\nclass FreezePane {\n}\n/**\n * MergeCell\n * @private\n */\nclass MergeCell {\n}\n/**\n * MergeCells class\n * @private\n */\nclass MergeCells extends Array {\n    constructor() {\n        super(...arguments);\n        this.add = (mergeCell) => {\n            let inserted = false;\n            let count = 0;\n            for (let mCell of this) {\n                if (MergeCells.isIntersecting(mCell, mergeCell)) {\n                    let intersectingCell = new MergeCell();\n                    intersectingCell.x = Math.min(mCell.x, mergeCell.x);\n                    intersectingCell.y = Math.min(mCell.Y, mergeCell.y);\n                    intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);\n                    intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);\n                    intersectingCell.ref = (this[count].ref.split(':')[0]) + ':' + (mergeCell.ref.split(':')[1]);\n                    this[count] = intersectingCell;\n                    mergeCell = intersectingCell;\n                    inserted = true;\n                }\n                count++;\n            }\n            if (!inserted) {\n                this.push(mergeCell);\n            }\n            return mergeCell;\n        };\n    }\n    static isIntersecting(base, compare) {\n        return (base.x <= compare.x + compare.width)\n            && (compare.x <= base.x + base.width)\n            && (base.y <= compare.y + compare.height)\n            && (compare.y <= base.y + base.height);\n    }\n}\n\n/**\n * Image class\n * @private\n */\nclass Image {\n}\n\n// import { IValueFormatter } from '../base/interface';\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\nclass ValueFormatter {\n    constructor(cultureName) {\n        this.intl = new Internationalization();\n        // if (!isNullOrUndefined(cultureName)) {\n        //     this.intl.culture = cultureName;\n        // }\n    }\n    getFormatFunction(format, isServerRendered) {\n        if (format.type) {\n            if (isServerRendered) {\n                format.isServerRendered = true;\n            }\n            return this.intl.getDateFormat(format);\n        }\n        else {\n            return this.intl.getNumberFormat(format);\n        }\n    }\n    // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n    //     if ((<DateFormatOptions>format).type) {\n    //         return this.intl.getDateParser(<DateFormatOptions>format);\n    //     } else {\n    //         return this.intl.getNumberParser(<DateFormatOptions>format);\n    //     }\n    // }\n    // public fromView(value: string, format: Function, type?: string): string | number | Date {\n    //     if (type === 'date' || type === 'datetime' || type === 'number') {\n    //         return format(value);\n    //     } else {\n    //         return value;\n    //     }\n    // }\n    toView(value, format) {\n        let result = value;\n        if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n            result = format(value);\n        }\n        return result;\n    }\n    // public setCulture(cultureName: string): void {\n    //     if (!isNullOrUndefined(cultureName)) {\n    //         setCulture(cultureName);\n    //     }\n    // }\n    /* tslint:disable:no-any */\n    displayText(value, format, isServerRendered) {\n        return this.toView(value, this.getFormatFunction(format, isServerRendered));\n    }\n}\n\n/**\n * CsvHelper class\n * @private\n */\nclass CsvHelper {\n    /* tslint:disable:no-any */\n    constructor(json, separator) {\n        this.csvStr = '';\n        if (separator === null || separator === undefined) {\n            this.separator = ',';\n        }\n        else {\n            this.separator = separator;\n        }\n        this.formatter = new ValueFormatter();\n        this.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n        if (json.isServerRendered !== null && json.isServerRendered !== undefined) {\n            this.isServerRendered = json.isServerRendered;\n        }\n        if (json.styles !== null && json.styles !== undefined) {\n            this.globalStyles = new Map();\n            for (let i = 0; i < json.styles.length; i++) {\n                if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {\n                    this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);\n                }\n            }\n        }\n        // Parses Worksheets data to DOM.        \n        if (json.worksheets !== null && json.worksheets !== undefined) {\n            this.parseWorksheet(json.worksheets[0]);\n        }\n        //this.csvStr = 'a1,a2,a3\\nb1,b2,b3';\n    }\n    parseWorksheet(json) {\n        //Rows\n        if (json.rows !== null && json.rows !== undefined) {\n            this.parseRows(json.rows);\n        }\n    }\n    /* tslint:disable:no-any */\n    parseRows(rows) {\n        let count = 1;\n        for (let row of rows) {\n            //Row index\n            if (row.index !== null && row.index !== undefined) {\n                while (count < row.index) {\n                    this.csvStr += '\\n';\n                    count++;\n                }\n                this.parseRow(row);\n            }\n            else {\n                throw Error('Row index is missing.');\n            }\n        }\n    }\n    /* tslint:disable:no-any */\n    parseRow(row) {\n        if (row.cells !== null && row.cells !== undefined) {\n            let count = 1;\n            for (let cell of row.cells) {\n                //cell index\n                if (cell.index !== null && cell.index !== undefined) {\n                    while (count < cell.index) {\n                        this.csvStr += this.separator;\n                        count++;\n                    }\n                    this.parseCell(cell);\n                }\n                else {\n                    throw Error('Cell index is missing.');\n                }\n            }\n        }\n    }\n    /* tslint:disable:no-any */\n    parseCell(cell) {\n        let csv = this.csvStr;\n        if (cell.value !== undefined) {\n            if (cell.value instanceof Date) {\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n                    /* tslint:disable-next-line:max-line-length */\n                    try {\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: cell.style.numberFormat }, this.isServerRendered));\n                    }\n                    catch (error) {\n                        /* tslint:disable-next-line:max-line-length */\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', format: cell.style.numberFormat }, this.isServerRendered));\n                    }\n                }\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n                    /* tslint:disable-next-line:max-line-length */\n                    try {\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\n                    }\n                    catch (error) {\n                        /* tslint:disable-next-line:max-line-length */\n                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\n                    }\n                }\n                else {\n                    csv += cell.value;\n                }\n            }\n            else if (typeof (cell.value) === 'boolean') {\n                csv += cell.value ? 'TRUE' : 'FALSE';\n            }\n            else if (typeof (cell.value) === 'number') {\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: cell.style.numberFormat }, this.isServerRendered));\n                }\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: this.globalStyles.get(cell.style.name) }, this.isServerRendered));\n                }\n                else {\n                    csv += cell.value;\n                }\n            }\n            else {\n                csv += this.parseCellValue(cell.value);\n            }\n        }\n        this.csvStr = csv;\n    }\n    parseCellValue(value) {\n        let val = '';\n        let length = value.length;\n        for (let start = 0; start < length; start++) {\n            if (value[start] === '\\\"') {\n                val += value[start].replace('\\\"', '\\\"\\\"');\n            }\n            else {\n                val += value[start];\n            }\n        }\n        value = val;\n        if (value.indexOf(this.separator) !== -1 || value.indexOf('\\n') !== -1) {\n            return value = '\\\"' + value + '\\\"';\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     */\n    save(fileName) {\n        this.buffer = new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(this.buffer, fileName);\n        }\n        else {\n            let dataUrl = window.URL.createObjectURL(this.buffer);\n            let dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            dwlLink.download = fileName;\n            dwlLink.href = dataUrl;\n            let event = document.createEvent('MouseEvent');\n            event.initEvent('click', true, true);\n            dwlLink.dispatchEvent(event);\n            setTimeout(() => {\n                window.URL.revokeObjectURL(dataUrl);\n            });\n        }\n    }\n    saveAsBlob() {\n        return new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\n    }\n}\n\n/**\n * BlobHelper class\n * @private\n */\nclass BlobHelper {\n    constructor() {\n        /* tslint:disable:no-any */\n        this.parts = [];\n    }\n    /* tslint:disable:no-any */\n    append(part) {\n        this.parts.push(part);\n        this.blob = undefined; // Invalidate the blob\n    }\n    getBlob() {\n        return new Blob(this.parts, { type: 'text/plain' });\n    }\n}\n\n/**\n * AutoFilters class\n * @private\n */\nclass AutoFilters {\n}\n\n/**\n * Workbook class\n */\nclass Workbook {\n    /* tslint:disable:no-any */\n    constructor(json, saveType, culture, currencyString, separator) {\n        this.sharedStringCount = 0;\n        this.unitsProportions = [\n            96 / 75.0,\n            96 / 300.0,\n            96,\n            96 / 25.4,\n            96 / 2.54,\n            1,\n            96 / 72.0,\n            96 / 72.0 / 12700,\n        ];\n        /* tslint:disable:no-any */\n        this.hyperlinkStyle = { fontColor: '#0000FF', underline: true };\n        if (culture !== undefined) {\n            this.culture = culture;\n        }\n        else {\n            this.culture = 'en-US';\n        }\n        if (currencyString !== undefined) {\n            this.currency = currencyString;\n        }\n        else {\n            this.currency = 'USD';\n        }\n        this.intl = new Internationalization(this.culture);\n        this.mSaveType = saveType;\n        if (saveType === 'xlsx') {\n            this.mArchive = new ZipArchive();\n            this.sharedString = [];\n            this.mFonts = [];\n            this.mBorders = [];\n            this.mStyles = [];\n            this.printTitles = new Map();\n            this.cellStyles = new Map();\n            this.mNumFmt = new Map();\n            this.mFills = new Map();\n            this.mStyles.push(new CellStyle());\n            this.mFonts.push(new Font());\n            /* tslint:disable */\n            this.cellStyles.set('Normal', new CellStyles());\n            /* tslint:enable */\n            this.mCellXfs = [];\n            this.mCellStyleXfs = [];\n            this.drawingCount = 0;\n            this.imageCount = 0;\n            if (json.styles !== null && json.styles !== undefined) {\n                /* tslint:disable-next-line:no-any */\n                this.globalStyles = new Map();\n                for (let i = 0; i < json.styles.length; i++) {\n                    if (json.styles[i].name !== undefined) {\n                        if (!this.cellStyles.has(json.styles[i].name)) {\n                            let cellStyle = new CellStyle();\n                            cellStyle.isGlobalStyle = true;\n                            this.parserCellStyle(json.styles[i], cellStyle, 'none');\n                            let cellStylesIn = new CellStyles();\n                            cellStylesIn.name = cellStyle.name;\n                            cellStylesIn.xfId = (cellStyle.index - 1);\n                            this.cellStyles.set(cellStylesIn.name, cellStylesIn);\n                            /* tslint:disable-next-line:no-any */\n                            let tFormat = {};\n                            if (json.styles[i].numberFormat !== undefined) {\n                                tFormat.format = json.styles[i].numberFormat;\n                            }\n                            if (json.styles[i].type !== undefined) {\n                                tFormat.type = json.styles[i].type;\n                            }\n                            else {\n                                tFormat.type = 'datetime';\n                            }\n                            if (tFormat.format !== undefined) {\n                                this.globalStyles.set(json.styles[i].name, tFormat);\n                            }\n                        }\n                        else {\n                            throw Error('Style name ' + json.styles[i].name + ' is already existed');\n                        }\n                    }\n                }\n            }\n            // Parses Worksheets data to DOM.        \n            if (json.worksheets !== null && json.worksheets !== undefined) {\n                this.parserWorksheets(json.worksheets);\n            }\n            else {\n                throw Error('Worksheet is expected.');\n            }\n            // Parses the BuiltInProperties data to DOM.        \n            if (json.builtInProperties !== null && json.builtInProperties !== undefined) {\n                this.builtInProperties = new BuiltInProperties();\n                this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties);\n            }\n        }\n        else {\n            this.csvHelper = new CsvHelper(json, separator);\n        }\n    }\n    /* tslint:disable:no-any */\n    parserBuiltInProperties(jsonBuiltInProperties, builtInProperties) {\n        //Author\n        if (jsonBuiltInProperties.author !== null && jsonBuiltInProperties.author !== undefined) {\n            builtInProperties.author = jsonBuiltInProperties.author;\n        }\n        //Comments\n        if (jsonBuiltInProperties.comments !== null && jsonBuiltInProperties.comments !== undefined) {\n            builtInProperties.comments = jsonBuiltInProperties.comments;\n        }\n        //Category\n        if (jsonBuiltInProperties.category !== null && jsonBuiltInProperties.category !== undefined) {\n            builtInProperties.category = jsonBuiltInProperties.category;\n        }\n        //Company\n        if (jsonBuiltInProperties.company !== null && jsonBuiltInProperties.company !== undefined) {\n            builtInProperties.company = jsonBuiltInProperties.company;\n        }\n        //Manager\n        if (jsonBuiltInProperties.manager !== null && jsonBuiltInProperties.manager !== undefined) {\n            builtInProperties.manager = jsonBuiltInProperties.manager;\n        }\n        //Subject\n        if (jsonBuiltInProperties.subject !== null && jsonBuiltInProperties.subject !== undefined) {\n            builtInProperties.subject = jsonBuiltInProperties.subject;\n        }\n        //Title\n        if (jsonBuiltInProperties.title !== null && jsonBuiltInProperties.title !== undefined) {\n            builtInProperties.title = jsonBuiltInProperties.title;\n        }\n        //Creation date\n        if (jsonBuiltInProperties.createdDate !== null && jsonBuiltInProperties.createdDate !== undefined) {\n            builtInProperties.createdDate = jsonBuiltInProperties.createdDate;\n        }\n        //Modified date\n        if (jsonBuiltInProperties.modifiedDate !== null && jsonBuiltInProperties.modifiedDate !== undefined) {\n            builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate;\n        }\n        //Tags\n        if (jsonBuiltInProperties.tags !== null && jsonBuiltInProperties.tags !== undefined) {\n            builtInProperties.tags = jsonBuiltInProperties.tags;\n        }\n        //Status\n        if (jsonBuiltInProperties.status !== null && jsonBuiltInProperties.status !== undefined) {\n            builtInProperties.status = jsonBuiltInProperties.status;\n        }\n    }\n    /* tslint:disable:no-any */\n    parserWorksheets(json) {\n        this.worksheets = new Worksheets();\n        let length = json.length;\n        for (let i = 0; i < length; i++) {\n            let jsonSheet = json[i];\n            let sheet = new Worksheet();\n            this.mergeCells = new MergeCells();\n            this.mergedCellsStyle = new Map();\n            this.mHyperLinks = [];\n            //Name\n            if (jsonSheet.name !== null && jsonSheet.name !== undefined) {\n                sheet.name = jsonSheet.name;\n            }\n            else {\n                sheet.name = 'Sheet' + (i + 1).toString();\n            }\n            if (jsonSheet.enableRtl !== null && jsonSheet.enableRtl !== undefined) {\n                sheet.enableRtl = jsonSheet.enableRtl;\n            }\n            sheet.index = (i + 1);\n            //Columns\n            if (jsonSheet.columns !== null && jsonSheet.columns !== undefined) {\n                this.parserColumns(jsonSheet.columns, sheet);\n            }\n            //Rows\n            if (jsonSheet.rows !== null && jsonSheet.rows !== undefined) {\n                this.parserRows(jsonSheet.rows, sheet);\n            }\n            //showGridLines\n            if (jsonSheet.showGridLines !== null && jsonSheet.showGridLines !== undefined) {\n                sheet.showGridLines = jsonSheet.showGridLines;\n            }\n            //FreezePanes\n            if (jsonSheet.freeze !== null && jsonSheet.freeze !== undefined) {\n                this.parserFreezePanes(jsonSheet.freeze, sheet);\n            }\n            //Print Title\n            if (jsonSheet.printTitle !== null && jsonSheet.printTitle !== undefined) {\n                this.parserPrintTitle(jsonSheet.printTitle, sheet);\n            }\n            if (jsonSheet.pageSetup !== undefined) {\n                if (jsonSheet.pageSetup.isSummaryRowBelow !== undefined) {\n                    sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow;\n                }\n            }\n            if (jsonSheet.images !== undefined) {\n                this.parserImages(jsonSheet.images, sheet);\n            }\n            if (jsonSheet.autoFilters !== null && jsonSheet.autoFilters !== undefined) {\n                this.parseFilters(jsonSheet.autoFilters, sheet);\n            }\n            sheet.index = (i + 1);\n            sheet.mergeCells = this.mergeCells;\n            sheet.hyperLinks = this.mHyperLinks;\n            this.worksheets.push(sheet);\n        }\n    }\n    /* tslint:disable:no-any */\n    mergeOptions(fromJson, toJson) {\n        /* tslint:disable:no-any */\n        let result = {};\n        this.applyProperties(fromJson, result);\n        this.applyProperties(toJson, result);\n        return result;\n    }\n    /* tslint:disable:no-any */\n    applyProperties(sourceJson, destJson) {\n        let keys = Object.keys(sourceJson);\n        for (let index = 0; index < keys.length; index++) {\n            if (keys[index] !== 'name') {\n                destJson[keys[index]] = sourceJson[keys[index]];\n            }\n        }\n    }\n    getCellName(row, column) {\n        return this.getColumnName(column) + row.toString();\n    }\n    getColumnName(col) {\n        col--;\n        let strColumnName = '';\n        do {\n            let iCurrentDigit = col % 26;\n            col = col / 26 - 1;\n            strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;\n        } while (col >= 0);\n        return strColumnName;\n    }\n    /* tslint:disable:no-any */\n    parserPrintTitle(json, sheet) {\n        let printTitleName = '';\n        let titleRowName;\n        if (json.fromRow !== null && json.fromRow !== undefined) {\n            let fromRow = json.fromRow;\n            let toRow;\n            if (json.toRow !== null && json.toRow !== undefined) {\n                toRow = json.toRow;\n            }\n            else {\n                toRow = json.fromRow;\n            }\n            titleRowName = '$' + fromRow + ':$' + toRow;\n        }\n        let titleColName;\n        if (json.fromColumn !== null && json.fromColumn !== undefined) {\n            let fromColumn = json.fromColumn;\n            let toColumn;\n            if (json.toColumn !== null && json.toColumn !== undefined) {\n                toColumn = json.toColumn;\n            }\n            else {\n                toColumn = json.fromColumn;\n            }\n            titleColName = '$' + this.getColumnName(fromColumn) + ':$' + this.getColumnName(toColumn);\n        }\n        if (titleRowName !== undefined) {\n            printTitleName += (sheet.name + '!' + titleRowName);\n        }\n        if (titleColName !== undefined && titleRowName !== undefined) {\n            printTitleName += ',' + (sheet.name + '!' + titleColName);\n        }\n        else if (titleColName !== undefined) {\n            printTitleName += (sheet.name + '!' + titleColName);\n        }\n        if (printTitleName !== '') {\n            this.printTitles.set(sheet.index - 1, printTitleName);\n        }\n    }\n    /* tslint:disable:no-any */\n    parserFreezePanes(json, sheet) {\n        sheet.freezePanes = new FreezePane();\n        if (json.row !== null && json.row !== undefined) {\n            sheet.freezePanes.row = json.row;\n        }\n        else {\n            sheet.freezePanes.row = 0;\n        }\n        if (json.column !== null && json.column !== undefined) {\n            sheet.freezePanes.column = json.column;\n        }\n        else {\n            sheet.freezePanes.column = 0;\n        }\n        sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);\n    }\n    /* tslint:disable:no-any */\n    parserColumns(json, sheet) {\n        let columnsLength = json.length;\n        sheet.columns = [];\n        for (let column = 0; column < columnsLength; column++) {\n            let col = new Column();\n            if (json[column].index !== null && json[column].index !== undefined) {\n                col.index = json[column].index;\n            }\n            else {\n                throw Error('Column index is missing.');\n            }\n            if (json[column].width !== null && json[column].width !== undefined) {\n                col.width = json[column].width;\n            }\n            sheet.columns.push(col);\n        }\n    }\n    /* tslint:disable:no-any */\n    parserRows(json, sheet) {\n        let rowsLength = json.length;\n        sheet.rows = new Rows();\n        let rowId = 0;\n        for (let r = 0; r < rowsLength; r++) {\n            let row = this.parserRow(json[r], rowId);\n            rowId = row.index;\n            sheet.rows.add(row);\n        }\n        this.insertMergedCellsStyle(sheet);\n    }\n    insertMergedCellsStyle(sheet) {\n        if (this.mergeCells.length > 0) {\n            this.mergedCellsStyle.forEach((value, key) => {\n                let row = sheet.rows.filter((item) => {\n                    return item.index === value.y;\n                })[0];\n                if (!isNullOrUndefined(row)) {\n                    let cell = row.cells.filter((item) => {\n                        return item.index === value.x;\n                    })[0];\n                    if (!isNullOrUndefined(cell)) {\n                        cell.styleIndex = value.styleIndex;\n                    }\n                    else {\n                        let cells = row.cells.filter((item) => {\n                            return item.index <= value.x;\n                        });\n                        let insertIndex = 0;\n                        if (cells.length > 0) {\n                            insertIndex = row.cells.indexOf(cells[cells.length - 1]) + 1;\n                        }\n                        row.cells.splice(insertIndex, 0, this.createCell(value, key));\n                    }\n                }\n                else {\n                    let rows = sheet.rows.filter((item) => {\n                        return item.index <= value.y;\n                    });\n                    let rowToInsert = new Row();\n                    rowToInsert.index = value.y;\n                    rowToInsert.cells = new Cells();\n                    rowToInsert.cells.add(this.createCell(value, key));\n                    let insertIndex = 0;\n                    if (rows.length > 0) {\n                        insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1;\n                    }\n                    sheet.rows.splice(insertIndex, 0, rowToInsert);\n                }\n            });\n        }\n    }\n    createCell(value, key) {\n        let cellToInsert = new Cell();\n        cellToInsert.refName = key;\n        cellToInsert.index = value.x;\n        cellToInsert.cellStyle = new CellStyle();\n        cellToInsert.styleIndex = value.styleIndex;\n        return cellToInsert;\n    }\n    /* tslint:disable:no-any */\n    parserRow(json, rowIndex) {\n        let row = new Row();\n        //Row Height\n        if (json.height !== null && json.height !== undefined) {\n            row.height = json.height;\n        }\n        //Row index\n        if (json.index !== null && json.index !== undefined) {\n            row.index = json.index;\n        }\n        else {\n            throw Error('Row index is missing.');\n        }\n        if (json.grouping !== null && json.grouping !== undefined) {\n            this.parseGrouping(json.grouping, row);\n        }\n        this.parseCells(json.cells, row);\n        return row;\n    }\n    /* tslint:disable:no-any */\n    parseGrouping(json, row) {\n        row.grouping = new Grouping();\n        if (json.outlineLevel !== undefined) {\n            row.grouping.outlineLevel = json.outlineLevel;\n        }\n        if (json.isCollapsed !== undefined) {\n            row.grouping.isCollapsed = json.isCollapsed;\n        }\n        if (json.isHidden !== undefined) {\n            row.grouping.isHidden = json.isHidden;\n        }\n    }\n    /* tslint:disable:no-any */\n    parseCells(json, row) {\n        row.cells = new Cells();\n        let cellsLength = json !== undefined ? json.length : 0;\n        let spanMin = 1;\n        let spanMax = 1;\n        for (let cellId = 0; cellId < cellsLength; cellId++) {\n            /* tslint:disable:no-any */\n            let jsonCell = json[cellId];\n            let cell = new Cell();\n            //cell index\n            if (jsonCell.index !== null && jsonCell.index !== undefined) {\n                cell.index = jsonCell.index;\n            }\n            else {\n                throw Error('Cell index is missing.');\n            }\n            if (cell.index < spanMin) {\n                spanMin = cell.index;\n            }\n            else if (cell.index > spanMax) {\n                spanMax = cell.index;\n            }\n            //Update the Cell name\n            cell.refName = this.getCellName(row.index, cell.index);\n            //Row span\n            if (jsonCell.rowSpan !== null && jsonCell.rowSpan !== undefined) {\n                cell.rowSpan = jsonCell.rowSpan - 1;\n            }\n            else {\n                cell.rowSpan = 0;\n            }\n            //Column span\n            if (jsonCell.colSpan !== null && jsonCell.colSpan !== undefined) {\n                cell.colSpan = jsonCell.colSpan - 1;\n            }\n            else {\n                cell.colSpan = 0;\n            }\n            //Hyperlink\n            if (jsonCell.hyperlink !== null && jsonCell.hyperlink !== undefined) {\n                let hyperLink = new HyperLink();\n                if (jsonCell.hyperlink.target !== undefined) {\n                    hyperLink.target = jsonCell.hyperlink.target;\n                    if (jsonCell.hyperlink.displayText !== undefined) {\n                        cell.value = jsonCell.hyperlink.displayText;\n                    }\n                    else {\n                        cell.value = jsonCell.hyperlink.target;\n                    }\n                    cell.type = this.getCellValueType(cell.value);\n                    hyperLink.ref = cell.refName;\n                    hyperLink.rId = (this.mHyperLinks.length + 1);\n                    this.mHyperLinks.push(hyperLink);\n                    cell.cellStyle = new CellStyle();\n                    /* tslint:disable-next-line:max-line-length */\n                    this.parserCellStyle((jsonCell.style !== undefined ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle), cell.cellStyle, 'string');\n                    cell.styleIndex = cell.cellStyle.index;\n                }\n            }\n            // formulas\n            if (jsonCell.formula !== null && jsonCell.formula !== undefined) {\n                cell.formula = jsonCell.formula;\n                cell.type = 'formula';\n            }\n            //Cell value\n            if (jsonCell.value !== null && jsonCell.value !== undefined) {\n                if (cell.formula !== undefined) {\n                    cell.value = 0;\n                }\n                else {\n                    cell.value = jsonCell.value;\n                    cell.type = this.getCellValueType(cell.value);\n                }\n            }\n            if (jsonCell.style !== null && jsonCell.style !== undefined && cell.styleIndex === undefined) {\n                cell.cellStyle = new CellStyle();\n                if (cell.value instanceof Date) {\n                    this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14);\n                }\n                else {\n                    this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type);\n                }\n                cell.styleIndex = cell.cellStyle.index;\n            }\n            else if (cell.value instanceof Date) {\n                cell.cellStyle = new CellStyle();\n                this.parserCellStyle({}, cell.cellStyle, cell.type, 14);\n                cell.styleIndex = cell.cellStyle.index;\n            }\n            this.parseCellType(cell);\n            this.mergeCells = this.processMergeCells(cell, row.index, this.mergeCells);\n            row.cells.add(cell);\n            \n        }\n        row.spans = (spanMin) + ':' + (spanMax);\n    }\n    GetColors() {\n        let colors;\n        colors = new Map();\n        /* tslint:disable */\n        colors.set('WHITE', 'FFFFFFFF');\n        /* tslint:disable */\n        colors.set('SILVER', 'FFC0C0C0');\n        /* tslint:disable */\n        colors.set('GRAY', 'FF808080');\n        /* tslint:disable */\n        colors.set('BLACK', 'FF000000');\n        /* tslint:disable */\n        colors.set('RED', 'FFFF0000');\n        /* tslint:disable */\n        colors.set('MAROON', 'FF800000');\n        /* tslint:disable */\n        colors.set('YELLOW', 'FFFFFF00');\n        /* tslint:disable */\n        colors.set('OLIVE', 'FF808000');\n        /* tslint:disable */\n        colors.set('LIME', 'FF00FF00');\n        /* tslint:disable */\n        colors.set('GREEN', 'FF008000');\n        /* tslint:disable */\n        colors.set('AQUA', 'FF00FFFF');\n        /* tslint:disable */\n        colors.set('TEAL', 'FF008080');\n        /* tslint:disable */\n        colors.set('BLUE', 'FF0000FF');\n        /* tslint:disable */\n        colors.set('NAVY', 'FF000080');\n        /* tslint:disable */\n        colors.set('FUCHSIA', 'FFFF00FF');\n        /* tslint:disable */\n        colors.set('PURPLE', 'FF800080');\n        return colors;\n    }\n    processColor(colorVal) {\n        if (colorVal.indexOf('#') === 0) {\n            return colorVal.replace('#', 'FF');\n        }\n        colorVal = colorVal.toUpperCase();\n        this.rgbColors = this.GetColors();\n        if (this.rgbColors.has(colorVal)) {\n            colorVal = this.rgbColors.get(colorVal);\n        }\n        else {\n            colorVal = 'FF000000';\n        }\n        return colorVal;\n    }\n    processCellValue(value, cell) {\n        let cellValue = value;\n        if (value.indexOf(\"<font\") !== -1 || value.indexOf(\"<a href\") !== -1 || value.indexOf(\"<b>\") !== -1 ||\n            value.indexOf(\"<i>\") !== -1 || value.indexOf(\"<u>\") !== -1) {\n            let processedVal = '';\n            let startindex = value.indexOf('<', 0);\n            let endIndex = value.indexOf('>', startindex + 1);\n            if (startindex >= 0 && endIndex >= 0) {\n                if (startindex !== 0) {\n                    processedVal += '<r><t xml:space=\"preserve\">' + value.substring(0, startindex) + '</t></r>';\n                }\n                while (startindex >= 0 && endIndex >= 0) {\n                    endIndex = value.indexOf('>', startindex + 1);\n                    if (endIndex >= 0) {\n                        let subString = value.substring(startindex + 1, endIndex);\n                        startindex = value.indexOf('<', endIndex + 1);\n                        if (startindex < 0) {\n                            startindex = cellValue.length;\n                        }\n                        let text = cellValue.substring(endIndex + 1, startindex);\n                        if (text.length !== 0) {\n                            let subSplit = subString.split(' ');\n                            if (subSplit.length > 0) {\n                                processedVal += '<r><rPr>';\n                            }\n                            if (subSplit.length > 1) {\n                                for (let element of subSplit) {\n                                    let start = element.trim().substring(0, 5);\n                                    switch (start) {\n                                        case 'size=':\n                                            processedVal += '<sz val=\"' + element.substring(6, element.length - 1) + '\"/>';\n                                            break;\n                                        case 'face=':\n                                            processedVal += '<rFont val=\"' + element.substring(6, element.length - 1) + '\"/>';\n                                            break;\n                                        case 'color':\n                                            processedVal += '<color rgb=\"' + this.processColor(element.substring(7, element.length - 1)) + '\"/>';\n                                            break;\n                                        case 'href=':\n                                            let hyperLink = new HyperLink();\n                                            hyperLink.target = element.substring(6, element.length - 1).trim();\n                                            hyperLink.ref = cell.refName;\n                                            hyperLink.rId = (this.mHyperLinks.length + 1);\n                                            this.mHyperLinks.push(hyperLink);\n                                            processedVal += '<color rgb=\"FF0000FF\"/><u/><b/>';\n                                            break;\n                                    }\n                                }\n                            }\n                            else if (subSplit.length === 1) {\n                                let style = subSplit[0].trim();\n                                switch (style) {\n                                    case 'b':\n                                        processedVal += '<b/>';\n                                        break;\n                                    case 'i':\n                                        processedVal += '<i/>';\n                                        break;\n                                    case 'u':\n                                        processedVal += '<u/>';\n                                        break;\n                                }\n                            }\n                            processedVal += '</rPr><t xml:space=\"preserve\">' + text + '</t></r>';\n                        }\n                    }\n                }\n                if (processedVal === '') {\n                    return cellValue;\n                }\n                return processedVal;\n            }\n            else {\n                return cellValue;\n            }\n        }\n        else {\n            return cellValue;\n        }\n    }\n    applyGlobalStyle(json, cellStyle) {\n        if (this.cellStyles.has(json.name)) {\n            cellStyle.index = this.mStyles.filter((a) => (a.name === json.name))[0].index;\n            cellStyle.name = json.name;\n        }\n    }\n    /* tslint:disable:no-any */\n    parserCellStyle(json, cellStyle, cellType, defStyleIndex) {\n        //name\n        if (json.name !== null && json.name !== undefined) {\n            if (cellStyle.isGlobalStyle) {\n                cellStyle.name = json.name;\n            }\n            else {\n                this.applyGlobalStyle(json, cellStyle);\n                return;\n            }\n        }\n        //background color\n        if (json.backColor !== null && json.backColor !== undefined) {\n            cellStyle.backColor = json.backColor;\n        }\n        //borders\n        //leftBorder\n        cellStyle.borders = new Borders();\n        //AllBorder\n        if (json.borders !== null && json.borders !== undefined) {\n            this.parserBorder(json.borders, cellStyle.borders.all);\n        }\n        //leftborder\n        if (json.leftBorder !== null && json.leftBorder !== undefined) {\n            this.parserBorder(json.leftBorder, cellStyle.borders.left);\n        }\n        //rightBorder\n        if (json.rightBorder !== null && json.rightBorder !== undefined) {\n            this.parserBorder(json.rightBorder, cellStyle.borders.right);\n        }\n        //topBorder\n        if (json.topBorder !== null && json.topBorder !== undefined) {\n            this.parserBorder(json.topBorder, cellStyle.borders.top);\n        }\n        //bottomBorder\n        if (json.bottomBorder !== null && json.bottomBorder !== undefined) {\n            this.parserBorder(json.bottomBorder, cellStyle.borders.bottom);\n        }\n        //fontName\n        if (json.fontName !== null && json.fontName !== undefined) {\n            cellStyle.fontName = json.fontName;\n        }\n        //fontSize\n        if (json.fontSize !== null && json.fontSize !== undefined) {\n            cellStyle.fontSize = json.fontSize;\n        }\n        //fontColor\n        if (json.fontColor !== null && json.fontColor !== undefined) {\n            cellStyle.fontColor = json.fontColor;\n        }\n        //italic\n        if (json.italic !== null && json.italic !== undefined) {\n            cellStyle.italic = json.italic;\n        }\n        //bold\n        if (json.bold !== null && json.bold !== undefined) {\n            cellStyle.bold = json.bold;\n        }\n        //hAlign\n        if (json.hAlign !== null && json.hAlign !== undefined) {\n            cellStyle.hAlign = json.hAlign.toLowerCase();\n        }\n        //indent\n        if (json.indent !== null && json.indent !== undefined) {\n            cellStyle.indent = json.indent;\n            if (!(cellStyle.hAlign === 'left' || cellStyle.hAlign === 'right')) {\n                cellStyle.hAlign = 'left';\n            }\n        }\n        if (json.rotation !== null && json.rotation !== undefined) {\n            cellStyle.rotation = json.rotation;\n        }\n        //vAlign\n        if (json.vAlign !== null && json.vAlign !== undefined) {\n            cellStyle.vAlign = json.vAlign.toLowerCase();\n        }\n        //underline\n        if (json.underline !== null && json.underline !== undefined) {\n            cellStyle.underline = json.underline;\n        }\n        //wrapText\n        if (json.wrapText !== null && json.wrapText !== undefined) {\n            cellStyle.wrapText = json.wrapText;\n        }\n        //numberFormat\n        if (json.numberFormat !== null && json.numberFormat !== undefined) {\n            if (json.type !== null && json.type !== undefined) {\n                cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type);\n            }\n            else {\n                cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType);\n            }\n        }\n        else if (defStyleIndex !== undefined) {\n            cellStyle.numFmtId = 14;\n            cellStyle.numberFormat = 'GENERAL';\n        }\n        else {\n            cellStyle.numberFormat = 'GENERAL';\n        }\n        cellStyle.index = this.processCellStyle(cellStyle);\n    }\n    switchNumberFormat(numberFormat, type) {\n        let format = this.getNumberFormat(numberFormat, type);\n        if (format !== numberFormat) {\n            let numFmt = this.mNumFmt.get(numberFormat);\n            if (numFmt !== undefined) {\n                numFmt.formatCode = format;\n                if (this.mNumFmt.has(format)) {\n                    for (let cellStyleXfs of this.mCellStyleXfs) {\n                        if (cellStyleXfs.numFmtId === numFmt.numFmtId) {\n                            cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n                        }\n                    }\n                    for (let cellXfs of this.mCellXfs) {\n                        if (cellXfs.numFmtId === numFmt.numFmtId) {\n                            cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    getNumberFormat(numberFormat, type) {\n        let returnFormat;\n        switch (type) {\n            case 'number':\n                try {\n                    returnFormat = this.intl.getNumberPattern({ format: numberFormat, currency: this.currency, useGrouping: true }, true);\n                }\n                catch (error) {\n                    returnFormat = numberFormat;\n                }\n                break;\n            case 'datetime':\n                try {\n                    returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: 'dateTime' }, true);\n                }\n                catch (error) {\n                    try {\n                        returnFormat = this.intl.getDatePattern({ format: numberFormat, type: 'dateTime' }, true);\n                    }\n                    catch (error) {\n                        returnFormat = numberFormat;\n                    }\n                }\n                break;\n            case 'date':\n                try {\n                    returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: 'date' }, true);\n                }\n                catch (error) {\n                    try {\n                        returnFormat = this.intl.getDatePattern({ format: numberFormat, type: 'date' }, true);\n                    }\n                    catch (error) {\n                        returnFormat = numberFormat;\n                    }\n                }\n                break;\n            case 'time':\n                try {\n                    returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: 'time' }, true);\n                }\n                catch (error) {\n                    try {\n                        returnFormat = this.intl.getDatePattern({ format: numberFormat, type: 'time' }, true);\n                    }\n                    catch (error) {\n                        returnFormat = numberFormat;\n                    }\n                }\n                break;\n            default:\n                returnFormat = numberFormat;\n                break;\n        }\n        return returnFormat;\n    }\n    /* tslint:disable:no-any */\n    parserBorder(json, border) {\n        if (json.color !== null && json.color !== undefined) {\n            border.color = json.color;\n        }\n        else {\n            border.color = '#000000';\n        }\n        if (json.lineStyle !== null && json.lineStyle !== undefined) {\n            border.lineStyle = json.lineStyle;\n        }\n        else {\n            border.lineStyle = 'thin';\n        }\n    }\n    processCellStyle(style) {\n        if (style.isGlobalStyle) {\n            this.processNumFormatId(style);\n            this.mStyles.push(style);\n            return this.mStyles.length;\n        }\n        else {\n            let compareResult = this.compareStyle(style);\n            if (!compareResult.result) {\n                this.processNumFormatId(style);\n                this.mStyles.push(style);\n                return this.mStyles.length;\n            }\n            else {\n                //Return the index of the already existing style.\n                return compareResult.index;\n            }\n        }\n    }\n    processNumFormatId(style) {\n        if (style.numberFormat !== 'GENERAL' && !this.mNumFmt.has(style.numberFormat)) {\n            let id = this.mNumFmt.size + 164;\n            this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n        }\n    }\n    isNewFont(toCompareStyle) {\n        let result = false;\n        let index = 0;\n        for (let font of this.mFonts) {\n            index++;\n            let fontColor = undefined;\n            if (toCompareStyle.fontColor !== undefined) {\n                fontColor = ('FF' + toCompareStyle.fontColor.replace('#', ''));\n            }\n            result = font.color === fontColor &&\n                font.b === toCompareStyle.bold &&\n                font.i === toCompareStyle.italic &&\n                font.u === toCompareStyle.underline &&\n                font.name === toCompareStyle.fontName &&\n                font.sz === toCompareStyle.fontSize;\n            if (result) {\n                break;\n            }\n        }\n        index = index - 1;\n        return { index, result };\n    }\n    isNewBorder(toCompareStyle) {\n        let bStyle = new CellStyle();\n        if (this.isAllBorder(toCompareStyle.borders)) {\n            return (bStyle.borders.all.color === toCompareStyle.borders.all.color &&\n                bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle);\n        }\n        else {\n            return (bStyle.borders.left.color === toCompareStyle.borders.left.color &&\n                bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle &&\n                bStyle.borders.right.color === toCompareStyle.borders.right.color &&\n                bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle &&\n                bStyle.borders.top.color === toCompareStyle.borders.top.color &&\n                bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle &&\n                bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color &&\n                bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle);\n        }\n    }\n    isAllBorder(toCompareBorder) {\n        let allBorderStyle = new CellStyle();\n        return allBorderStyle.borders.all.color !== toCompareBorder.all.color &&\n            allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;\n    }\n    compareStyle(toCompareStyle) {\n        let result = true;\n        let index = 0;\n        for (let baseStyle of this.mStyles) {\n            result = baseStyle.isGlobalStyle ? false : (baseStyle.backColor === toCompareStyle.backColor &&\n                baseStyle.bold === toCompareStyle.bold &&\n                baseStyle.numFmtId === toCompareStyle.numFmtId &&\n                baseStyle.numberFormat === toCompareStyle.numberFormat &&\n                baseStyle.type === toCompareStyle.type &&\n                baseStyle.fontColor === toCompareStyle.fontColor &&\n                baseStyle.fontName === toCompareStyle.fontName &&\n                baseStyle.fontSize === toCompareStyle.fontSize &&\n                baseStyle.hAlign === toCompareStyle.hAlign &&\n                baseStyle.italic === toCompareStyle.italic &&\n                baseStyle.underline === toCompareStyle.underline &&\n                baseStyle.vAlign === toCompareStyle.vAlign &&\n                baseStyle.indent === toCompareStyle.indent &&\n                baseStyle.rotation === toCompareStyle.rotation &&\n                baseStyle.wrapText === toCompareStyle.wrapText &&\n                (baseStyle.borders.all.color === toCompareStyle.borders.all.color &&\n                    baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle) &&\n                (baseStyle.borders.left.color === toCompareStyle.borders.left.color &&\n                    baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle &&\n                    baseStyle.borders.right.color === toCompareStyle.borders.right.color &&\n                    baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle &&\n                    baseStyle.borders.top.color === toCompareStyle.borders.top.color &&\n                    baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle &&\n                    baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color &&\n                    baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle));\n            if (result) {\n                index = baseStyle.index;\n                break;\n            }\n        }\n        return { index, result };\n    }\n    contains(array, item) {\n        let index = array.indexOf(item);\n        return index > -1 && index < array.length;\n    }\n    getCellValueType(value) {\n        if (value instanceof Date) {\n            return 'datetime';\n        }\n        else if (typeof (value) === 'boolean') {\n            return 'boolean';\n        }\n        else if (typeof (value) === 'number') {\n            return 'number';\n        }\n        else {\n            return 'string';\n        }\n    }\n    parseCellType(cell) {\n        let type = cell.type;\n        let saveType;\n        let value = cell.value;\n        switch (type) {\n            case 'datetime':\n                value = this.toOADate(value);\n                if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n                    if (this.globalStyles.has(cell.cellStyle.name)) {\n                        let value = this.globalStyles.get(cell.cellStyle.name);\n                        this.switchNumberFormat(value.format, value.type);\n                    }\n                }\n                saveType = 'n';\n                break;\n            //TODO: Update the number format index and style\n            case 'boolean':\n                value = value ? 1 : 0;\n                saveType = 'b';\n                break;\n            case 'number':\n                saveType = 'n';\n                if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n                    if (this.globalStyles.has(cell.cellStyle.name)) {\n                        this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, 'number');\n                    }\n                }\n                break;\n            case 'string':\n                this.sharedStringCount++;\n                saveType = 's';\n                let sstvalue = this.processCellValue(value, cell);\n                if (!this.contains(this.sharedString, sstvalue)) {\n                    this.sharedString.push(sstvalue);\n                }\n                value = this.sharedString.indexOf(sstvalue);\n                break;\n            default:\n                break;\n        }\n        cell.saveType = saveType;\n        cell.value = value;\n    }\n    parserImages(json, sheet) {\n        let imagesLength = json.length;\n        sheet.images = [];\n        for (let p = 0; p < imagesLength; p++) {\n            let image = this.parserImage(json[p]);\n            sheet.images.push(image);\n        }\n    }\n    parseFilters(json, sheet) {\n        sheet.autoFilters = new AutoFilters();\n        if (json.row !== null && json.row !== undefined)\n            sheet.autoFilters.row = json.row;\n        else\n            throw new Error('Argument Null Exception: row null or empty');\n        if (json.lastRow !== null && json.lastRow !== undefined)\n            sheet.autoFilters.lastRow = json.lastRow;\n        else\n            throw new Error('Argument Null Exception: lastRow cannot be null or empty');\n        if (json.column !== null && json.column !== undefined)\n            sheet.autoFilters.column = json.column;\n        else\n            throw new Error('Argument Null Exception: column cannot be null or empty');\n        if (json.lastColumn !== null && json.row !== undefined)\n            sheet.autoFilters.lastColumn = json.lastColumn;\n        else\n            throw new Error('Argument Null Exception: lastColumn cannot be null or empty');\n    }\n    parserImage(json) {\n        let image = new Image();\n        if (json.image !== null && json.image !== undefined) {\n            image.image = json.image;\n        }\n        if (json.row !== null && json.row !== undefined) {\n            image.row = json.row;\n        }\n        if (json.column !== null && json.column !== undefined) {\n            image.column = json.column;\n        }\n        if (json.lastRow !== null && json.lastRow !== undefined) {\n            image.lastRow = json.lastRow;\n        }\n        if (json.lastColumn !== null && json.lastColumn !== undefined) {\n            image.lastColumn = json.lastColumn;\n        }\n        if (json.width !== null && json.width !== undefined) {\n            image.width = json.width;\n        }\n        if (json.height !== null && json.height !== undefined) {\n            image.height = json.height;\n        }\n        if (json.horizontalFlip !== null && json.horizontalFlip !== undefined) {\n            image.horizontalFlip = json.horizontalFlip;\n        }\n        if (json.verticalFlip !== null && json.verticalFlip !== undefined) {\n            image.verticalFlip = json.verticalFlip;\n        }\n        if (json.rotation !== null && json.rotation !== undefined) {\n            image.rotation = json.rotation;\n        }\n        return image;\n    }\n    saveAsBlob(blobSaveType) {\n        switch (blobSaveType) {\n            case 'text/csv':\n                return new Promise((resolve, reject) => {\n                    let obj = {};\n                    obj.blobData = this.csvHelper.saveAsBlob();\n                    resolve(obj);\n                });\n            default:\n                return new Promise((resolve, reject) => {\n                    this.saveInternal();\n                    this.mArchive.saveAsBlob().then((blob) => {\n                        let obj = {};\n                        obj.blobData = new Blob([blob], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n                        resolve(obj);\n                    });\n                });\n        }\n    }\n    save(fileName, proxyUrl) {\n        if (fileName === null || fileName === undefined || fileName === '') {\n            throw new Error('Argument Null Exception: fileName cannot be null or empty');\n        }\n        let xlsxMatch = fileName.match('.xlsx$');\n        let csvMatch = fileName.match('.csv$');\n        if (xlsxMatch !== null && xlsxMatch[0] === ('.' + this.mSaveType)) {\n            this.saveInternal();\n            this.mArchive.save(fileName).then(() => {\n                this.mArchive.destroy();\n            });\n        }\n        else if (csvMatch !== null && csvMatch[0] === ('.' + this.mSaveType)) {\n            this.csvHelper.save(fileName);\n        }\n        else {\n            throw Error('Save type and file extension is different.');\n        }\n    }\n    saveInternal() {\n        this.saveWorkbook();\n        this.saveWorksheets();\n        this.saveSharedString();\n        this.saveStyles();\n        this.saveApp(this.builtInProperties);\n        this.saveCore(this.builtInProperties);\n        this.saveContentType();\n        this.saveTopLevelRelation();\n        this.saveWorkbookRelation();\n    }\n    saveWorkbook() {\n        /* tslint:disable-next-line:max-line-length */\n        let workbookTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><workbook xmlns:r = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns= \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"><workbookPr codeName=\"ThisWorkbook\" defaultThemeVersion= \"153222\"/><bookViews><workbookView activeTab=\"0\"/></bookViews>';\n        let sheets = '<sheets>';\n        let length = this.worksheets.length;\n        for (let i = 0; i < length; i++) {\n            /* tslint:disable-next-line:max-line-length */\n            let sheetName = this.worksheets[i].name;\n            sheetName = sheetName.replace(\"&\", \"&amp;\");\n            sheetName = sheetName.replace(\"<\", \"&lt;\");\n            sheetName = sheetName.replace(\">\", \"&gt;\");\n            sheetName = sheetName.replace(\"\\\"\", \"&quot;\");\n            sheets += '<sheet name=\"' + sheetName + '\" sheetId=\"' + (i + 1).toString() + '\" r:id =\"rId' + (i + 1).toString() + '\" />';\n        }\n        sheets += '</sheets>';\n        workbookTemp += sheets;\n        if (this.printTitles.size > 0) {\n            let printTitle = '<definedNames>';\n            this.printTitles.forEach((value, key) => {\n                printTitle += '<definedName name=\"_xlnm.Print_Titles\" localSheetId=\"' + key + '\">' + value + '</definedName>';\n            });\n            printTitle += '</definedNames>';\n            workbookTemp += printTitle;\n        }\n        this.addToArchive(workbookTemp + '</workbook>', 'xl/workbook.xml');\n    }\n    saveWorksheets() {\n        let length = this.worksheets.length;\n        for (let i = 0; i < length; i++) {\n            this.saveWorksheet(this.worksheets[i], i);\n        }\n    }\n    saveWorksheet(sheet, index) {\n        let sheetBlob = new BlobHelper();\n        /* tslint:disable-next-line:max-line-length */\n        let sheetString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><worksheet xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n        if (!sheet.isSummaryRowBelow) {\n            sheetString += ('<sheetPr>' + '<outlinePr ' + 'summaryBelow=\"0\" >' + '</outlinePr>' + '</sheetPr>');\n        }\n        else {\n            sheetString += ('<sheetPr />');\n        }\n        sheetString += this.saveSheetView(sheet);\n        if (sheet.columns !== undefined) {\n            let colString = '<cols>';\n            for (let column of sheet.columns) {\n                /* tslint:disable-next-line:max-line-length */\n                if (column.width !== undefined) {\n                    colString += '<col min=\"' + (column.index) + '\" max=\"' + (column.index) + '\" width=\"' + this.pixelsToColumnWidth(column.width) + '\" customWidth=\"1\" />';\n                }\n                else {\n                    colString += '<col min=\"' + (column.index) + '\" max=\"' + (column.index) + '\" width=\"' + '8.43' + '\" customWidth=\"1\" />';\n                }\n            }\n            sheetString += (colString + '</cols>');\n        }\n        sheetString += ('<sheetData>');\n        sheetBlob.append(sheetString);\n        sheetString = '';\n        if (sheet.rows !== undefined) {\n            for (let row of sheet.rows) {\n                let rowString = '<row r=\"' + (row.index) + '\" ';\n                if (!isNullOrUndefined(row.spans)) {\n                    rowString += 'spans=\"' + row.spans + '\" ';\n                }\n                if (row.height !== undefined) {\n                    rowString += ('ht=\"' + this.pixelsToRowHeight(row.height) + '\" customHeight=\"1\" ');\n                }\n                if (row.grouping !== undefined) {\n                    if (row.grouping.isHidden) {\n                        rowString += ('hidden=\"1\" ');\n                    }\n                    if (row.grouping.outlineLevel !== undefined) {\n                        rowString += ('outlineLevel=\"' + row.grouping.outlineLevel + '\" ');\n                    }\n                    if (row.grouping.isCollapsed) {\n                        rowString += ('collapsed=\"1\" ');\n                    }\n                }\n                rowString += ('>');\n                for (let cell of row.cells) {\n                    if (cell !== undefined && (cell.value !== undefined || cell.cellStyle !== undefined)) {\n                        rowString += ('<c r=\"' + cell.refName + '\" ');\n                        if (cell.saveType !== undefined) {\n                            rowString += ('t=\"' + cell.saveType + '\" ');\n                        }\n                        if (cell.styleIndex !== undefined) {\n                            rowString += ('s=\"' + cell.styleIndex + '\" ');\n                        }\n                        rowString += (' >');\n                        if (cell.formula !== undefined) {\n                            rowString += ('<f>' + cell.formula + '</f>');\n                        }\n                        if (cell.value !== undefined) {\n                            rowString += ('<v>' + cell.value + '</v></c>');\n                        }\n                        else {\n                            rowString += ('</c>');\n                        }\n                    }\n                }\n                rowString += ('</row>');\n                sheetBlob.append(rowString);\n            }\n        }\n        sheetString += ('</sheetData>');\n        /* tslint:disable-next-line:max-line-length */\n        if (sheet.autoFilters !== null && sheet.autoFilters !== undefined)\n            sheetString += ('<autoFilter ref=\"' + this.getCellName(sheet.autoFilters.row, sheet.autoFilters.column) + ':' + this.getCellName(sheet.autoFilters.lastRow, sheet.autoFilters.lastColumn) + '\"/>');\n        if (sheet.mergeCells.length > 0) {\n            sheetString += ('<mergeCells count=\"' + sheet.mergeCells.length + '\">');\n            for (let mCell of sheet.mergeCells) {\n                sheetString += ('<mergeCell ref=\"' + mCell.ref + '\" />');\n            }\n            sheetString += ('</mergeCells>');\n        }\n        if (sheet.hyperLinks.length > 0) {\n            sheetString += ('<hyperlinks>');\n            for (let hLink of sheet.hyperLinks) {\n                sheetString += ('<hyperlink ref=\"' + hLink.ref + '\" r:id=\"rId' + hLink.rId + '\" />');\n            }\n            sheetString += ('</hyperlinks>');\n        }\n        /* tslint:disable-next-line:max-line-length */\n        sheetString += ('<pageMargins left=\"0.75\" right=\"0.75\" top=\"1\" bottom=\"1\" header=\"0.5\" footer=\"0.5\" /><headerFooter scaleWithDoc=\"1\" alignWithMargins=\"0\" differentFirst=\"0\" differentOddEven=\"0\" />');\n        if (sheet.images != undefined && sheet.images.length > 0) {\n            this.drawingCount++;\n            this.saveDrawings(sheet, sheet.index);\n            sheetString += '<drawing r:id=\"rId' + (sheet.hyperLinks.length + 1) + '\"/>';\n        }\n        this.addToArchive(this.saveSheetRelations(sheet), ('xl/worksheets/_rels/sheet' + sheet.index + '.xml.rels'));\n        sheetBlob.append(sheetString + '</worksheet>');\n        this.addToArchive(sheetBlob.getBlob(), 'xl/worksheets' + '/sheet' + (index + 1) + '.xml');\n    }\n    saveDrawings(sheet, index) {\n        let drawings = new BlobHelper();\n        /* tslint:disable-next-line:max-line-length */\n        let sheetDrawingString = '<xdr:wsDr xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\" xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">';\n        if (sheet.images !== undefined) {\n            let imgId = 0;\n            for (let pic of sheet.images) {\n                if (pic.height !== undefined && pic.width !== undefined) {\n                    this.updatelastRowOffset(sheet, pic);\n                    this.updatelastColumnOffSet(sheet, pic);\n                }\n                else if (pic.lastRow !== undefined && pic.lastColumn !== undefined) {\n                    pic.lastRowOffset = 0;\n                    pic.lastColOffset = 0;\n                }\n                imgId++;\n                sheetDrawingString += '<xdr:twoCellAnchor editAs=\"oneCell\">';\n                sheetDrawingString += '<xdr:from><xdr:col>';\n                //col\n                sheetDrawingString += pic.column - 1;\n                sheetDrawingString += '</xdr:col><xdr:colOff>';\n                //colOff\n                sheetDrawingString += 0;\n                sheetDrawingString += '</xdr:colOff><xdr:row>';\n                //row\n                sheetDrawingString += pic.row - 1;\n                sheetDrawingString += '</xdr:row><xdr:rowOff>';\n                //rowOff\n                sheetDrawingString += 0;\n                sheetDrawingString += '</xdr:rowOff></xdr:from>';\n                sheetDrawingString += '<xdr:to><xdr:col>';\n                //col\n                sheetDrawingString += pic.lastColumn;\n                sheetDrawingString += '</xdr:col><xdr:colOff>';\n                //colOff\n                sheetDrawingString += pic.lastColOffset;\n                sheetDrawingString += '</xdr:colOff><xdr:row>';\n                //row\n                sheetDrawingString += pic.lastRow;\n                sheetDrawingString += '</xdr:row><xdr:rowOff>';\n                //rowOff\n                sheetDrawingString += pic.lastRowOffset;\n                sheetDrawingString += '</xdr:rowOff></xdr:to>';\n                sheetDrawingString += '<xdr:pic>';\n                sheetDrawingString += '<xdr:nvPicPr>';\n                sheetDrawingString += '<xdr:cNvPr id=\"' + imgId + '\" name=\"Picture ' + imgId + '\"> </xdr:cNvPr>';\n                sheetDrawingString += '<xdr:cNvPicPr><a:picLocks noChangeAspect=\"1\"/></xdr:cNvPicPr> </xdr:nvPicPr>';\n                sheetDrawingString += '<xdr:blipFill>';\n                /* tslint:disable-next-line:max-line-length */\n                sheetDrawingString += '<a:blip xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" r:embed=\"rId' + imgId + '\" cstate=\"print\">';\n                sheetDrawingString += '</a:blip><a:stretch><a:fillRect /></a:stretch></xdr:blipFill>';\n                sheetDrawingString += '<xdr:spPr>';\n                sheetDrawingString += '<a:xfrm';\n                if (pic.rotation != undefined && pic.rotation <= 3600 && pic.rotation >= -3600) {\n                    sheetDrawingString += ' rot=\"' + (pic.rotation * 60000) + '\"';\n                }\n                if (pic.verticalFlip != undefined && pic.verticalFlip != false) {\n                    sheetDrawingString += ' flipV=\"1\"';\n                }\n                if (pic.horizontalFlip != undefined && pic.horizontalFlip != false) {\n                    sheetDrawingString += ' flipH=\"1\"';\n                }\n                sheetDrawingString += '/>';\n                sheetDrawingString += '<a:prstGeom prst=\"rect\"><a:avLst /></a:prstGeom></xdr:spPr>';\n                sheetDrawingString += '</xdr:pic><xdr:clientData /></xdr:twoCellAnchor>';\n                let imageData = this.convertBase64toImage(pic.image);\n                this.imageCount += 1;\n                this.addToArchive(imageData, 'xl/media/image' + this.imageCount + '.png');\n            }\n            drawings.append(sheetDrawingString);\n            drawings.append('</xdr:wsDr>');\n            this.saveDrawingRelations(sheet);\n            this.addToArchive(drawings.getBlob(), 'xl/drawings/drawing' + this.drawingCount + '.xml');\n        }\n    }\n    updatelastRowOffset(sheet, picture) {\n        let iCurHeight = picture.height;\n        let iCurRow = picture.row;\n        let iCurOffset = 0;\n        while (iCurHeight >= 0) {\n            let iRowHeight = 0;\n            if (sheet.rows !== undefined && sheet.rows[iCurRow - 1] !== undefined)\n                iRowHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === undefined ? 15 : sheet.rows[iCurRow - 1].height);\n            else\n                iRowHeight = this.convertToPixels(15);\n            let iSpaceInCell = iRowHeight - (iCurOffset * iRowHeight / 256);\n            if (iSpaceInCell > iCurHeight) {\n                picture.lastRow = iCurRow;\n                picture.lastRowOffset = iCurOffset + (iCurHeight * 256 / iRowHeight);\n                let rowHiddenHeight = 0;\n                if (sheet.rows !== undefined && sheet.rows[iCurRow - 1] !== undefined)\n                    rowHiddenHeight = this.convertToPixels(sheet.rows[iCurRow - 1].height === undefined ? 15 : sheet.rows[iCurRow - 1].height);\n                else\n                    rowHiddenHeight = this.convertToPixels(15);\n                picture.lastRowOffset = (rowHiddenHeight * picture.lastRowOffset) / 256;\n                picture.lastRowOffset = Math.round(picture.lastRowOffset / this.unitsProportions[7]);\n                break;\n            }\n            else {\n                iCurHeight -= iSpaceInCell;\n                iCurRow++;\n                iCurOffset = 0;\n            }\n        }\n    }\n    updatelastColumnOffSet(sheet, picture) {\n        let iCurWidth = picture.width;\n        let iCurCol = picture.column;\n        let iCurOffset = 0;\n        while (iCurWidth >= 0) {\n            let iColWidth = 0;\n            if (sheet.columns !== undefined && sheet.columns[iCurCol - 1] !== undefined)\n                iColWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === undefined ? 8.43 : sheet.columns[iCurCol - 1].width);\n            else\n                iColWidth = this.ColumnWidthToPixels(8.43);\n            let iSpaceInCell = iColWidth - (iCurOffset * iColWidth / 1024);\n            if (iSpaceInCell > iCurWidth) {\n                picture.lastColumn = iCurCol;\n                picture.lastColOffset = iCurOffset + (iCurWidth * 1024 / iColWidth);\n                let colHiddenWidth = 0;\n                if (sheet.columns !== undefined && sheet.columns[iCurCol - 1] !== undefined)\n                    colHiddenWidth = this.ColumnWidthToPixels(sheet.columns[iCurCol - 1].width === undefined ? 8.43 : sheet.columns[iCurCol].width);\n                else\n                    colHiddenWidth = this.ColumnWidthToPixels(8.43);\n                picture.lastColOffset = (colHiddenWidth * picture.lastColOffset) / 1024;\n                picture.lastColOffset = Math.round(picture.lastColOffset / this.unitsProportions[7]);\n                break;\n            }\n            else {\n                iCurWidth -= iSpaceInCell;\n                iCurCol++;\n                iCurOffset = 0;\n            }\n        }\n    }\n    convertToPixels(value) {\n        return value * this.unitsProportions[6];\n    }\n    convertBase64toImage(img) {\n        const byteStr = window.atob(img);\n        const buffer = new ArrayBuffer(byteStr.length);\n        const data = new Uint8Array(buffer);\n        for (let i = 0; i < byteStr.length; i++) {\n            data[i] = byteStr.charCodeAt(i);\n        }\n        const blob = new Blob([data], { type: 'image/png' });\n        return blob;\n    }\n    saveDrawingRelations(sheet) {\n        /* tslint:disable-next-line:max-line-length */\n        let drawingRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n        let length = sheet.images.length;\n        let id = this.imageCount - sheet.images.length;\n        for (let i = 1; i <= length; i++) {\n            id++;\n            /* tslint:disable-next-line:max-line-length */\n            drawingRelation += '<Relationship Id=\"rId' + i + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\" Target=\"../media/image' + id + '.png\" />';\n        }\n        this.addToArchive((drawingRelation + '</Relationships>'), 'xl/drawings/_rels/drawing' + this.drawingCount + '.xml.rels');\n    }\n    pixelsToColumnWidth(pixels) {\n        let dDigitWidth = 7;\n        let val = (pixels > dDigitWidth + 5) ?\n            this.trunc((pixels - 5) / dDigitWidth * 100 + 0.5) / 100 :\n            pixels / (dDigitWidth + 5);\n        return (val > 1) ?\n            ((val * dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0 :\n            (val * (dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0;\n    }\n    ColumnWidthToPixels(val) {\n        let dDigitWidth = 7;\n        let fileWidth = (val > 1) ?\n            ((val * dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0 :\n            (val * (dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0;\n        return this.trunc(((256 * fileWidth + this.trunc(128 / dDigitWidth)) / 256) * dDigitWidth);\n    }\n    trunc(x) {\n        let n = x - x % 1;\n        return n === 0 && (x < 0 || (x === 0 && (1 / x !== 1 / 0))) ? -0 : n;\n    }\n    pixelsToRowHeight(pixels) {\n        return (pixels * this.unitsProportions[5] / this.unitsProportions[6]);\n    }\n    saveSheetRelations(sheet) {\n        /* tslint:disable-next-line:max-line-length */\n        let relStr = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n        for (let hLink of sheet.hyperLinks) {\n            /* tslint:disable-next-line:max-line-length */\n            relStr += '<Relationship Id=\"rId' + hLink.rId + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\" Target=\"' + hLink.target + '\" TargetMode=\"External\" />';\n        }\n        if (sheet.images != undefined && sheet.images.length > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            relStr += '<Relationship Id=\"rId' + (sheet.hyperLinks.length + 1) + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing\" Target=\"../drawings/drawing' + this.drawingCount + '.xml\" />';\n        }\n        relStr += '</Relationships>';\n        return relStr;\n    }\n    saveSheetView(sheet) {\n        let paneString = '<sheetViews><sheetView workbookViewId=\"0\" ';\n        if (sheet.enableRtl === true) {\n            paneString += 'rightToLeft=\"1\"';\n        }\n        if (sheet.showGridLines === false) {\n            paneString += 'showGridLines=\"0\" >';\n        }\n        else {\n            paneString += '>';\n        }\n        if (sheet.freezePanes !== undefined) {\n            paneString += '<pane state=\"frozen\"' +\n                ' topLeftCell=\"' + sheet.freezePanes.leftCell + '\" ';\n            if (sheet.freezePanes.row !== 0) {\n                paneString += 'ySplit=\"' + sheet.freezePanes.row + '\" ';\n            }\n            if (sheet.freezePanes.column !== 0) {\n                paneString += 'xSplit=\"' + sheet.freezePanes.column + '\" ';\n            }\n            paneString += '/>';\n        }\n        paneString += '</sheetView></sheetViews > ';\n        return paneString;\n    }\n    saveSharedString() {\n        let length = this.sharedString.length;\n        if (length > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            let sstStart = '<?xml version=\"1.0\" encoding=\"utf-8\"?><sst uniqueCount=\"' + length + '\" count=\"' + this.sharedStringCount + '\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n            let si = '';\n            for (let i = 0; i < length; i++) {\n                if (this.sharedString[i].indexOf('<r>') !== 0) {\n                    si += '<si><t>';\n                    si += this.processString(this.sharedString[i]);\n                    si += '</t></si>';\n                }\n                else {\n                    si += '<si>';\n                    si += this.sharedString[i];\n                    si += '</si>';\n                }\n            }\n            si += '</sst>';\n            this.addToArchive(sstStart + si, 'xl/sharedStrings.xml');\n        }\n    }\n    processString(value) {\n        if (value.indexOf('&') !== -1) {\n            value = value.replace(/&/g, '&amp;');\n        }\n        if (value.indexOf('<') !== -1) {\n            value = value.replace(/</g, '&lt;');\n        }\n        if (value.indexOf('>') !== -1) {\n            value = value.replace(/>/g, '&gt;');\n        }\n        return value;\n    }\n    saveStyles() {\n        this.updateCellXfsStyleXfs();\n        /* tslint:disable-next-line:max-line-length */\n        let styleTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><styleSheet xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n        styleTemp += this.saveNumberFormats();\n        styleTemp += this.saveFonts();\n        styleTemp += this.saveFills();\n        styleTemp += this.saveBorders();\n        styleTemp += this.saveCellStyleXfs();\n        styleTemp += this.saveCellXfs();\n        styleTemp += this.saveCellStyles();\n        this.addToArchive(styleTemp + '</styleSheet>', 'xl/styles.xml');\n    }\n    updateCellXfsStyleXfs() {\n        for (let style of this.mStyles) {\n            let cellXfs = undefined;\n            if (style.isGlobalStyle) {\n                cellXfs = new CellStyleXfs();\n                cellXfs.xfId = (style.index - 1);\n            }\n            else {\n                cellXfs = new CellXfs();\n                cellXfs.xfId = 0;\n            }\n            //Add font\n            let compareFontResult = this.isNewFont(style);\n            if (!compareFontResult.result) {\n                let font = new Font();\n                font.b = style.bold;\n                font.i = style.italic;\n                font.name = style.fontName;\n                font.sz = style.fontSize;\n                font.u = style.underline;\n                font.color = ('FF' + style.fontColor.replace('#', ''));\n                this.mFonts.push(font);\n                cellXfs.fontId = this.mFonts.length - 1;\n            }\n            else {\n                cellXfs.fontId = compareFontResult.index;\n            }\n            //Add fill\n            if (style.backColor !== 'none') {\n                let backColor = 'FF' + style.backColor.replace('#', '');\n                if (this.mFills.has(backColor)) {\n                    let fillId = this.mFills.get(backColor);\n                    cellXfs.fillId = fillId;\n                }\n                else {\n                    let fillId = this.mFills.size + 2;\n                    this.mFills.set(backColor, fillId);\n                    cellXfs.fillId = (fillId);\n                }\n            }\n            else {\n                cellXfs.fillId = 0;\n            }\n            //Add border            \n            if (!this.isNewBorder(style)) {\n                this.mBorders.push(style.borders);\n                cellXfs.borderId = this.mBorders.length;\n            }\n            else {\n                cellXfs.borderId = 0;\n            }\n            //Add Number Format            \n            if (style.numberFormat !== 'GENERAL') {\n                if (this.mNumFmt.has(style.numberFormat)) {\n                    let numFmt = this.mNumFmt.get(style.numberFormat);\n                    cellXfs.numFmtId = numFmt.numFmtId;\n                }\n                else {\n                    let id = this.mNumFmt.size + 164;\n                    this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n                    cellXfs.numFmtId = id;\n                }\n            }\n            else {\n                if (style.numberFormat === 'GENERAL' && style.numFmtId === 14) {\n                    cellXfs.numFmtId = 14;\n                }\n                else {\n                    cellXfs.numFmtId = 0;\n                }\n            }\n            //Add alignment            \n            if (!style.isGlobalStyle) {\n                cellXfs.applyAlignment = 1;\n            }\n            cellXfs.alignment = new Alignment();\n            cellXfs.alignment.indent = style.indent;\n            cellXfs.alignment.horizontal = style.hAlign;\n            cellXfs.alignment.vertical = style.vAlign;\n            cellXfs.alignment.wrapText = style.wrapText ? 1 : 0;\n            cellXfs.alignment.rotation = style.rotation;\n            if (style.isGlobalStyle) {\n                this.mCellStyleXfs.push(cellXfs);\n                this.mCellXfs.push(cellXfs);\n            }\n            else {\n                //Add cellxfs\n                this.mCellXfs.push(cellXfs);\n            }\n        }\n    }\n    saveNumberFormats() {\n        if (this.mNumFmt.size >= 1) {\n            let numFmtStyle = '<numFmts count=\"' + (this.mNumFmt.size) + '\">';\n            this.mNumFmt.forEach((value, key) => {\n                numFmtStyle += '<numFmt numFmtId=\"' + value.numFmtId + '\" formatCode=\"' + value.formatCode.replace(/\"/g, '&quot;') + '\" />';\n            });\n            return (numFmtStyle += '</numFmts>');\n        }\n        else {\n            return '';\n        }\n    }\n    saveFonts() {\n        /* tslint:disable-next-line:max-line-length */\n        let fontStyle = '<fonts count=\"' + (this.mFonts.length) + '\">';\n        if (this.mFonts.length >= 1) {\n            for (let font of this.mFonts) {\n                fontStyle += '<font>';\n                if (font.b) {\n                    fontStyle += '<b />';\n                }\n                if (font.i) {\n                    fontStyle += '<i />';\n                }\n                if (font.u) {\n                    fontStyle += '<u />';\n                }\n                fontStyle += '<sz val=\"' + font.sz + '\" />';\n                fontStyle += '<color rgb=\"' + font.color + '\" />';\n                fontStyle += '<name val=\"' + font.name + '\" /></font>';\n            }\n        }\n        return fontStyle + '</fonts>';\n    }\n    saveFills() {\n        /* tslint:disable-next-line:max-line-length */\n        let fillsStyle = '<fills count=\"' + (this.mFills.size + 2) + '\"><fill><patternFill patternType=\"none\"></patternFill></fill><fill><patternFill patternType=\"gray125\"></patternFill></fill>';\n        if (this.mFills.size >= 1) {\n            this.mFills.forEach((value, key) => {\n                /* tslint:disable-next-line:max-line-length */\n                fillsStyle += '<fill><patternFill patternType=\"solid\"><fgColor rgb=\"' + key + '\" /><bgColor rgb=\"FFFFFFFF\" /></patternFill></fill>';\n            });\n        }\n        return fillsStyle + '</fills>';\n    }\n    saveBorders() {\n        /* tslint:disable-next-line:max-line-length */\n        let bordersStyle = '<borders count=\"' + (this.mBorders.length + 1) + '\"><border><left /><right /><top /><bottom /><diagonal /></border>';\n        if (this.mBorders.length >= 1) {\n            for (let borders of this.mBorders) {\n                if (this.isAllBorder(borders)) {\n                    let color = borders.all.color.replace('#', '');\n                    let lineStyle = borders.all.lineStyle;\n                    /* tslint:disable-next-line:max-line-length */\n                    bordersStyle += '<border><left style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></left><right style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></right><top style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></top><bottom style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></bottom></border>';\n                }\n                else {\n                    /* tslint:disable-next-line:max-line-length */\n                    bordersStyle += '<border><left style=\"' + borders.left.lineStyle + '\"><color rgb=\"FF' + borders.left.color.replace('#', '') + '\" /></left><right style=\"' + borders.right.lineStyle + '\"><color rgb=\"FF' + borders.right.color.replace('#', '') + '\" /></right><top style=\"' + borders.top.lineStyle + '\"><color rgb=\"FF' + borders.top.color.replace('#', '') + '\" /></top><bottom style=\"' + borders.bottom.lineStyle + '\"><color rgb=\"FF' + borders.bottom.color.replace('#', '') + '\" /></bottom></border>';\n                }\n            }\n        }\n        return bordersStyle + '</borders>';\n    }\n    saveCellStyles() {\n        let cellStyleString = '<cellStyles  count=\"' + (this.cellStyles.size) + '\">';\n        this.cellStyles.forEach((value, key) => {\n            cellStyleString += '<cellStyle name=\"' + key + '\" xfId=\"' + this.cellStyles.get(key).xfId + '\"';\n            if (key === 'Normal') {\n                cellStyleString += ' builtinId=\"0\"';\n            }\n            cellStyleString += ' />';\n        });\n        return cellStyleString += '</cellStyles>';\n    }\n    saveCellStyleXfs() {\n        /* tslint:disable-next-line:max-line-length */\n        let cellXfsStyle = '<cellStyleXfs count=\"' + (this.mCellStyleXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" />';\n        if (this.mCellStyleXfs.length >= 1) {\n            for (let cellStyleXf of this.mCellStyleXfs) {\n                /* tslint:disable-next-line:max-line-length */\n                cellXfsStyle += '<xf numFmtId=\"' + cellStyleXf.numFmtId + '\" fontId=\"' + cellStyleXf.fontId + '\" fillId=\"' + cellStyleXf.fillId + '\" borderId=\"' + cellStyleXf.borderId + '\" ';\n                if (cellStyleXf.alignment !== undefined) {\n                    cellXfsStyle += '>' + this.saveAlignment(cellStyleXf) + '</xf>';\n                }\n                else {\n                    cellXfsStyle += ' />';\n                }\n            }\n        }\n        return cellXfsStyle + '</cellStyleXfs>';\n    }\n    saveCellXfs() {\n        /* tslint:disable-next-line:max-line-length */\n        let cellXfsStyle = '<cellXfs count=\"' + (this.mCellXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" />';\n        if (this.mCellXfs.length >= 1) {\n            for (let cellXf of this.mCellXfs) {\n                /* tslint:disable-next-line:max-line-length */\n                cellXfsStyle += '<xf numFmtId=\"' + cellXf.numFmtId + '\" fontId=\"' + cellXf.fontId + '\" fillId=\"' + cellXf.fillId + '\" borderId=\"' + cellXf.borderId + '\" xfId=\"' + cellXf.xfId + '\" ';\n                if (cellXf.applyAlignment === 1) {\n                    cellXfsStyle += 'applyAlignment=\"1\"';\n                }\n                cellXfsStyle += '>' + this.saveAlignment(cellXf) + '</xf>';\n            }\n        }\n        return cellXfsStyle + '</cellXfs>';\n    }\n    saveAlignment(cellXf) {\n        let alignString = '<alignment ';\n        if (cellXf.alignment.horizontal !== undefined) {\n            alignString += 'horizontal=\"' + cellXf.alignment.horizontal + '\" ';\n        }\n        if (cellXf.alignment.indent !== undefined && cellXf.alignment.indent !== 0) {\n            alignString += 'indent=\"' + cellXf.alignment.indent + '\" ';\n        }\n        else if (cellXf.alignment.rotation !== undefined && cellXf.alignment.rotation !== 0) {\n            alignString += 'textRotation=\"' + cellXf.alignment.rotation + '\" ';\n        }\n        if (cellXf.alignment.vertical !== undefined) {\n            alignString += 'vertical=\"' + cellXf.alignment.vertical + '\" ';\n        }\n        alignString += 'wrapText=\"' + cellXf.alignment.wrapText + '\" />';\n        return alignString;\n    }\n    saveApp(builtInProperties) {\n        /* tslint:disable-next-line:max-line-length */\n        let appString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\"><Application>Essential XlsIO</Application>';\n        if (builtInProperties !== undefined) {\n            if (builtInProperties.manager !== undefined) {\n                appString += '<Manager>' + builtInProperties.manager + '</Manager>';\n            }\n            if (builtInProperties.company !== undefined) {\n                appString += '<Company>' + builtInProperties.company + '</Company>';\n            }\n        }\n        this.addToArchive((appString + '</Properties>'), 'docProps/app.xml');\n    }\n    saveCore(builtInProperties) {\n        let createdDate = new Date();\n        /* tslint:disable-next-line:max-line-length */\n        let coreString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><cp:coreProperties xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\">';\n        if (this.builtInProperties !== undefined) {\n            if (builtInProperties.author !== undefined) {\n                coreString += '<dc:creator>' + builtInProperties.author + '</dc:creator>';\n            }\n            if (builtInProperties.subject !== undefined) {\n                coreString += '<dc:subject>' + builtInProperties.subject + '</dc:subject>';\n            }\n            if (builtInProperties.category !== undefined) {\n                coreString += '<cp:category>' + builtInProperties.category + '</cp:category>';\n            }\n            if (builtInProperties.comments !== undefined) {\n                coreString += '<dc:description>' + builtInProperties.comments + '</dc:description>';\n            }\n            if (builtInProperties.title !== undefined) {\n                coreString += '<dc:title>' + builtInProperties.title + '</dc:title>';\n            }\n            if (builtInProperties.tags !== undefined) {\n                coreString += '<cp:keywords>' + builtInProperties.tags + '</cp:keywords>';\n            }\n            if (builtInProperties.status !== undefined) {\n                coreString += '<cp:contentStatus>' + builtInProperties.status + '</cp:contentStatus>';\n            }\n            if (builtInProperties.createdDate !== undefined) {\n                /* tslint:disable-next-line:max-line-length */\n                coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.createdDate.toISOString() + '</dcterms:created>';\n            }\n            else {\n                coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n            }\n            if (builtInProperties.modifiedDate !== undefined) {\n                /* tslint:disable-next-line:max-line-length */\n                coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.modifiedDate.toISOString() + '</dcterms:modified>';\n            }\n            else {\n                coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n            }\n        }\n        else {\n            coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n            coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n        }\n        /* tslint:disable-next-line:max-line-length */\n        coreString += '</cp:coreProperties>';\n        this.addToArchive(coreString, 'docProps/core.xml');\n    }\n    saveTopLevelRelation() {\n        /* tslint:disable-next-line:max-line-length */\n        let topRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\" /><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\" /><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\" /></Relationships>';\n        this.addToArchive(topRelation, '_rels/.rels');\n    }\n    saveWorkbookRelation() {\n        /* tslint:disable-next-line:max-line-length */\n        let wbRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n        let length = this.worksheets.length;\n        let count = 0;\n        for (let i = 0; i < length; i++, count++) {\n            /* tslint:disable-next-line:max-line-length */\n            wbRelation += '<Relationship Id=\"rId' + (i + 1).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet' + (i + 1).toString() + '.xml\" />';\n        }\n        /* tslint:disable-next-line:max-line-length */\n        wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\" />';\n        if (this.sharedStringCount > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n        }\n        this.addToArchive((wbRelation + '</Relationships>'), 'xl/_rels/workbook.xml.rels');\n    }\n    saveContentType() {\n        /* tslint:disable-next-line:max-line-length */\n        let contentTypeString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\"><Default Extension=\"xml\" ContentType=\"application/xml\" /><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /><Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\" /><Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\" />';\n        let sheetsOverride = '';\n        let length = this.worksheets.length;\n        for (let i = 0; i < length; i++) {\n            /* tslint:disable-next-line:max-line-length */\n            sheetsOverride += '<Override PartName=\"/xl/worksheets/sheet' + (i + 1).toString() + '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />';\n            if (this.worksheets[i].images != undefined && this.worksheets[i].images.length > 0) {\n                /* tslint:disable-next-line:max-line-length */\n                sheetsOverride += '<Override PartName=\"/xl/drawings/drawing' + (i + 1).toString() + '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.drawing+xml\" />';\n            }\n        }\n        if (this.imageCount > 0)\n            sheetsOverride += '<Default Extension=\"png\" ContentType=\"image/png\" />';\n        if (this.sharedStringCount > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            contentTypeString += '<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" />';\n        }\n        this.addToArchive((contentTypeString + sheetsOverride + '</Types>'), '[Content_Types].xml');\n    }\n    addToArchive(xmlString, itemName) {\n        if (typeof (xmlString) === 'string') {\n            let blob = new Blob([xmlString], { type: 'text/plain' });\n            let archiveItem = new ZipArchiveItem(blob, itemName);\n            this.mArchive.addItem(archiveItem);\n        }\n        else {\n            let archiveItem = new ZipArchiveItem(xmlString, itemName);\n            this.mArchive.addItem(archiveItem);\n        }\n    }\n    processMergeCells(cell, rowIndex, mergeCells) {\n        if (cell.rowSpan !== 0 || cell.colSpan !== 0) {\n            let mCell = new MergeCell();\n            mCell.x = cell.index;\n            mCell.width = cell.colSpan;\n            mCell.y = rowIndex;\n            mCell.height = cell.rowSpan;\n            let startCell = this.getCellName(mCell.y, mCell.x);\n            let endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);\n            mCell.ref = startCell + ':' + endCell;\n            let mergedCell = mergeCells.add(mCell);\n            let start = { x: mCell.x, y: mCell.y };\n            let end = {\n                x: (cell.index + mCell.width), y: (rowIndex + mCell.height)\n            };\n            this.updatedMergedCellStyles(start, end, cell);\n        }\n        return mergeCells;\n    }\n    updatedMergedCellStyles(sCell, eCell, cell) {\n        for (let x = sCell.x; x <= eCell.x; x++) {\n            for (let y = sCell.y; y <= eCell.y; y++) {\n                this.mergedCellsStyle.set(this.getCellName(y, x), { x: x, y: y, styleIndex: cell.styleIndex });\n            }\n        }\n    }\n    /**\n     * Returns the tick count corresponding to the given year, month, and day.\n     * @param year number value of year\n     * @param month number value of month\n     * @param day number value of day\n     */\n    dateToTicks(year, month, day) {\n        let ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n        let daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n        let daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n        if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {\n            let days = this.isLeapYear(year) ? daysToMonth366 : daysToMonth365;\n            let y = year - 1;\n            let n = y * 365 + ((y / 4) | 0) - ((y / 100) | 0) + ((y / 400) | 0) + days[month - 1] + day - 1;\n            return n * ticksPerDay;\n        }\n        throw new Error('Not a valid date');\n    }\n    /**\n     * Return the tick count corresponding to the given hour, minute, second.\n     * @param hour number value of hour\n     * @param minute number value if minute\n     * @param second number value of second\n     */\n    timeToTicks(hour, minute, second) {\n        if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {\n            let totalSeconds = hour * 3600 + minute * 60 + second;\n            return totalSeconds * 10000 * 1000;\n        }\n        throw new Error('Not valid time');\n    }\n    /**\n     * Checks if given year is a leap year.\n     * @param year Year value.\n     */\n    isLeapYear(year) {\n        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    }\n    /**\n     * Converts `DateTime` to the equivalent OLE Automation date.\n     */\n    toOADate(date) {\n        let ticks = 0;\n        /* tslint:disable-next-line:max-line-length */\n        ticks = this.dateToTicks(date.getFullYear(), (date.getMonth() + 1), date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds());\n        if (ticks === 0) {\n            return 0.0;\n        }\n        let ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n        let daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;\n        let doubleDateOffset = daysTo1899 * ticksPerDay;\n        let oaDateMinAsTicks = (((365 * 4 + 1) * 25 - 1) - 365) * ticksPerDay;\n        if (ticks < oaDateMinAsTicks) {\n            throw new Error('Arg_OleAutDateInvalid');\n        }\n        let millisPerDay = 1000 * 60 * 60 * 24;\n        return ((ticks - doubleDateOffset) / 10000) / millisPerDay;\n    }\n}\n/**\n * BuiltInProperties Class\n * @private\n */\nclass BuiltInProperties {\n}\n\n/**\n * index class\n */\n\nexport { CellStyle, Font, CellXfs, Alignment, CellStyleXfs, CellStyles, NumFmt, Border, Borders, Cell, Cells, Column, Row, Rows, Workbook, BuiltInProperties, Worksheet, HyperLink, Grouping, FreezePane, MergeCell, MergeCells, Worksheets, CsvHelper, ValueFormatter, BlobHelper };\n"]},"metadata":{},"sourceType":"module"}